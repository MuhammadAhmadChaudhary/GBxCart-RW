
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000016ee  00001782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011c  00800062  00800062  00001784  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031c5  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ed  00000000  00000000  00004a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017c6  00000000  00000000  000050fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  000068c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069d  00000000  00000000  00006c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022a0  00000000  00000000  000072c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00009561  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
       2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
       4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
       6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
       8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
       a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
       c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
       e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
      10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
      12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
      14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
      16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
      18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
      1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
      1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
      1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
      20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf e5       	ldi	r28, 0x5F	; 95
      28:	d2 e0       	ldi	r29, 0x02	; 2
      2a:	de bf       	out	0x3e, r29	; 62
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
      2e:	10 e0       	ldi	r17, 0x00	; 0
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	ee ee       	ldi	r30, 0xEE	; 238
      36:	f6 e1       	ldi	r31, 0x16	; 22
      38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
      3a:	05 90       	lpm	r0, Z+
      3c:	0d 92       	st	X+, r0
      3e:	a2 36       	cpi	r26, 0x62	; 98
      40:	b1 07       	cpc	r27, r17
      42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
      44:	21 e0       	ldi	r18, 0x01	; 1
      46:	a2 e6       	ldi	r26, 0x62	; 98
      48:	b0 e0       	ldi	r27, 0x00	; 0
      4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
      4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
      4e:	ae 37       	cpi	r26, 0x7E	; 126
      50:	b2 07       	cpc	r27, r18
      52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
      54:	ab d3       	rcall	.+1878   	; 0x7ac <main>
      56:	49 cb       	rjmp	.-2414   	; 0xfffff6ea <__eeprom_end+0xff7ef6ea>

00000058 <__bad_interrupt>:
      58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <USART_Receive>:

uint8_t cartMode = GBA_MODE;

// Receive USART data
uint8_t USART_Receive(void) {
	while ( !(UCSRA & (1<<RXC)) ); // Wait for data to be received
      5a:	5f 9b       	sbis	0x0b, 7	; 11
      5c:	fe cf       	rjmp	.-4      	; 0x5a <USART_Receive>
	return UDR; // Get and return received data from buffer
      5e:	8c b1       	in	r24, 0x0c	; 12
}
      60:	08 95       	ret

00000062 <USART_Transmit>:

// Transmit USART data
void USART_Transmit(unsigned char data) {
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer
      62:	5d 9b       	sbis	0x0b, 5	; 11
      64:	fe cf       	rjmp	.-4      	; 0x62 <USART_Transmit>
	UDR = data;
      66:	8c b9       	out	0x0c, r24	; 12
      68:	08 95       	ret

0000006a <usart_read_bytes>:
}

// Read 1-256 bytes from the USART 
void usart_read_bytes(int count) {
      6a:	0f 93       	push	r16
      6c:	1f 93       	push	r17
      6e:	cf 93       	push	r28
      70:	df 93       	push	r29
      72:	8c 01       	movw	r16, r24
	for (int x = 0; x < count; x++) {
      74:	c2 e7       	ldi	r28, 0x72	; 114
      76:	d0 e0       	ldi	r29, 0x00	; 0
      78:	ce 01       	movw	r24, r28
      7a:	82 57       	subi	r24, 0x72	; 114
      7c:	90 40       	sbci	r25, 0x00	; 0
      7e:	80 17       	cp	r24, r16
      80:	91 07       	cpc	r25, r17
      82:	1c f4       	brge	.+6      	; 0x8a <usart_read_bytes+0x20>
		receivedBuffer[x] = USART_Receive();
      84:	ea df       	rcall	.-44     	; 0x5a <USART_Receive>
      86:	89 93       	st	Y+, r24
      88:	f7 cf       	rjmp	.-18     	; 0x78 <usart_read_bytes+0xe>
	}
}
      8a:	df 91       	pop	r29
      8c:	cf 91       	pop	r28
      8e:	1f 91       	pop	r17
      90:	0f 91       	pop	r16
      92:	08 95       	ret

00000094 <usart_read_chars>:

// Read the USART until a 0 (string terminator byte) is received
void usart_read_chars(void) {
      94:	cf 93       	push	r28
      96:	df 93       	push	r29
      98:	c2 e7       	ldi	r28, 0x72	; 114
      9a:	d0 e0       	ldi	r29, 0x00	; 0
	int x = 0;
	while (1) {
		receivedBuffer[x] = USART_Receive();
      9c:	de df       	rcall	.-68     	; 0x5a <USART_Receive>
      9e:	89 93       	st	Y+, r24
		if (receivedBuffer[x] == 0) {
      a0:	81 11       	cpse	r24, r1
      a2:	fc cf       	rjmp	.-8      	; 0x9c <usart_read_chars+0x8>
			break;
		}
		x++;
	}
}
      a4:	df 91       	pop	r29
      a6:	cf 91       	pop	r28
      a8:	08 95       	ret

000000aa <rd_wr_csmreq_cs2_reset>:

// Turn RD, WR, CS/MREQ and CS2 to high so they are deselected (reset state)
void rd_wr_csmreq_cs2_reset(void) {
	cs2Pin_high; // CS2 off
      aa:	3a 9a       	sbi	0x07, 2	; 7
	cs_mreqPin_high; // CS/MREQ off
      ac:	94 9a       	sbi	0x12, 4	; 18
	rdPin_high; // RD off
      ae:	95 9a       	sbi	0x12, 5	; 18
	wrPin_high; // WR off
      b0:	96 9a       	sbi	0x12, 6	; 18
      b2:	08 95       	ret

000000b4 <gb_mode>:
// ****** Gameboy / Gameboy Colour functions ******

// Set Gameboy mode
void gb_mode(void) {
	// Set inputs
	PORT_DATA7_0 = 0;
      b4:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
      b6:	14 ba       	out	0x14, r1	; 20
	
	// Set outputs
	PORT_ADDR7_0 = 0;
      b8:	18 ba       	out	0x18, r1	; 24
	PORT_ADDR15_8 = 0;
      ba:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR7_0 = 0xFF;
      bc:	8f ef       	ldi	r24, 0xFF	; 255
      be:	87 bb       	out	0x17, r24	; 23
	DDR_ADDR15_8 = 0xFF;
      c0:	8a bb       	out	0x1a, r24	; 26
      c2:	08 95       	ret

000000c4 <set_16bit_address>:
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
      c4:	9b bb       	out	0x1b, r25	; 27
	PORT_ADDR7_0 = (address & 0xFF);
      c6:	88 bb       	out	0x18, r24	; 24
      c8:	08 95       	ret

000000ca <read_8bit_data>:
}

// Set the address and read a byte from the 8 bit data line
uint8_t read_8bit_data(uint16_t address) {
	set_16bit_address(address);
      ca:	fc df       	rcall	.-8      	; 0xc4 <set_16bit_address>
	
	cs_mreqPin_low;
      cc:	94 98       	cbi	0x12, 4	; 18
	rdPin_low;
      ce:	95 98       	cbi	0x12, 5	; 18
	
	asm volatile("nop"); // Delay a little (minimum needed is 1 nops, 2 nops for GB camera)
      d0:	00 00       	nop
	asm volatile("nop");
      d2:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
      d4:	83 b3       	in	r24, 0x13	; 19
	
	rdPin_high;
      d6:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
      d8:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
}
      da:	08 95       	ret

000000dc <write_8bit_data>:

// Set the address and write a byte to the 8 bit data line and pulse cs/mREQ if writing to RAM
void write_8bit_data(uint16_t address, uint8_t data, uint8_t type) {
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	d6 2f       	mov	r29, r22
      e2:	c4 2f       	mov	r28, r20
	set_16bit_address(address);
      e4:	ef df       	rcall	.-34     	; 0xc4 <set_16bit_address>
	
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
      e6:	8f ef       	ldi	r24, 0xFF	; 255
      e8:	84 bb       	out	0x14, r24	; 20
	PORT_DATA7_0 = data; // Set data
      ea:	d5 bb       	out	0x15, r29	; 21
	
	// Pulse WR and mREQ if the type matches
	wrPin_low;
      ec:	96 98       	cbi	0x12, 6	; 18
	if (type == MEMORY_WRITE) {
      ee:	c1 30       	cpi	r28, 0x01	; 1
      f0:	09 f4       	brne	.+2      	; 0xf4 <write_8bit_data+0x18>
		cs_mreqPin_low;
      f2:	94 98       	cbi	0x12, 4	; 18
	}
	
	asm volatile("nop");
      f4:	00 00       	nop
	
	if (type == MEMORY_WRITE) {
      f6:	c1 30       	cpi	r28, 0x01	; 1
      f8:	09 f4       	brne	.+2      	; 0xfc <write_8bit_data+0x20>
		cs_mreqPin_high;
      fa:	94 9a       	sbi	0x12, 4	; 18
	}
	wrPin_high;
      fc:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
      fe:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     100:	14 ba       	out	0x14, r1	; 20
}
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <gba_mode>:
// ****** Gameboy Advance functions ****** 

// Set GBA mode
void gba_mode(void) {
	// Set outputs for reading ROM addresses as default
	GBA_PORT_ROM_ADDR7_0 = 0;
     108:	18 ba       	out	0x18, r1	; 24
	GBA_PORT_ROM_ADDR15_8 = 0;
     10a:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR23_16 = 0;
     10c:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     10e:	8f ef       	ldi	r24, 0xFF	; 255
     110:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     112:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     114:	84 bb       	out	0x14, r24	; 20
     116:	08 95       	ret

00000118 <gba_set_24bit_address>:
}

// Set the 24 bit address on A23-0
void gba_set_24bit_address(uint32_t address) {	
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = 0; // Set 0-23 address lines low and set as outputs
     11c:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0;
     11e:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
     120:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     122:	2f ef       	ldi	r18, 0xFF	; 255
     124:	24 bb       	out	0x14, r18	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     126:	2a bb       	out	0x1a, r18	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     128:	27 bb       	out	0x17, r18	; 23
	
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
     12a:	8c 01       	movw	r16, r24
     12c:	22 27       	eor	r18, r18
     12e:	33 27       	eor	r19, r19
     130:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
     132:	07 2f       	mov	r16, r23
     134:	18 2f       	mov	r17, r24
     136:	29 2f       	mov	r18, r25
     138:	33 27       	eor	r19, r19
     13a:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
     13c:	68 bb       	out	0x18, r22	; 24
}
     13e:	1f 91       	pop	r17
     140:	0f 91       	pop	r16
     142:	08 95       	ret

00000144 <gba_read_16bit_data>:

// ---------- ROM/SRAM ----------

// Read a byte from the 16 bit data line non-sequentially
uint16_t gba_read_16bit_data(uint32_t address) {
	gba_set_24bit_address(address);
     144:	e9 df       	rcall	.-46     	; 0x118 <gba_set_24bit_address>
	
	cs_mreqPin_low;
     146:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_ADDR15_8 = 0; // Set A16-A0 address lines low and set as inputs for the data to be read out
     148:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
     14a:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR15_8 = 0;
     14c:	1a ba       	out	0x1a, r1	; 26
	GBA_DDR_ROM_ADDR7_0 = 0;
     14e:	17 ba       	out	0x17, r1	; 23
	
	rdPin_low;
     150:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop");
     152:	00 00       	nop
	
	uint16_t data = (GBA_PIN_ROM_DATA15_8 << 8) | GBA_PIN_ROM_DATA7_0; // Read data
     154:	29 b3       	in	r18, 0x19	; 25
     156:	86 b3       	in	r24, 0x16	; 22
	
	rdPin_high;
     158:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
     15a:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
     15c:	90 e0       	ldi	r25, 0x00	; 0
}
     15e:	92 2b       	or	r25, r18
     160:	08 95       	ret

00000162 <gba_read_ram_8bit_data>:

// Set the address and read a byte from the 8 bit data line
uint8_t gba_read_ram_8bit_data(uint16_t address) {
	set_16bit_address(address);
     162:	b0 df       	rcall	.-160    	; 0xc4 <set_16bit_address>
	
	rdPin_low;
     164:	95 98       	cbi	0x12, 5	; 18
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
     166:	3a 98       	cbi	0x07, 2	; 7
	
	asm volatile("nop"); // Delay a little (minimum needed is 2)
     168:	00 00       	nop
	asm volatile("nop");
     16a:	00 00       	nop
	
	uint8_t data = GBA_PIN_RAM_DATA7_0; // Read data
     16c:	83 b3       	in	r24, 0x13	; 19
	
	cs2Pin_high;
     16e:	3a 9a       	sbi	0x07, 2	; 7
	rdPin_high;
     170:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
     172:	08 95       	ret

00000174 <gba_write_ram_8bit_data>:

// Set the address and write a byte to the 8 bit data line 
void gba_write_ram_8bit_data(uint16_t address, uint8_t data) {
     174:	cf 93       	push	r28
     176:	c6 2f       	mov	r28, r22
	set_16bit_address(address);
     178:	a5 df       	rcall	.-182    	; 0xc4 <set_16bit_address>
	
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
     17a:	8f ef       	ldi	r24, 0xFF	; 255
     17c:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_RAM_DATA7_0 = data; // Set data
     17e:	c5 bb       	out	0x15, r28	; 21
	
	// Pulse WR
	wrPin_low;
     180:	96 98       	cbi	0x12, 6	; 18
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
     182:	3a 98       	cbi	0x07, 2	; 7
	
	asm volatile("nop");
     184:	00 00       	nop
	asm volatile("nop");
     186:	00 00       	nop
	
	cs2Pin_high;
     188:	3a 9a       	sbi	0x07, 2	; 7
	wrPin_high;
     18a:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
     18c:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
     18e:	14 ba       	out	0x14, r1	; 20
}
     190:	cf 91       	pop	r28
     192:	08 95       	ret

00000194 <gba_eeprom_mode>:

// ---------- EEPROM ----------

// Set address/data all high (includes AD0/A23)
void gba_eeprom_mode (void) {
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     194:	8f ef       	ldi	r24, 0xFF	; 255
     196:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     198:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     19a:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_ROM_ADDR7_0 = 0x80;
     19c:	90 e8       	ldi	r25, 0x80	; 128
     19e:	98 bb       	out	0x18, r25	; 24
	GBA_PORT_ROM_ADDR15_8 = 0xFF;
     1a0:	8b bb       	out	0x1b, r24	; 27
	GBA_PORT_ROM_ADDR23_16 = 0xFF;
     1a2:	85 bb       	out	0x15, r24	; 21
     1a4:	08 95       	ret

000001a6 <gba_eeprom_set_address>:
}

// Send out EEPROM address serially (WR clock, AD0 data out)
void gba_eeprom_set_address(uint16_t address, uint8_t eepromSize, uint8_t command) {
	cs_mreqPin_low;
     1a6:	94 98       	cbi	0x12, 4	; 18
	
	int8_t x = 0;
	if (eepromSize == EEPROM_64KBIT) {
     1a8:	62 30       	cpi	r22, 0x02	; 2
     1aa:	49 f4       	brne	.+18     	; 0x1be <gba_eeprom_set_address+0x18>
		if (command == EEPROM_READ) {
     1ac:	41 11       	cpse	r20, r1
     1ae:	05 c0       	rjmp	.+10     	; 0x1ba <gba_eeprom_set_address+0x14>
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
     1b0:	90 6c       	ori	r25, 0xC0	; 192
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
		}
		x = 15;
     1b2:	2f e0       	ldi	r18, 0x0F	; 15
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
		if (address & (1<<x)) {
     1b4:	e1 e0       	ldi	r30, 0x01	; 1
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	13 c0       	rjmp	.+38     	; 0x1e0 <gba_eeprom_set_address+0x3a>
	if (eepromSize == EEPROM_64KBIT) {
		if (command == EEPROM_READ) {
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
     1ba:	90 68       	ori	r25, 0x80	; 128
     1bc:	fa cf       	rjmp	.-12     	; 0x1b2 <gba_eeprom_set_address+0xc>
		}
		x = 15;
	}
	else {
		if (command == EEPROM_READ) {
     1be:	41 11       	cpse	r20, r1
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <gba_eeprom_set_address+0x20>
			address |= (1<<7) | (1<<6);
     1c2:	80 6c       	ori	r24, 0xC0	; 192
     1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <gba_eeprom_set_address+0x22>
		}
		else {
			address |= (1<<7);
     1c6:	80 68       	ori	r24, 0x80	; 128
		}
		x = 7;
     1c8:	27 e0       	ldi	r18, 0x07	; 7
     1ca:	f4 cf       	rjmp	.-24     	; 0x1b4 <gba_eeprom_set_address+0xe>
	while (x >= 0) {
		if (address & (1<<x)) {
			ad0Pin_high;
		}
		else {
			ad0Pin_low;
     1cc:	c0 98       	cbi	0x18, 0	; 24
		}
		
		wrPin_low; // CLK
     1ce:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
     1d0:	00 00       	nop
		asm ("nop");
     1d2:	00 00       	nop
		wrPin_high; 
     1d4:	96 9a       	sbi	0x12, 6	; 18
		asm ("nop");
     1d6:	00 00       	nop
		asm ("nop");
     1d8:	00 00       	nop
     1da:	21 50       	subi	r18, 0x01	; 1
		}
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
     1dc:	27 fd       	sbrc	r18, 7
     1de:	0d c0       	rjmp	.+26     	; 0x1fa <gba_eeprom_set_address+0x54>
		if (address & (1<<x)) {
     1e0:	bf 01       	movw	r22, r30
     1e2:	02 2e       	mov	r0, r18
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <gba_eeprom_set_address+0x44>
     1e6:	66 0f       	add	r22, r22
     1e8:	77 1f       	adc	r23, r23
     1ea:	0a 94       	dec	r0
     1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <gba_eeprom_set_address+0x40>
     1ee:	68 23       	and	r22, r24
     1f0:	79 23       	and	r23, r25
     1f2:	67 2b       	or	r22, r23
     1f4:	59 f3       	breq	.-42     	; 0x1cc <gba_eeprom_set_address+0x26>
			ad0Pin_high;
     1f6:	c0 9a       	sbi	0x18, 0	; 24
     1f8:	ea cf       	rjmp	.-44     	; 0x1ce <gba_eeprom_set_address+0x28>
		
		x--;
	}
	
	// Only send stop bit (0) and WR/CS high if reading, as writing is done in 1 continuous chunk
	if (command == EEPROM_READ) {  
     1fa:	41 11       	cpse	r20, r1
     1fc:	07 c0       	rjmp	.+14     	; 0x20c <gba_eeprom_set_address+0x66>
		ad0Pin_low;
     1fe:	c0 98       	cbi	0x18, 0	; 24
		asm ("nop");
     200:	00 00       	nop
		wrPin_low;
     202:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
     204:	00 00       	nop
		asm ("nop");
     206:	00 00       	nop
		
		wrPin_high;
     208:	96 9a       	sbi	0x12, 6	; 18
		cs_mreqPin_high;
     20a:	94 9a       	sbi	0x12, 4	; 18
     20c:	08 95       	ret

0000020e <gba_eeprom_read>:
	}
}

// Read 8 bytes from the EEPROM address, data is valid on rising edge
void gba_eeprom_read(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_READ);
     20e:	40 e0       	ldi	r20, 0x00	; 0
     210:	ca df       	rcall	.-108    	; 0x1a6 <gba_eeprom_set_address>
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
     212:	c0 98       	cbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
     214:	b8 98       	cbi	0x17, 0	; 23
	
	cs_mreqPin_low;
     216:	94 98       	cbi	0x12, 4	; 18
     218:	84 e0       	ldi	r24, 0x04	; 4
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
		rdPin_low; // CLK
     21a:	95 98       	cbi	0x12, 5	; 18
		asm ("nop");
     21c:	00 00       	nop
		asm ("nop");
     21e:	00 00       	nop
		rdPin_high; 
     220:	95 9a       	sbi	0x12, 5	; 18
		asm ("nop");
     222:	00 00       	nop
		asm ("nop");
     224:	00 00       	nop
     226:	81 50       	subi	r24, 0x01	; 1
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
     228:	c1 f7       	brne	.-16     	; 0x21a <gba_eeprom_read+0xc>
     22a:	e3 e7       	ldi	r30, 0x73	; 115
     22c:	f1 e0       	ldi	r31, 0x01	; 1
			asm ("nop");
			asm ("nop");
			rdPin_high;
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
				data |= (1<<x);
     22e:	41 e0       	ldi	r20, 0x01	; 1
     230:	50 e0       	ldi	r21, 0x00	; 0
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
     232:	87 e0       	ldi	r24, 0x07	; 7
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	20 e0       	ldi	r18, 0x00	; 0
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		uint8_t data = 0;
		for (int8_t x = 7; x >= 0; x--) {
			rdPin_low; // CLK
     238:	95 98       	cbi	0x12, 5	; 18
			asm ("nop");
     23a:	00 00       	nop
			asm ("nop");
     23c:	00 00       	nop
			rdPin_high;
     23e:	95 9a       	sbi	0x12, 5	; 18
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
     240:	b0 9b       	sbis	0x16, 0	; 22
     242:	07 c0       	rjmp	.+14     	; 0x252 <gba_eeprom_read+0x44>
				data |= (1<<x);
     244:	ba 01       	movw	r22, r20
     246:	08 2e       	mov	r0, r24
     248:	01 c0       	rjmp	.+2      	; 0x24c <gba_eeprom_read+0x3e>
     24a:	66 0f       	add	r22, r22
     24c:	0a 94       	dec	r0
     24e:	ea f7       	brpl	.-6      	; 0x24a <gba_eeprom_read+0x3c>
     250:	26 2b       	or	r18, r22
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	88 f7       	brcc	.-30     	; 0x238 <gba_eeprom_read+0x2a>
			}
		}
		eepromBuffer[c] = data;
     256:	21 93       	st	Z+, r18
		asm ("nop");
		asm ("nop");
	}
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	eb 37       	cpi	r30, 0x7B	; 123
     25c:	f8 07       	cpc	r31, r24
     25e:	49 f7       	brne	.-46     	; 0x232 <gba_eeprom_read+0x24>
			}
		}
		eepromBuffer[c] = data;
	}
	
	cs_mreqPin_high;
     260:	94 9a       	sbi	0x12, 4	; 18
	
	// Set AD0 pin as output
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
     262:	c0 9a       	sbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
     264:	b8 9a       	sbi	0x17, 0	; 23
     266:	08 95       	ret

00000268 <gba_eeprom_write>:
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
     268:	41 e0       	ldi	r20, 0x01	; 1
     26a:	9d df       	rcall	.-198    	; 0x1a6 <gba_eeprom_set_address>
     26c:	e3 e7       	ldi	r30, 0x73	; 115
     26e:	f1 e0       	ldi	r31, 0x01	; 1
     270:	48 e0       	ldi	r20, 0x08	; 8
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
     272:	27 e0       	ldi	r18, 0x07	; 7
     274:	30 e0       	ldi	r19, 0x00	; 0
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		for (int8_t x = 7; x >= 0; x--) {
			if (eepromBuffer[c] & (1<<x)) {
     276:	80 81       	ld	r24, Z
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	02 2e       	mov	r0, r18
     27c:	02 c0       	rjmp	.+4      	; 0x282 <gba_eeprom_write+0x1a>
     27e:	95 95       	asr	r25
     280:	87 95       	ror	r24
     282:	0a 94       	dec	r0
     284:	e2 f7       	brpl	.-8      	; 0x27e <gba_eeprom_write+0x16>
     286:	80 ff       	sbrs	r24, 0
     288:	02 c0       	rjmp	.+4      	; 0x28e <gba_eeprom_write+0x26>
				ad0Pin_high;
     28a:	c0 9a       	sbi	0x18, 0	; 24
     28c:	01 c0       	rjmp	.+2      	; 0x290 <gba_eeprom_write+0x28>
			}
			else {
				ad0Pin_low;
     28e:	c0 98       	cbi	0x18, 0	; 24
			}
			
			wrPin_low; // CLK
     290:	96 98       	cbi	0x12, 6	; 18
			asm ("nop");
     292:	00 00       	nop
			asm ("nop");
     294:	00 00       	nop
			wrPin_high; 
     296:	96 9a       	sbi	0x12, 6	; 18
			asm ("nop");
     298:	00 00       	nop
			asm ("nop");
     29a:	00 00       	nop
     29c:	21 50       	subi	r18, 0x01	; 1
     29e:	31 09       	sbc	r19, r1
     2a0:	50 f7       	brcc	.-44     	; 0x276 <gba_eeprom_write+0xe>
     2a2:	41 50       	subi	r20, 0x01	; 1
     2a4:	31 96       	adiw	r30, 0x01	; 1
// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
     2a6:	41 11       	cpse	r20, r1
     2a8:	e4 cf       	rjmp	.-56     	; 0x272 <gba_eeprom_write+0xa>
			asm ("nop");
		}
	}
	
	// Last bit low
	ad0Pin_low;
     2aa:	c0 98       	cbi	0x18, 0	; 24
	wrPin_low; // CLK
     2ac:	96 98       	cbi	0x12, 6	; 18
	asm ("nop");
     2ae:	00 00       	nop
	asm ("nop");
     2b0:	00 00       	nop
	wrPin_high; 
     2b2:	96 9a       	sbi	0x12, 6	; 18
	asm ("nop");
     2b4:	00 00       	nop
	asm ("nop");
     2b6:	00 00       	nop
	
	cs_mreqPin_high;
     2b8:	94 9a       	sbi	0x12, 4	; 18
     2ba:	08 95       	ret

000002bc <flash_write_bus_cycle>:


// ---------- FLASH ----------

// Set the address and data for the write byte cycle to the flash
void flash_write_bus_cycle(uint16_t address, uint8_t data) {
     2bc:	cf 93       	push	r28
     2be:	c6 2f       	mov	r28, r22
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
     2c0:	2f ef       	ldi	r18, 0xFF	; 255
     2c2:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
     2c4:	ff de       	rcall	.-514    	; 0xc4 <set_16bit_address>
	GBA_PORT_RAM_DATA7_0 = data;
     2c6:	c5 bb       	out	0x15, r28	; 21
	
	wrPin_low;
     2c8:	96 98       	cbi	0x12, 6	; 18
	cs2Pin_low;
     2ca:	3a 98       	cbi	0x07, 2	; 7
	asm volatile("nop");
     2cc:	00 00       	nop
	wrPin_high;
     2ce:	96 9a       	sbi	0x12, 6	; 18
	cs2Pin_high;
     2d0:	3a 9a       	sbi	0x07, 2	; 7
}
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <flash_read_chip_id>:

// Read the flash manufacturer and device ID (Software ID)
void flash_read_chip_id(void) {
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
	flash_write_bus_cycle(0x5555, 0xAA);
     2da:	6a ea       	ldi	r22, 0xAA	; 170
     2dc:	85 e5       	ldi	r24, 0x55	; 85
     2de:	95 e5       	ldi	r25, 0x55	; 85
     2e0:	ed df       	rcall	.-38     	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     2e2:	65 e5       	ldi	r22, 0x55	; 85
     2e4:	8a ea       	ldi	r24, 0xAA	; 170
     2e6:	9a e2       	ldi	r25, 0x2A	; 42
     2e8:	e9 df       	rcall	.-46     	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x90); // Software ID entry
     2ea:	60 e9       	ldi	r22, 0x90	; 144
     2ec:	85 e5       	ldi	r24, 0x55	; 85
     2ee:	95 e5       	ldi	r25, 0x55	; 85
     2f0:	e5 df       	rcall	.-54     	; 0x2bc <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f2:	8f e3       	ldi	r24, 0x3F	; 63
     2f4:	9c e9       	ldi	r25, 0x9C	; 156
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <flash_read_chip_id+0x20>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <flash_read_chip_id+0x26>
     2fc:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
	
	// Set data as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
     2fe:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
     300:	14 ba       	out	0x14, r1	; 20
	
	// Read and transmit the 2 bytes
	flashChipIdBuffer[0] = gba_read_ram_8bit_data(0x0000);
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	2d df       	rcall	.-422    	; 0x162 <gba_read_ram_8bit_data>
     308:	c0 e7       	ldi	r28, 0x70	; 112
     30a:	d0 e0       	ldi	r29, 0x00	; 0
     30c:	88 83       	st	Y, r24
	flashChipIdBuffer[1] = gba_read_ram_8bit_data(0x0001);
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	27 df       	rcall	.-434    	; 0x162 <gba_read_ram_8bit_data>
     314:	89 83       	std	Y+1, r24	; 0x01
	
	flash_write_bus_cycle(0x5555, 0xAA);
     316:	6a ea       	ldi	r22, 0xAA	; 170
     318:	85 e5       	ldi	r24, 0x55	; 85
     31a:	95 e5       	ldi	r25, 0x55	; 85
     31c:	cf df       	rcall	.-98     	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     31e:	65 e5       	ldi	r22, 0x55	; 85
     320:	8a ea       	ldi	r24, 0xAA	; 170
     322:	9a e2       	ldi	r25, 0x2A	; 42
     324:	cb df       	rcall	.-106    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xF0); // Software ID exit
     326:	60 ef       	ldi	r22, 0xF0	; 240
     328:	85 e5       	ldi	r24, 0x55	; 85
     32a:	95 e5       	ldi	r25, 0x55	; 85
     32c:	c7 df       	rcall	.-114    	; 0x2bc <flash_write_bus_cycle>
     32e:	8f e3       	ldi	r24, 0x3F	; 63
     330:	9c e9       	ldi	r25, 0x9C	; 156
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	f1 f7       	brne	.-4      	; 0x332 <flash_read_chip_id+0x5c>
     336:	00 c0       	rjmp	.+0      	; 0x338 <flash_read_chip_id+0x62>
     338:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <flash_switch_bank>:

// Switch banks on the Flash
void flash_switch_bank(uint8_t bank) {
     340:	cf 93       	push	r28
     342:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     344:	6a ea       	ldi	r22, 0xAA	; 170
     346:	85 e5       	ldi	r24, 0x55	; 85
     348:	95 e5       	ldi	r25, 0x55	; 85
     34a:	b8 df       	rcall	.-144    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     34c:	65 e5       	ldi	r22, 0x55	; 85
     34e:	8a ea       	ldi	r24, 0xAA	; 170
     350:	9a e2       	ldi	r25, 0x2A	; 42
     352:	b4 df       	rcall	.-152    	; 0x2bc <flash_write_bus_cycle>
	
	flash_write_bus_cycle(0x5555, 0xB0);
     354:	60 eb       	ldi	r22, 0xB0	; 176
     356:	85 e5       	ldi	r24, 0x55	; 85
     358:	95 e5       	ldi	r25, 0x55	; 85
     35a:	b0 df       	rcall	.-160    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x0000, bank);
     35c:	6c 2f       	mov	r22, r28
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
}
     362:	cf 91       	pop	r28
void flash_switch_bank(uint8_t bank) {
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	
	flash_write_bus_cycle(0x5555, 0xB0);
	flash_write_bus_cycle(0x0000, bank);
     364:	ab cf       	rjmp	.-170    	; 0x2bc <flash_write_bus_cycle>

00000366 <flash_erase_4k_sector>:
}

// Erase 4K sector on Flash, expects first sector to start at 0, left shifts by 12 (A15-A12 to select sector for 512Kbit)
// Takes 25ms after last command to erase sector
void flash_erase_4k_sector(uint8_t sector) {
     366:	cf 93       	push	r28
     368:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     36a:	6a ea       	ldi	r22, 0xAA	; 170
     36c:	85 e5       	ldi	r24, 0x55	; 85
     36e:	95 e5       	ldi	r25, 0x55	; 85
     370:	a5 df       	rcall	.-182    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     372:	65 e5       	ldi	r22, 0x55	; 85
     374:	8a ea       	ldi	r24, 0xAA	; 170
     376:	9a e2       	ldi	r25, 0x2A	; 42
     378:	a1 df       	rcall	.-190    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x80);
     37a:	60 e8       	ldi	r22, 0x80	; 128
     37c:	85 e5       	ldi	r24, 0x55	; 85
     37e:	95 e5       	ldi	r25, 0x55	; 85
     380:	9d df       	rcall	.-198    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xAA);
     382:	6a ea       	ldi	r22, 0xAA	; 170
     384:	85 e5       	ldi	r24, 0x55	; 85
     386:	95 e5       	ldi	r25, 0x55	; 85
     388:	99 df       	rcall	.-206    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     38a:	65 e5       	ldi	r22, 0x55	; 85
     38c:	8a ea       	ldi	r24, 0xAA	; 170
     38e:	9a e2       	ldi	r25, 0x2A	; 42
     390:	95 df       	rcall	.-214    	; 0x2bc <flash_write_bus_cycle>
	
	flash_write_bus_cycle((uint16_t) sector << 12, 0x30);
     392:	60 e3       	ldi	r22, 0x30	; 48
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	9c 2f       	mov	r25, r28
     398:	92 95       	swap	r25
     39a:	90 7f       	andi	r25, 0xF0	; 240
     39c:	8f df       	rcall	.-226    	; 0x2bc <flash_write_bus_cycle>
     39e:	8f e4       	ldi	r24, 0x4F	; 79
     3a0:	93 ec       	ldi	r25, 0xC3	; 195
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <flash_erase_4k_sector+0x3c>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <flash_erase_4k_sector+0x42>
     3a8:	00 00       	nop
	_delay_ms(25); // Wait 25ms for sector erase
}
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <flash_write_byte>:

// Write a single byte to the Flash address
// Takes 20us to program Flash
void flash_write_byte(uint16_t address, uint8_t data) {
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	ec 01       	movw	r28, r24
     3b6:	16 2f       	mov	r17, r22
	flash_write_bus_cycle(0x5555, 0xAA);
     3b8:	6a ea       	ldi	r22, 0xAA	; 170
     3ba:	85 e5       	ldi	r24, 0x55	; 85
     3bc:	95 e5       	ldi	r25, 0x55	; 85
     3be:	7e df       	rcall	.-260    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     3c0:	65 e5       	ldi	r22, 0x55	; 85
     3c2:	8a ea       	ldi	r24, 0xAA	; 170
     3c4:	9a e2       	ldi	r25, 0x2A	; 42
     3c6:	7a df       	rcall	.-268    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
     3c8:	60 ea       	ldi	r22, 0xA0	; 160
     3ca:	85 e5       	ldi	r24, 0x55	; 85
     3cc:	95 e5       	ldi	r25, 0x55	; 85
     3ce:	76 df       	rcall	.-276    	; 0x2bc <flash_write_bus_cycle>
	
	flash_write_bus_cycle(address, data);
     3d0:	61 2f       	mov	r22, r17
     3d2:	ce 01       	movw	r24, r28
     3d4:	73 df       	rcall	.-282    	; 0x2bc <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d6:	85 e3       	ldi	r24, 0x35	; 53
     3d8:	8a 95       	dec	r24
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <flash_write_byte+0x2a>
     3dc:	00 00       	nop
	_delay_us(20); // Wait byte program time
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	08 95       	ret

000003e6 <flash_write_sector>:

// Write a sector (128 bytes) to the Atmel flash
// Takes 20ms for write cycle
void flash_write_sector(uint16_t sector) {
     3e6:	ef 92       	push	r14
     3e8:	ff 92       	push	r15
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	8c 01       	movw	r16, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     3f4:	6a ea       	ldi	r22, 0xAA	; 170
     3f6:	85 e5       	ldi	r24, 0x55	; 85
     3f8:	95 e5       	ldi	r25, 0x55	; 85
     3fa:	60 df       	rcall	.-320    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     3fc:	65 e5       	ldi	r22, 0x55	; 85
     3fe:	8a ea       	ldi	r24, 0xAA	; 170
     400:	9a e2       	ldi	r25, 0x2A	; 42
     402:	5c df       	rcall	.-328    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
     404:	60 ea       	ldi	r22, 0xA0	; 160
     406:	85 e5       	ldi	r24, 0x55	; 85
     408:	95 e5       	ldi	r25, 0x55	; 85
     40a:	58 df       	rcall	.-336    	; 0x2bc <flash_write_bus_cycle>
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
     40c:	16 95       	lsr	r17
     40e:	10 2f       	mov	r17, r16
     410:	00 27       	eor	r16, r16
     412:	17 95       	ror	r17
     414:	07 95       	ror	r16
     416:	92 e7       	ldi	r25, 0x72	; 114
     418:	e9 2e       	mov	r14, r25
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	f9 2e       	mov	r15, r25
     41e:	c0 e0       	ldi	r28, 0x00	; 0
     420:	d0 e0       	ldi	r29, 0x00	; 0
     422:	f7 01       	movw	r30, r14
     424:	61 91       	ld	r22, Z+
     426:	7f 01       	movw	r14, r30
     428:	ce 01       	movw	r24, r28
     42a:	80 2b       	or	r24, r16
     42c:	91 2b       	or	r25, r17
     42e:	46 df       	rcall	.-372    	; 0x2bc <flash_write_bus_cycle>
     430:	21 96       	adiw	r28, 0x01	; 1
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	flash_write_bus_cycle(0x5555, 0xA0);
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
     432:	c0 38       	cpi	r28, 0x80	; 128
     434:	d1 05       	cpc	r29, r1
     436:	a9 f7       	brne	.-22     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     438:	8f e3       	ldi	r24, 0x3F	; 63
     43a:	9c e9       	ldi	r25, 0x9C	; 156
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     442:	00 00       	nop
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
	}
	_delay_ms(20); // Wait sector program time
}
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	ff 90       	pop	r15
     44e:	ef 90       	pop	r14
     450:	08 95       	ret

00000452 <gb_flash_read_byte>:

// ---------- GB FLASH CARTS ----------

// Read a byte from the flash (No CS pin pulse)
uint8_t gb_flash_read_byte(uint16_t address) {
	PORT_DATA7_0 = 0;
     452:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     454:	14 ba       	out	0x14, r1	; 20
	
	set_16bit_address(address);
     456:	36 de       	rcall	.-916    	; 0xc4 <set_16bit_address>
	
	rdPin_low;
     458:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop"); // Delay a little
     45a:	00 00       	nop
	asm volatile("nop");
     45c:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
     45e:	83 b3       	in	r24, 0x13	; 19
	rdPin_high;
     460:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
     462:	08 95       	ret

00000464 <gb_flash_write_bus_cycle>:

// Set the address and data for the write byte cycle to the flash
void gb_flash_write_bus_cycle(uint16_t address, uint8_t data) {
     464:	cf 93       	push	r28
     466:	c6 2f       	mov	r28, r22
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
     468:	2f ef       	ldi	r18, 0xFF	; 255
     46a:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
     46c:	2b de       	rcall	.-938    	; 0xc4 <set_16bit_address>
	PORT_DATA7_0 = data;
     46e:	c5 bb       	out	0x15, r28	; 21
	
	if (flashWriteWePin == WE_AS_AUDIO_PIN) { // Audio pin
     470:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <flashWriteWePin>
     474:	81 34       	cpi	r24, 0x41	; 65
     476:	31 f4       	brne	.+12     	; 0x484 <gb_flash_write_bus_cycle+0x20>
		audioPin_low; // WE low
     478:	39 98       	cbi	0x07, 1	; 7
		asm volatile("nop");
     47a:	00 00       	nop
		asm volatile("nop");
     47c:	00 00       	nop
		asm volatile("nop");
     47e:	00 00       	nop
		audioPin_high; // WE high
     480:	39 9a       	sbi	0x07, 1	; 7
     482:	05 c0       	rjmp	.+10     	; 0x48e <gb_flash_write_bus_cycle+0x2a>
	}
	else { // WR pin
		wrPin_low; // WE low
     484:	96 98       	cbi	0x12, 6	; 18
		asm volatile("nop");
     486:	00 00       	nop
		asm volatile("nop");
     488:	00 00       	nop
		asm volatile("nop");
     48a:	00 00       	nop
		wrPin_high; // WE high
     48c:	96 9a       	sbi	0x12, 6	; 18
	}
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
     48e:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     490:	14 ba       	out	0x14, r1	; 20
}
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <gb_flash_write_byte>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte.
void gb_flash_write_byte(uint16_t address, uint8_t data) {
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ec 01       	movw	r28, r24
     49e:	16 2f       	mov	r17, r22
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     4a0:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <flashWriteCycle+0x2>
     4a4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashWriteCycle>
     4a8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <flashWriteCycle+0x1>
     4ac:	db df       	rcall	.-74     	; 0x464 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     4ae:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <flashWriteCycle+0x6>
     4b2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flashWriteCycle+0x4>
     4b6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <flashWriteCycle+0x5>
     4ba:	d4 df       	rcall	.-88     	; 0x464 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     4bc:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <flashWriteCycle+0xa>
     4c0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flashWriteCycle+0x8>
     4c4:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <flashWriteCycle+0x9>
     4c8:	cd df       	rcall	.-102    	; 0x464 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
     4ca:	61 2f       	mov	r22, r17
     4cc:	ce 01       	movw	r24, r28
     4ce:	ca df       	rcall	.-108    	; 0x464 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d0:	8a e1       	ldi	r24, 0x1A	; 26
     4d2:	8a 95       	dec	r24
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <gb_flash_write_byte+0x3c>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <gb_flash_write_byte+0x42>
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     4d8:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     4da:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
     4dc:	ce 01       	movw	r24, r28
     4de:	b9 df       	rcall	.-142    	; 0x452 <gb_flash_read_byte>
	while (data != dataVerify) {
     4e0:	81 17       	cp	r24, r17
     4e2:	39 f0       	breq	.+14     	; 0x4f2 <gb_flash_write_byte+0x5c>
		dataVerify = gb_flash_read_byte(address);
     4e4:	ce 01       	movw	r24, r28
     4e6:	b5 df       	rcall	.-150    	; 0x452 <gb_flash_read_byte>
     4e8:	9d e0       	ldi	r25, 0x0D	; 13
     4ea:	9a 95       	dec	r25
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <gb_flash_write_byte+0x54>
     4ee:	00 00       	nop
     4f0:	f7 cf       	rjmp	.-18     	; 0x4e0 <gb_flash_write_byte+0x4a>
		_delay_us(5);
	}
}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	08 95       	ret

000004fa <gb_flash_write_byte_special>:

// Set the bank, write a single byte to the Flash address and pulse the reset pin
void gb_flash_write_byte_special(uint16_t address, uint8_t data) {
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	ec 01       	movw	r28, r24
     502:	16 2f       	mov	r17, r22
	// Set bank back
	if (flashBank1CommandWrites == 1) {
     504:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flashBank1CommandWrites>
     508:	81 30       	cpi	r24, 0x01	; 1
     50a:	51 f4       	brne	.+20     	; 0x520 <gb_flash_write_byte_special+0x26>
		write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	91 e2       	ldi	r25, 0x21	; 33
     516:	e2 dd       	rcall	.-1084   	; 0xdc <write_8bit_data>
     518:	85 e8       	ldi	r24, 0x85	; 133
     51a:	8a 95       	dec	r24
     51c:	f1 f7       	brne	.-4      	; 0x51a <gb_flash_write_byte_special+0x20>
     51e:	00 00       	nop
		_delay_us(50);
	}
	
	// Write
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     520:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <flashWriteCycle+0x2>
     524:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashWriteCycle>
     528:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <flashWriteCycle+0x1>
     52c:	9b df       	rcall	.-202    	; 0x464 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     52e:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <flashWriteCycle+0x6>
     532:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flashWriteCycle+0x4>
     536:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <flashWriteCycle+0x5>
     53a:	94 df       	rcall	.-216    	; 0x464 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     53c:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <flashWriteCycle+0xa>
     540:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flashWriteCycle+0x8>
     544:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <flashWriteCycle+0x9>
     548:	8d df       	rcall	.-230    	; 0x464 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
     54a:	61 2f       	mov	r22, r17
     54c:	ce 01       	movw	r24, r28
     54e:	8a df       	rcall	.-236    	; 0x464 <gb_flash_write_bus_cycle>
     550:	83 ef       	ldi	r24, 0xF3	; 243
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <gb_flash_write_byte_special+0x5a>
     558:	00 c0       	rjmp	.+0      	; 0x55a <gb_flash_write_byte_special+0x60>
     55a:	00 00       	nop
	_delay_us(250); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     55c:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     55e:	14 ba       	out	0x14, r1	; 20
	
	// Pulse reset
	PORTE &= ~(1<<CS2_PIN);
     560:	3a 98       	cbi	0x07, 2	; 7
     562:	95 e8       	ldi	r25, 0x85	; 133
     564:	9a 95       	dec	r25
     566:	f1 f7       	brne	.-4      	; 0x564 <gb_flash_write_byte_special+0x6a>
     568:	00 00       	nop
	_delay_us(50);
	PORTE |= (1<<CS2_PIN);
     56a:	3a 9a       	sbi	0x07, 2	; 7
     56c:	85 e8       	ldi	r24, 0x85	; 133
     56e:	8a 95       	dec	r24
     570:	f1 f7       	brne	.-4      	; 0x56e <gb_flash_write_byte_special+0x74>
     572:	00 00       	nop
	_delay_us(50);
}
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	08 95       	ret

0000057c <gb_flash_write_byte_bank1_commands>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte. 
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
     57c:	ff 92       	push	r15
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	ec 01       	movw	r28, r24
     588:	16 2f       	mov	r17, r22
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
     58a:	ff 24       	eor	r15, r15
     58c:	fa 94       	dec	r15
     58e:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
     590:	01 e2       	ldi	r16, 0x21	; 33
     592:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
     594:	18 ba       	out	0x18, r1	; 24
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = 1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
     59a:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     59c:	00 00       	nop
	wrPin_high;
     59e:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     5a0:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <flashWriteCycle+0x2>
     5a4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashWriteCycle>
     5a8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <flashWriteCycle+0x1>
     5ac:	5b df       	rcall	.-330    	; 0x464 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     5ae:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <flashWriteCycle+0x6>
     5b2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flashWriteCycle+0x4>
     5b6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <flashWriteCycle+0x5>
     5ba:	54 df       	rcall	.-344    	; 0x464 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     5bc:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <flashWriteCycle+0xa>
     5c0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flashWriteCycle+0x8>
     5c4:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <flashWriteCycle+0x9>
     5c8:	4d df       	rcall	.-358    	; 0x464 <gb_flash_write_bus_cycle>
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
     5ca:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
     5cc:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
     5ce:	18 ba       	out	0x18, r1	; 24
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = lastBankAccessed;
     5d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     5d4:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
     5d6:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     5d8:	00 00       	nop
	wrPin_high;
     5da:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(address, data);
     5dc:	61 2f       	mov	r22, r17
     5de:	ce 01       	movw	r24, r28
     5e0:	41 df       	rcall	.-382    	; 0x464 <gb_flash_write_bus_cycle>
     5e2:	8a e1       	ldi	r24, 0x1A	; 26
     5e4:	8a 95       	dec	r24
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <gb_flash_write_byte_bank1_commands+0x68>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <gb_flash_write_byte_bank1_commands+0x6e>
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     5ea:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     5ec:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
     5ee:	ce 01       	movw	r24, r28
     5f0:	30 df       	rcall	.-416    	; 0x452 <gb_flash_read_byte>
	while (data != dataVerify) {
     5f2:	81 17       	cp	r24, r17
     5f4:	39 f0       	breq	.+14     	; 0x604 <gb_flash_write_byte_bank1_commands+0x88>
		dataVerify = gb_flash_read_byte(address);
     5f6:	ce 01       	movw	r24, r28
     5f8:	2c df       	rcall	.-424    	; 0x452 <gb_flash_read_byte>
     5fa:	9d e0       	ldi	r25, 0x0D	; 13
     5fc:	9a 95       	dec	r25
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <gb_flash_write_byte_bank1_commands+0x80>
     600:	00 00       	nop
     602:	f7 cf       	rjmp	.-18     	; 0x5f2 <gb_flash_write_byte_bank1_commands+0x76>
		_delay_us(5);
	}
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	08 95       	ret

00000610 <gba_flash_write_bus_cycle>:


// ---------- GBA FLASH CARTS ----------

// Set the 24 bit address and 16 bit data for the write byte cycle to the flash (pulse WR pin)
void gba_flash_write_bus_cycle(uint32_t address, uint16_t data) {
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
     614:	8c 01       	movw	r16, r24
     616:	22 27       	eor	r18, r18
     618:	33 27       	eor	r19, r19
     61a:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
     61c:	07 2f       	mov	r16, r23
     61e:	18 2f       	mov	r17, r24
     620:	29 2f       	mov	r18, r25
     622:	33 27       	eor	r19, r19
     624:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
     626:	68 bb       	out	0x18, r22	; 24
	
	cs_mreqPin_low;
     628:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_DATA15_8 = data >> 8; // Set data
     62a:	5b bb       	out	0x1b, r21	; 27
	GBA_PORT_ROM_DATA7_0 = data & 0xFF;
     62c:	48 bb       	out	0x18, r20	; 24
	
	wrPin_low;
     62e:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     630:	00 00       	nop
	asm volatile("nop");
     632:	00 00       	nop
	asm volatile("nop");
     634:	00 00       	nop
	wrPin_high;
     636:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     638:	94 9a       	sbi	0x12, 4	; 18
}
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	08 95       	ret

00000640 <gba_flash_write_cycle_start_swapped>:

// Send the first 3 write cycles to the flash (swapped D0/D1)
void gba_flash_write_cycle_start_swapped(void) {
	// Set outputs
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     640:	8f ef       	ldi	r24, 0xFF	; 255
     642:	84 bb       	out	0x14, r24	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     644:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     646:	87 bb       	out	0x17, r24	; 23
	
	// 0x555, 0xA9
	GBA_PORT_ROM_ADDR23_16 = 0;
     648:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     64a:	95 e0       	ldi	r25, 0x05	; 5
     64c:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     64e:	85 e5       	ldi	r24, 0x55	; 85
     650:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     652:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     654:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA9;
     656:	29 ea       	ldi	r18, 0xA9	; 169
     658:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     65a:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     65c:	00 00       	nop
	asm volatile("nop");
     65e:	00 00       	nop
	asm volatile("nop");
     660:	00 00       	nop
	wrPin_high;
     662:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     664:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x2AA, 0x56
	GBA_PORT_ROM_ADDR23_16 = 0;
     666:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x02;
     668:	22 e0       	ldi	r18, 0x02	; 2
     66a:	2b bb       	out	0x1b, r18	; 27
	GBA_PORT_ROM_ADDR7_0 = 0xAA;
     66c:	2a ea       	ldi	r18, 0xAA	; 170
     66e:	28 bb       	out	0x18, r18	; 24
	cs_mreqPin_low;
     670:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     672:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0x56;
     674:	26 e5       	ldi	r18, 0x56	; 86
     676:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     678:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     67a:	00 00       	nop
	asm volatile("nop");
     67c:	00 00       	nop
	asm volatile("nop");
     67e:	00 00       	nop
	wrPin_high;
     680:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     682:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x555, 0xA0;
	GBA_PORT_ROM_ADDR23_16 = 0;
     684:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     686:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     688:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     68a:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     68c:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA0;
     68e:	80 ea       	ldi	r24, 0xA0	; 160
     690:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     692:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     694:	00 00       	nop
	asm volatile("nop");
     696:	00 00       	nop
	asm volatile("nop");
     698:	00 00       	nop
	wrPin_high;
     69a:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     69c:	94 9a       	sbi	0x12, 4	; 18
     69e:	08 95       	ret

000006a0 <gba_flash_write_cycle_start>:


// Send the first 3 write cycles to the flash
void gba_flash_write_cycle_start(void) {
	// Set outputs
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     6a0:	8f ef       	ldi	r24, 0xFF	; 255
     6a2:	84 bb       	out	0x14, r24	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     6a4:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     6a6:	87 bb       	out	0x17, r24	; 23
	
	// 0x555, 0xAA
	GBA_PORT_ROM_ADDR23_16 = 0;
     6a8:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     6aa:	95 e0       	ldi	r25, 0x05	; 5
     6ac:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     6ae:	85 e5       	ldi	r24, 0x55	; 85
     6b0:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     6b2:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     6b4:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xAA;
     6b6:	2a ea       	ldi	r18, 0xAA	; 170
     6b8:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     6ba:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     6bc:	00 00       	nop
	asm volatile("nop");
     6be:	00 00       	nop
	asm volatile("nop");
     6c0:	00 00       	nop
	wrPin_high;
     6c2:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     6c4:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x2AA, 0x55
	GBA_PORT_ROM_ADDR23_16 = 0;
     6c6:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x02;
     6c8:	32 e0       	ldi	r19, 0x02	; 2
     6ca:	3b bb       	out	0x1b, r19	; 27
	GBA_PORT_ROM_ADDR7_0 = 0xAA;
     6cc:	28 bb       	out	0x18, r18	; 24
	cs_mreqPin_low;
     6ce:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     6d0:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0x55;
     6d2:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     6d4:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     6d6:	00 00       	nop
	asm volatile("nop");
     6d8:	00 00       	nop
	asm volatile("nop");
     6da:	00 00       	nop
	wrPin_high;
     6dc:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     6de:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x555, 0xA0;
	GBA_PORT_ROM_ADDR23_16 = 0;
     6e0:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     6e2:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     6e4:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     6e6:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     6e8:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA0;
     6ea:	80 ea       	ldi	r24, 0xA0	; 160
     6ec:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     6ee:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     6f0:	00 00       	nop
	asm volatile("nop");
     6f2:	00 00       	nop
	asm volatile("nop");
     6f4:	00 00       	nop
	wrPin_high;
     6f6:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     6f8:	94 9a       	sbi	0x12, 4	; 18
     6fa:	08 95       	ret

000006fc <gba_flash_write_byte>:
}	


// Write 2 bytes to the Flash address. Time to wait depends on Flash, we will query it to verify the correct data has been written.
// Address is divided by 2 as we are in GBA mode. 
void gba_flash_write_byte(uint32_t address, uint16_t data, uint8_t isD0D1Swapped) {
     6fc:	cf 92       	push	r12
     6fe:	df 92       	push	r13
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	6b 01       	movw	r12, r22
     70a:	7c 01       	movw	r14, r24
     70c:	ea 01       	movw	r28, r20
	if (isD0D1Swapped == 0) {
     70e:	21 11       	cpse	r18, r1
     710:	02 c0       	rjmp	.+4      	; 0x716 <gba_flash_write_byte+0x1a>
		gba_flash_write_cycle_start();
     712:	c6 df       	rcall	.-116    	; 0x6a0 <gba_flash_write_cycle_start>
     714:	01 c0       	rjmp	.+2      	; 0x718 <gba_flash_write_byte+0x1c>
	}
	else {
		gba_flash_write_cycle_start_swapped();
     716:	94 df       	rcall	.-216    	; 0x640 <gba_flash_write_cycle_start_swapped>
	}
	gba_flash_write_bus_cycle(address, data);
     718:	ae 01       	movw	r20, r28
     71a:	c7 01       	movw	r24, r14
     71c:	b6 01       	movw	r22, r12
     71e:	78 df       	rcall	.-272    	; 0x610 <gba_flash_write_bus_cycle>
     720:	25 e0       	ldi	r18, 0x05	; 5
     722:	2a 95       	dec	r18
     724:	f1 f7       	brne	.-4      	; 0x722 <gba_flash_write_byte+0x26>
     726:	00 00       	nop
	_delay_us(2); // Wait byte program time
	
	// Verify data
	uint16_t dataVerify = gba_read_16bit_data(address);
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	0b dd       	rcall	.-1514   	; 0x144 <gba_read_16bit_data>
	while (data != dataVerify) {
     72e:	8c 17       	cp	r24, r28
     730:	9d 07       	cpc	r25, r29
     732:	41 f0       	breq	.+16     	; 0x744 <gba_flash_write_byte+0x48>
		dataVerify = gba_read_16bit_data(address);
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	05 dd       	rcall	.-1526   	; 0x144 <gba_read_16bit_data>
     73a:	25 e0       	ldi	r18, 0x05	; 5
     73c:	2a 95       	dec	r18
     73e:	f1 f7       	brne	.-4      	; 0x73c <gba_flash_write_byte+0x40>
     740:	00 00       	nop
     742:	f5 cf       	rjmp	.-22     	; 0x72e <gba_flash_write_byte+0x32>
		_delay_us(2);
	}
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	ff 90       	pop	r15
     74a:	ef 90       	pop	r14
     74c:	df 90       	pop	r13
     74e:	cf 90       	pop	r12
     750:	08 95       	ret

00000752 <setup>:


// Setup
void setup(void) {
	// Turn off watchdog
	MCUCSR &= ~(1<<WDRF);
     752:	84 b7       	in	r24, 0x34	; 52
     754:	87 7f       	andi	r24, 0xF7	; 247
     756:	84 bf       	out	0x34, r24	; 52
	WDTCR = (1<<WDCE) | (1<<WDE);
     758:	88 e1       	ldi	r24, 0x18	; 24
     75a:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
     75c:	11 bc       	out	0x21, r1	; 33
	
	// Reset common lines
	rd_wr_csmreq_cs2_reset();
     75e:	a5 dc       	rcall	.-1718   	; 0xaa <rd_wr_csmreq_cs2_reset>
	
	// Set outputs
	DDRD |= (1<<ACTIVITY_LED) | (1<<WR_PIN) | (1<<RD_PIN) | (1<<CS_MREQ_PIN) | (1<<LED_5V) | (1<<VOLTAGE_SELECT);
     760:	81 b3       	in	r24, 0x11	; 17
     762:	8c 6f       	ori	r24, 0xFC	; 252
     764:	81 bb       	out	0x11, r24	; 17
	DDRE |= (1<<CS2_PIN) | (1<<LED_3V);
     766:	86 b1       	in	r24, 0x06	; 6
     768:	85 60       	ori	r24, 0x05	; 5
     76a:	86 b9       	out	0x06, r24	; 6
	
	// Set all pins as inputs
	PORT_DATA7_0 = 0;
     76c:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     76e:	14 ba       	out	0x14, r1	; 20
	PORT_ADDR7_0 = 0;
     770:	18 ba       	out	0x18, r1	; 24
	DDR_ADDR7_0 = 0;
     772:	17 ba       	out	0x17, r1	; 23
	PORT_ADDR15_8 = 0;
     774:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR15_8 = 0;
     776:	1a ba       	out	0x1a, r1	; 26
	
	// Light up 3.3V or 5V
	if (cartMode == GB_MODE) {
     778:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     77c:	81 30       	cpi	r24, 0x01	; 1
     77e:	19 f4       	brne	.+6      	; 0x786 <setup+0x34>
		PORTD |= (1<<LED_5V);
     780:	97 9a       	sbi	0x12, 7	; 18
		PORTE &= ~(1<<LED_3V);
     782:	38 98       	cbi	0x07, 0	; 7
     784:	02 c0       	rjmp	.+4      	; 0x78a <setup+0x38>
	}
	else {
		PORTE |= (1<<LED_3V);
     786:	38 9a       	sbi	0x07, 0	; 7
		PORTD &= ~(1<<LED_5V);
     788:	97 98       	cbi	0x12, 7	; 18
	}
	
	// Light LED
	PORTD |= (1<<ACTIVITY_LED);
     78a:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     78c:	2f ef       	ldi	r18, 0xFF	; 255
     78e:	84 e3       	ldi	r24, 0x34	; 52
     790:	9c e0       	ldi	r25, 0x0C	; 12
     792:	21 50       	subi	r18, 0x01	; 1
     794:	80 40       	sbci	r24, 0x00	; 0
     796:	90 40       	sbci	r25, 0x00	; 0
     798:	e1 f7       	brne	.-8      	; 0x792 <setup+0x40>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <setup+0x4a>
     79c:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1<<ACTIVITY_LED);
     79e:	93 98       	cbi	0x12, 3	; 18
	
	// Setup USART
	UBRRL = 0; // 1Mbps Baud rate
     7a0:	19 b8       	out	0x09, r1	; 9
	sbi(UCSRA, U2X); // Double rate
     7a2:	59 9a       	sbi	0x0b, 1	; 11
	sbi(UCSRB, TXEN); // Transmitter enable
     7a4:	53 9a       	sbi	0x0a, 3	; 10
	sbi(UCSRB, RXEN); // Receiver enable
     7a6:	54 9a       	sbi	0x0a, 4	; 10
	
	// Turn on interrupts
	sei();
     7a8:	78 94       	sei
     7aa:	08 95       	ret

000007ac <main>:
#include <string.h>
#include "setup.c" // See defines, variables, constants, functions here


int main(void) {
	setup();
     7ac:	d2 df       	rcall	.-92     	; 0x752 <setup>
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t resetCommonLines = 1;
     7ae:	22 24       	eor	r2, r2
     7b0:	23 94       	inc	r2

int main(void) {
	setup();
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
     7b2:	d1 e0       	ldi	r29, 0x01	; 1


int main(void) {
	setup();
	
	uint32_t address = 0;
     7b4:	c1 2c       	mov	r12, r1
     7b6:	d1 2c       	mov	r13, r1
     7b8:	76 01       	movw	r14, r12
			uint8_t readEnd = 32;
			if (receivedChar == GBA_READ_ROM_256BYTE) {
				readEnd = 128;
			}
			
			receivedChar = '1';
     7ba:	91 e3       	ldi	r25, 0x31	; 49
     7bc:	39 2e       	mov	r3, r25
			usart_read_bytes(64);
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
				// Set address lines as outputs
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
     7be:	cf ef       	ldi	r28, 0xFF	; 255
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t resetCommonLines = 1;
	
	while(1) {
		if (resetCommonLines == 1) {
     7c0:	21 e0       	ldi	r18, 0x01	; 1
     7c2:	22 12       	cpse	r2, r18
     7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <main+0x1c>
			rd_wr_csmreq_cs2_reset();
     7c6:	71 dc       	rcall	.-1822   	; 0xaa <rd_wr_csmreq_cs2_reset>
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
     7c8:	48 dc       	rcall	.-1904   	; 0x5a <USART_Receive>
     7ca:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <receivedChar>
		
		// Return the cart mode in use
		if (receivedChar == CART_MODE) {
     7ce:	83 34       	cpi	r24, 0x43	; 67
     7d0:	19 f4       	brne	.+6      	; 0x7d8 <main+0x2c>
			USART_Transmit(cartMode);
     7d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     7d6:	ab c5       	rjmp	.+2902   	; 0x132e <main+0xb82>
		}
		
		// Change to GB mode or GBA mode if requested
		else if (receivedChar == GB_CART_MODE) {
     7d8:	87 34       	cpi	r24, 0x47	; 71
     7da:	11 f4       	brne	.+4      	; 0x7e0 <main+0x34>
			gb_mode();
     7dc:	6b dc       	rcall	.-1834   	; 0xb4 <gb_mode>
     7de:	f0 cf       	rjmp	.-32     	; 0x7c0 <main+0x14>
		}
		else if (receivedChar == GBA_CART_MODE) {
     7e0:	87 36       	cpi	r24, 0x67	; 103
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <main+0x3a>
     7e4:	f8 c0       	rjmp	.+496    	; 0x9d6 <main+0x22a>
			gba_mode();
		}
		
		// Switch voltage if requested
		else if (receivedChar == VOLTAGE_3_3V) {
     7e6:	83 33       	cpi	r24, 0x33	; 51
     7e8:	39 f4       	brne	.+14     	; 0x7f8 <main+0x4c>
			PORTD &= ~(1<<VOLTAGE_SELECT);
     7ea:	92 98       	cbi	0x12, 2	; 18
			cartMode = GBA_MODE;
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			PORTE |= (1<<LED_3V);
     7f2:	38 9a       	sbi	0x07, 0	; 7
			PORTD &= ~(1<<LED_5V);
     7f4:	97 98       	cbi	0x12, 7	; 18
     7f6:	e4 cf       	rjmp	.-56     	; 0x7c0 <main+0x14>
		}
		else if (receivedChar == VOLTAGE_5V) {
     7f8:	85 33       	cpi	r24, 0x35	; 53
     7fa:	39 f4       	brne	.+14     	; 0x80a <main+0x5e>
			PORTD |= (1<<VOLTAGE_SELECT);
     7fc:	92 9a       	sbi	0x12, 2	; 18
			cartMode = GB_MODE;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			PORTD |= (1<<LED_5V);
     804:	97 9a       	sbi	0x12, 7	; 18
			PORTE &= ~(1<<LED_3V);
     806:	38 98       	cbi	0x07, 0	; 7
     808:	db cf       	rjmp	.-74     	; 0x7c0 <main+0x14>
		
		
		// ****** Gameboy / Gameboy Colour ******
		
		// Set address
		else if (receivedChar == SET_START_ADDRESS) {
     80a:	81 34       	cpi	r24, 0x41	; 65
     80c:	59 f4       	brne	.+22     	; 0x824 <main+0x78>
			usart_read_chars(); // Read start address
     80e:	42 dc       	rcall	.-1916   	; 0x94 <usart_read_chars>
			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     810:	40 e1       	ldi	r20, 0x10	; 16
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	82 e7       	ldi	r24, 0x72	; 114
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	a7 d5       	rcall	.+2894   	; 0x136c <strtol>
     81e:	6b 01       	movw	r12, r22
     820:	7c 01       	movw	r14, r24
     822:	ce cf       	rjmp	.-100    	; 0x7c0 <main+0x14>
		}
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
     824:	82 35       	cpi	r24, 0x52	; 82
     826:	f1 f4       	brne	.+60     	; 0x864 <main+0xb8>
			gb_mode();
     828:	45 dc       	rcall	.-1910   	; 0xb4 <gb_mode>
			receivedChar = '1';
     82a:	30 92 72 01 	sts	0x0172, r3	; 0x800172 <receivedChar>
			while (receivedChar == '1') {
     82e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <receivedChar>
     832:	81 33       	cpi	r24, 0x31	; 49
     834:	29 f6       	brne	.-118    	; 0x7c0 <main+0x14>
				PORTD |= (1<<ACTIVITY_LED);
     836:	93 9a       	sbi	0x12, 3	; 18
     838:	00 e0       	ldi	r16, 0x00	; 0
     83a:	10 e0       	ldi	r17, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(read_8bit_data(address));
     83c:	c8 01       	movw	r24, r16
     83e:	8c 0d       	add	r24, r12
     840:	9d 1d       	adc	r25, r13
     842:	43 dc       	rcall	.-1914   	; 0xca <read_8bit_data>
     844:	0e dc       	rcall	.-2020   	; 0x62 <USART_Transmit>
     846:	0f 5f       	subi	r16, 0xFF	; 255
     848:	1f 4f       	sbci	r17, 0xFF	; 255
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
     84a:	00 34       	cpi	r16, 0x40	; 64
     84c:	11 05       	cpc	r17, r1
     84e:	b1 f7       	brne	.-20     	; 0x83c <main+0x90>
     850:	80 e4       	ldi	r24, 0x40	; 64
     852:	c8 0e       	add	r12, r24
     854:	d1 1c       	adc	r13, r1
     856:	e1 1c       	adc	r14, r1
     858:	f1 1c       	adc	r15, r1
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     85a:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     85c:	fe db       	rcall	.-2052   	; 0x5a <USART_Receive>
     85e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <receivedChar>
     862:	e5 cf       	rjmp	.-54     	; 0x82e <main+0x82>
			}
		}
		
		// Write 64 bytes to RAM on address (and increment)
		else if (receivedChar == WRITE_RAM) {
     864:	87 35       	cpi	r24, 0x57	; 87
     866:	f1 f4       	brne	.+60     	; 0x8a4 <main+0xf8>
			gb_mode();
     868:	25 dc       	rcall	.-1974   	; 0xb4 <gb_mode>
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
     86a:	80 e4       	ldi	r24, 0x40	; 64
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	fd db       	rcall	.-2054   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     870:	93 9a       	sbi	0x12, 3	; 18
     872:	82 e7       	ldi	r24, 0x72	; 114
     874:	a8 2e       	mov	r10, r24
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	b8 2e       	mov	r11, r24
     87a:	00 e0       	ldi	r16, 0x00	; 0
     87c:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
     87e:	f5 01       	movw	r30, r10
     880:	61 91       	ld	r22, Z+
     882:	5f 01       	movw	r10, r30
     884:	c8 01       	movw	r24, r16
     886:	8c 0d       	add	r24, r12
     888:	9d 1d       	adc	r25, r13
     88a:	41 e0       	ldi	r20, 0x01	; 1
     88c:	27 dc       	rcall	.-1970   	; 0xdc <write_8bit_data>
     88e:	0f 5f       	subi	r16, 0xFF	; 255
     890:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     892:	00 34       	cpi	r16, 0x40	; 64
     894:	11 05       	cpc	r17, r1
     896:	99 f7       	brne	.-26     	; 0x87e <main+0xd2>
     898:	f0 e4       	ldi	r31, 0x40	; 64
     89a:	cf 0e       	add	r12, r31
     89c:	d1 1c       	adc	r13, r1
     89e:	e1 1c       	adc	r14, r1
     8a0:	f1 1c       	adc	r15, r1
     8a2:	52 c3       	rjmp	.+1700   	; 0xf48 <main+0x79c>
			PORTD &= ~(1<<ACTIVITY_LED);
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Set bank address and write a byte
		else if (receivedChar == SET_BANK) {
     8a4:	82 34       	cpi	r24, 0x42	; 66
     8a6:	e1 f4       	brne	.+56     	; 0x8e0 <main+0x134>
			gb_mode();
     8a8:	05 dc       	rcall	.-2038   	; 0xb4 <gb_mode>
			
			usart_read_chars(); // Read start address
     8aa:	f4 db       	rcall	.-2072   	; 0x94 <usart_read_chars>
			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     8ac:	40 e1       	ldi	r20, 0x10	; 16
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	82 e7       	ldi	r24, 0x72	; 114
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	59 d5       	rcall	.+2738   	; 0x136c <strtol>
     8ba:	4b 01       	movw	r8, r22
     8bc:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for bank number
     8be:	cd db       	rcall	.-2150   	; 0x5a <USART_Receive>
     8c0:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <receivedChar>
			if (receivedChar == 'B') {
     8c4:	82 34       	cpi	r24, 0x42	; 66
     8c6:	09 f0       	breq	.+2      	; 0x8ca <main+0x11e>
     8c8:	7b cf       	rjmp	.-266    	; 0x7c0 <main+0x14>
				usart_read_chars(); // Read data
     8ca:	e4 db       	rcall	.-2104   	; 0x94 <usart_read_chars>
				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
     8cc:	82 e7       	ldi	r24, 0x72	; 114
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	5e d6       	rcall	.+3260   	; 0x158e <atoi>
				lastBankAccessed = data; // Store the last bank accessed (used for flash carts that need it)
     8d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
				
				write_8bit_data(bankaddress, data, BANK_WRITE);
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	68 2f       	mov	r22, r24
     8da:	c4 01       	movw	r24, r8
     8dc:	ff db       	rcall	.-2050   	; 0xdc <write_8bit_data>
     8de:	70 cf       	rjmp	.-288    	; 0x7c0 <main+0x14>
		
		// ****** Gameboy Advance ******
		
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
     8e0:	82 37       	cpi	r24, 0x72	; 114
     8e2:	11 f0       	breq	.+4      	; 0x8e8 <main+0x13c>
     8e4:	8a 36       	cpi	r24, 0x6A	; 106
     8e6:	b1 f5       	brne	.+108    	; 0x954 <main+0x1a8>
			gba_mode();
     8e8:	0f dc       	rcall	.-2018   	; 0x108 <gba_mode>
			
			uint8_t readEnd = 32;
			if (receivedChar == GBA_READ_ROM_256BYTE) {
     8ea:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <receivedChar>
     8ee:	8a 36       	cpi	r24, 0x6A	; 106
     8f0:	11 f4       	brne	.+4      	; 0x8f6 <main+0x14a>
				readEnd = 128;
     8f2:	10 e8       	ldi	r17, 0x80	; 128
     8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <main+0x14c>
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
			gba_mode();
			
			uint8_t readEnd = 32;
     8f6:	10 e2       	ldi	r17, 0x20	; 32
			if (receivedChar == GBA_READ_ROM_256BYTE) {
				readEnd = 128;
			}
			
			receivedChar = '1';
     8f8:	30 92 72 01 	sts	0x0172, r3	; 0x800172 <receivedChar>
     8fc:	88 24       	eor	r8, r8
     8fe:	8a 94       	dec	r8
     900:	81 0e       	add	r8, r17
     902:	91 2c       	mov	r9, r1
     904:	a1 2c       	mov	r10, r1
     906:	b1 2c       	mov	r11, r1
     908:	2f ef       	ldi	r18, 0xFF	; 255
     90a:	82 1a       	sub	r8, r18
     90c:	92 0a       	sbc	r9, r18
     90e:	a2 0a       	sbc	r10, r18
     910:	b2 0a       	sbc	r11, r18
			while (receivedChar == '1') {
     912:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <receivedChar>
     916:	81 33       	cpi	r24, 0x31	; 49
     918:	09 f0       	breq	.+2      	; 0x91c <main+0x170>
     91a:	52 cf       	rjmp	.-348    	; 0x7c0 <main+0x14>
				PORTD |= (1<<ACTIVITY_LED);
     91c:	93 9a       	sbi	0x12, 3	; 18
     91e:	26 01       	movw	r4, r12
     920:	37 01       	movw	r6, r14
				
				for (uint8_t x = 0; x < readEnd; x++) {
					uint16_t dataRead = gba_read_16bit_data(address);
     922:	c3 01       	movw	r24, r6
     924:	b2 01       	movw	r22, r4
     926:	0e dc       	rcall	.-2020   	; 0x144 <gba_read_16bit_data>
     928:	09 2f       	mov	r16, r25
					
					// Low byte & High byte
					USART_Transmit(dataRead & 0xFF);
     92a:	9b db       	rcall	.-2250   	; 0x62 <USART_Transmit>
					USART_Transmit(dataRead >> 8);
     92c:	80 2f       	mov	r24, r16
     92e:	99 db       	rcall	.-2254   	; 0x62 <USART_Transmit>
					
					address++;
     930:	8f ef       	ldi	r24, 0xFF	; 255
     932:	48 1a       	sub	r4, r24
     934:	58 0a       	sbc	r5, r24
     936:	68 0a       	sbc	r6, r24
     938:	78 0a       	sbc	r7, r24
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				
				for (uint8_t x = 0; x < readEnd; x++) {
     93a:	84 2d       	mov	r24, r4
     93c:	8c 19       	sub	r24, r12
     93e:	81 17       	cp	r24, r17
     940:	80 f3       	brcs	.-32     	; 0x922 <main+0x176>
     942:	c8 0c       	add	r12, r8
     944:	d9 1c       	adc	r13, r9
     946:	ea 1c       	adc	r14, r10
     948:	fb 1c       	adc	r15, r11
					USART_Transmit(dataRead >> 8);
					
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     94a:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     94c:	86 db       	rcall	.-2292   	; 0x5a <USART_Receive>
     94e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <receivedChar>
     952:	df cf       	rjmp	.-66     	; 0x912 <main+0x166>
			}
		}
		
		// ---------- SRAM ----------
		// Read RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_SRAM) {
     954:	8d 36       	cpi	r24, 0x6D	; 109
     956:	f1 f4       	brne	.+60     	; 0x994 <main+0x1e8>
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
     958:	ad db       	rcall	.-2214   	; 0xb4 <gb_mode>
			
			receivedChar = '1';
     95a:	30 92 72 01 	sts	0x0172, r3	; 0x800172 <receivedChar>
			while (receivedChar == '1') {
     95e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <receivedChar>
     962:	81 33       	cpi	r24, 0x31	; 49
     964:	c1 f5       	brne	.+112    	; 0x9d6 <main+0x22a>
				PORTD |= (1<<ACTIVITY_LED);
     966:	93 9a       	sbi	0x12, 3	; 18
     968:	00 e0       	ldi	r16, 0x00	; 0
     96a:	10 e0       	ldi	r17, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(gba_read_ram_8bit_data(address));
     96c:	c8 01       	movw	r24, r16
     96e:	8c 0d       	add	r24, r12
     970:	9d 1d       	adc	r25, r13
     972:	f7 db       	rcall	.-2066   	; 0x162 <gba_read_ram_8bit_data>
     974:	76 db       	rcall	.-2324   	; 0x62 <USART_Transmit>
     976:	0f 5f       	subi	r16, 0xFF	; 255
     978:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
     97a:	00 34       	cpi	r16, 0x40	; 64
     97c:	11 05       	cpc	r17, r1
     97e:	b1 f7       	brne	.-20     	; 0x96c <main+0x1c0>
     980:	90 e4       	ldi	r25, 0x40	; 64
     982:	c9 0e       	add	r12, r25
     984:	d1 1c       	adc	r13, r1
     986:	e1 1c       	adc	r14, r1
     988:	f1 1c       	adc	r15, r1
					USART_Transmit(gba_read_ram_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     98a:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     98c:	66 db       	rcall	.-2356   	; 0x5a <USART_Receive>
     98e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <receivedChar>
     992:	e5 cf       	rjmp	.-54     	; 0x95e <main+0x1b2>
			
			gba_mode(); // Set back
		}
		
		// Write to RAM on address (and increment) with 64 bytes of data
		else if (receivedChar == GBA_WRITE_SRAM) {
     994:	87 37       	cpi	r24, 0x77	; 119
     996:	09 f5       	brne	.+66     	; 0x9da <main+0x22e>
			gb_mode();
     998:	8d db       	rcall	.-2278   	; 0xb4 <gb_mode>
			
			usart_read_bytes(64);
     99a:	80 e4       	ldi	r24, 0x40	; 64
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	65 db       	rcall	.-2358   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     9a0:	93 9a       	sbi	0x12, 3	; 18
     9a2:	02 e7       	ldi	r16, 0x72	; 114
     9a4:	a0 2e       	mov	r10, r16
     9a6:	00 e0       	ldi	r16, 0x00	; 0
     9a8:	b0 2e       	mov	r11, r16
     9aa:	00 e0       	ldi	r16, 0x00	; 0
     9ac:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
     9ae:	f5 01       	movw	r30, r10
     9b0:	61 91       	ld	r22, Z+
     9b2:	5f 01       	movw	r10, r30
     9b4:	c8 01       	movw	r24, r16
     9b6:	8c 0d       	add	r24, r12
     9b8:	9d 1d       	adc	r25, r13
     9ba:	dc db       	rcall	.-2120   	; 0x174 <gba_write_ram_8bit_data>
     9bc:	0f 5f       	subi	r16, 0xFF	; 255
     9be:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     9c0:	00 34       	cpi	r16, 0x40	; 64
     9c2:	11 05       	cpc	r17, r1
     9c4:	a1 f7       	brne	.-24     	; 0x9ae <main+0x202>
     9c6:	f0 e4       	ldi	r31, 0x40	; 64
     9c8:	cf 0e       	add	r12, r31
     9ca:	d1 1c       	adc	r13, r1
     9cc:	e1 1c       	adc	r14, r1
     9ce:	f1 1c       	adc	r15, r1
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
				address++;
			}
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     9d0:	81 e3       	ldi	r24, 0x31	; 49
     9d2:	47 db       	rcall	.-2418   	; 0x62 <USART_Transmit>
			
			PORTD &= ~(1<<ACTIVITY_LED);
     9d4:	93 98       	cbi	0x12, 3	; 18
			gba_mode(); // Set back
     9d6:	98 db       	rcall	.-2256   	; 0x108 <gba_mode>
     9d8:	f3 ce       	rjmp	.-538    	; 0x7c0 <main+0x14>
		}
		
		// Write 1 byte to SRAM address
		else if (receivedChar == GBA_WRITE_ONE_BYTE_SRAM) {
     9da:	8f 36       	cpi	r24, 0x6F	; 111
     9dc:	31 f4       	brne	.+12     	; 0x9ea <main+0x23e>
			gb_mode();
     9de:	6a db       	rcall	.-2348   	; 0xb4 <gb_mode>
			
			uint8_t data = USART_Receive();
     9e0:	3c db       	rcall	.-2440   	; 0x5a <USART_Receive>
			gba_write_ram_8bit_data(address, data);
     9e2:	68 2f       	mov	r22, r24
     9e4:	c6 01       	movw	r24, r12
     9e6:	c6 db       	rcall	.-2164   	; 0x174 <gba_write_ram_8bit_data>
     9e8:	23 c0       	rjmp	.+70     	; 0xa30 <main+0x284>
		}
		
		
		// ---------- FLASH ----------
		// Read the Flash Manufacturer and Device ID
		else if (receivedChar == GBA_FLASH_READ_ID) {
     9ea:	89 36       	cpi	r24, 0x69	; 105
     9ec:	49 f4       	brne	.+18     	; 0xa00 <main+0x254>
			gb_mode();
     9ee:	62 db       	rcall	.-2364   	; 0xb4 <gb_mode>
			
			flash_read_chip_id();
     9f0:	72 dc       	rcall	.-1820   	; 0x2d6 <flash_read_chip_id>
			USART_Transmit(flashChipIdBuffer[0]);
     9f2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <flashChipIdBuffer>
     9f6:	35 db       	rcall	.-2454   	; 0x62 <USART_Transmit>
			USART_Transmit(flashChipIdBuffer[1]);
     9f8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <flashChipIdBuffer+0x1>
     9fc:	32 db       	rcall	.-2460   	; 0x62 <USART_Transmit>
     9fe:	eb cf       	rjmp	.-42     	; 0x9d6 <main+0x22a>
			
			gba_mode(); // Set back
		}
		
		// Change bank
		else if (receivedChar == GBA_FLASH_SET_BANK) {
     a00:	8b 36       	cpi	r24, 0x6B	; 107
     a02:	49 f4       	brne	.+18     	; 0xa16 <main+0x26a>
			usart_read_chars(); // Read data
     a04:	47 db       	rcall	.-2418   	; 0x94 <usart_read_chars>
			uint8_t bank = atoi(receivedBuffer); // Convert data string to dec
     a06:	82 e7       	ldi	r24, 0x72	; 114
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	c1 d5       	rcall	.+2946   	; 0x158e <atoi>
     a0c:	18 2f       	mov	r17, r24
			
			gb_mode();
     a0e:	52 db       	rcall	.-2396   	; 0xb4 <gb_mode>
			flash_switch_bank(bank);
     a10:	81 2f       	mov	r24, r17
     a12:	96 dc       	rcall	.-1748   	; 0x340 <flash_switch_bank>
     a14:	e0 cf       	rjmp	.-64     	; 0x9d6 <main+0x22a>
			
			gba_mode(); // Set back
		}
		
		// Erase 4K sector on Flash (sector 0 to 15 for 512Kbit)
		else if (receivedChar == GBA_FLASH_4K_SECTOR_ERASE) {
     a16:	83 37       	cpi	r24, 0x73	; 115
     a18:	69 f4       	brne	.+26     	; 0xa34 <main+0x288>
			gb_mode();
     a1a:	4c db       	rcall	.-2408   	; 0xb4 <gb_mode>
			
			usart_read_chars(); // Read sector
     a1c:	3b db       	rcall	.-2442   	; 0x94 <usart_read_chars>
			uint8_t sectorAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     a1e:	40 e1       	ldi	r20, 0x10	; 16
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	82 e7       	ldi	r24, 0x72	; 114
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	a0 d4       	rcall	.+2368   	; 0x136c <strtol>
     a2c:	86 2f       	mov	r24, r22
			
			flash_erase_4k_sector(sectorAddress);
     a2e:	9b dc       	rcall	.-1738   	; 0x366 <flash_erase_4k_sector>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     a30:	81 e3       	ldi	r24, 0x31	; 49
     a32:	e4 cf       	rjmp	.-56     	; 0x9fc <main+0x250>
			
			gba_mode(); // Set back
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_BYTE) {
     a34:	82 36       	cpi	r24, 0x62	; 98
     a36:	c1 f4       	brne	.+48     	; 0xa68 <main+0x2bc>
			gb_mode();
     a38:	3d db       	rcall	.-2438   	; 0xb4 <gb_mode>
			
			usart_read_bytes(64);
     a3a:	80 e4       	ldi	r24, 0x40	; 64
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	15 db       	rcall	.-2518   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     a40:	93 9a       	sbi	0x12, 3	; 18
     a42:	12 e7       	ldi	r17, 0x72	; 114
     a44:	a1 2e       	mov	r10, r17
     a46:	10 e0       	ldi	r17, 0x00	; 0
     a48:	b1 2e       	mov	r11, r17
     a4a:	00 e0       	ldi	r16, 0x00	; 0
     a4c:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				flash_write_byte(address, receivedBuffer[x]);
     a4e:	f5 01       	movw	r30, r10
     a50:	61 91       	ld	r22, Z+
     a52:	5f 01       	movw	r10, r30
     a54:	c8 01       	movw	r24, r16
     a56:	8c 0d       	add	r24, r12
     a58:	9d 1d       	adc	r25, r13
     a5a:	a9 dc       	rcall	.-1710   	; 0x3ae <flash_write_byte>
     a5c:	0f 5f       	subi	r16, 0xFF	; 255
     a5e:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     a60:	00 34       	cpi	r16, 0x40	; 64
     a62:	11 05       	cpc	r17, r1
     a64:	a1 f7       	brne	.-24     	; 0xa4e <main+0x2a2>
     a66:	af cf       	rjmp	.-162    	; 0x9c6 <main+0x21a>
			PORTD &= ~(1<<ACTIVITY_LED);
			gba_mode(); // Set back
		}
		
		// Write 128 bytes to flash sector for Atmel flash (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_ATMEL) {
     a68:	81 36       	cpi	r24, 0x61	; 97
     a6a:	69 f4       	brne	.+26     	; 0xa86 <main+0x2da>
			gb_mode();
     a6c:	23 db       	rcall	.-2490   	; 0xb4 <gb_mode>
			
			usart_read_bytes(128);
     a6e:	80 e8       	ldi	r24, 0x80	; 128
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	fb da       	rcall	.-2570   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     a74:	93 9a       	sbi	0x12, 3	; 18
			flash_write_sector(address); // Address used as sector number
     a76:	c6 01       	movw	r24, r12
     a78:	b6 dc       	rcall	.-1684   	; 0x3e6 <flash_write_sector>
			address++;
     a7a:	2f ef       	ldi	r18, 0xFF	; 255
     a7c:	c2 1a       	sub	r12, r18
     a7e:	d2 0a       	sbc	r13, r18
     a80:	e2 0a       	sbc	r14, r18
     a82:	f2 0a       	sbc	r15, r18
     a84:	a5 cf       	rjmp	.-182    	; 0x9d0 <main+0x224>
		}
		
		
		// ---------- EEPROM ----------
		// Set EEPROM size
		else if (receivedChar == GBA_SET_EEPROM_SIZE) {
     a86:	83 35       	cpi	r24, 0x53	; 83
     a88:	51 f4       	brne	.+20     	; 0xa9e <main+0x2f2>
			usart_read_chars(); // Read size
     a8a:	04 db       	rcall	.-2552   	; 0x94 <usart_read_chars>
			eepromSize = strtol(receivedBuffer, NULL, 16); // Convert size to dec
     a8c:	40 e1       	ldi	r20, 0x10	; 16
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	82 e7       	ldi	r24, 0x72	; 114
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	69 d4       	rcall	.+2258   	; 0x136c <strtol>
     a9a:	d6 2f       	mov	r29, r22
     a9c:	91 ce       	rjmp	.-734    	; 0x7c0 <main+0x14>
		}
		
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
     a9e:	85 36       	cpi	r24, 0x65	; 101
     aa0:	09 f5       	brne	.+66     	; 0xae4 <main+0x338>
			gba_eeprom_mode();
     aa2:	78 db       	rcall	.-2320   	; 0x194 <gba_eeprom_mode>
			
			receivedChar = '1';
     aa4:	30 92 72 01 	sts	0x0172, r3	; 0x800172 <receivedChar>
			while (receivedChar == '1') {
     aa8:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <receivedChar>
     aac:	81 33       	cpi	r24, 0x31	; 49
     aae:	09 f0       	breq	.+2      	; 0xab2 <main+0x306>
     ab0:	92 cf       	rjmp	.-220    	; 0x9d6 <main+0x22a>
				PORTD |= (1<<ACTIVITY_LED);
     ab2:	93 9a       	sbi	0x12, 3	; 18
				gba_eeprom_read(address, eepromSize);
     ab4:	6d 2f       	mov	r22, r29
     ab6:	c6 01       	movw	r24, r12
     ab8:	aa db       	rcall	.-2220   	; 0x20e <gba_eeprom_read>
     aba:	03 e7       	ldi	r16, 0x73	; 115
     abc:	11 e0       	ldi	r17, 0x01	; 1
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
					USART_Transmit(eepromBuffer[c]);
     abe:	f8 01       	movw	r30, r16
     ac0:	81 91       	ld	r24, Z+
     ac2:	8f 01       	movw	r16, r30
     ac4:	ce da       	rcall	.-2660   	; 0x62 <USART_Transmit>
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				gba_eeprom_read(address, eepromSize);
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
     ac6:	8b e7       	ldi	r24, 0x7B	; 123
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	80 17       	cp	r24, r16
     acc:	91 07       	cpc	r25, r17
     ace:	b9 f7       	brne	.-18     	; 0xabe <main+0x312>
					USART_Transmit(eepromBuffer[c]);
				}
				address++; // Increment to next 8 bytes
     ad0:	9f ef       	ldi	r25, 0xFF	; 255
     ad2:	c9 1a       	sub	r12, r25
     ad4:	d9 0a       	sbc	r13, r25
     ad6:	e9 0a       	sbc	r14, r25
     ad8:	f9 0a       	sbc	r15, r25
				
				PORTD &= ~(1<<ACTIVITY_LED);
     ada:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     adc:	be da       	rcall	.-2692   	; 0x5a <USART_Receive>
     ade:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <receivedChar>
     ae2:	e2 cf       	rjmp	.-60     	; 0xaa8 <main+0x2fc>
			
			gba_mode(); // Set back
		}
		
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
     ae4:	80 37       	cpi	r24, 0x70	; 112
     ae6:	e1 f4       	brne	.+56     	; 0xb20 <main+0x374>
			gba_eeprom_mode();
     ae8:	55 db       	rcall	.-2390   	; 0x194 <gba_eeprom_mode>
     aea:	03 e7       	ldi	r16, 0x73	; 115
     aec:	11 e0       	ldi	r17, 0x01	; 1
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
				eepromBuffer[x] = USART_Receive();
     aee:	b5 da       	rcall	.-2710   	; 0x5a <USART_Receive>
     af0:	f8 01       	movw	r30, r16
     af2:	81 93       	st	Z+, r24
     af4:	8f 01       	movw	r16, r30
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
			gba_eeprom_mode();
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
     af6:	8b e7       	ldi	r24, 0x7B	; 123
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	8e 17       	cp	r24, r30
     afc:	9f 07       	cpc	r25, r31
     afe:	b9 f7       	brne	.-18     	; 0xaee <main+0x342>
				eepromBuffer[x] = USART_Receive();
			}
			PORTD |= (1<<ACTIVITY_LED);
     b00:	93 9a       	sbi	0x12, 3	; 18
			
			gba_eeprom_write(address, eepromSize);
     b02:	6d 2f       	mov	r22, r29
     b04:	c6 01       	movw	r24, r12
     b06:	b0 db       	rcall	.-2208   	; 0x268 <gba_eeprom_write>
			address++;
     b08:	9f ef       	ldi	r25, 0xFF	; 255
     b0a:	c9 1a       	sub	r12, r25
     b0c:	d9 0a       	sbc	r13, r25
     b0e:	e9 0a       	sbc	r14, r25
     b10:	f9 0a       	sbc	r15, r25
     b12:	ef e7       	ldi	r30, 0x7F	; 127
     b14:	fe e3       	ldi	r31, 0x3E	; 62
     b16:	31 97       	sbiw	r30, 0x01	; 1
     b18:	f1 f7       	brne	.-4      	; 0xb16 <main+0x36a>
     b1a:	00 c0       	rjmp	.+0      	; 0xb1c <main+0x370>
     b1c:	00 00       	nop
     b1e:	58 cf       	rjmp	.-336    	; 0x9d0 <main+0x224>
		}
		
		
		// ---------- GB FLASH CARTS ----------
		// Select which pin need to pulse as WE (Audio or WR)
		else if (receivedChar == GB_FLASH_WE_PIN) {
     b20:	80 35       	cpi	r24, 0x50	; 80
     b22:	49 f4       	brne	.+18     	; 0xb36 <main+0x38a>
			flashWriteWePin = USART_Receive();
     b24:	9a da       	rcall	.-2764   	; 0x5a <USART_Receive>
     b26:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <flashWriteWePin>
			
			if (flashWriteWePin == WE_AS_AUDIO_PIN) {
     b2a:	81 34       	cpi	r24, 0x41	; 65
     b2c:	09 f0       	breq	.+2      	; 0xb30 <main+0x384>
     b2e:	48 ce       	rjmp	.-880    	; 0x7c0 <main+0x14>
				DDRE |= (1<<AUDIO_PIN);
     b30:	31 9a       	sbi	0x06, 1	; 6
				audioPin_high;
     b32:	39 9a       	sbi	0x07, 1	; 7
     b34:	45 ce       	rjmp	.-886    	; 0x7c0 <main+0x14>
			}
		}
		
		// Some flash carts may require changing the bank back to 1 in order to accept flash chip commands
		else if (receivedChar == GB_FLASH_BANK_1_COMMAND_WRITES) {
     b36:	8e 34       	cpi	r24, 0x4E	; 78
     b38:	21 f4       	brne	.+8      	; 0xb42 <main+0x396>
			flashBank1CommandWrites = 1;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <flashBank1CommandWrites>
     b40:	3f ce       	rjmp	.-898    	; 0x7c0 <main+0x14>
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
     b42:	85 34       	cpi	r24, 0x45	; 69
     b44:	21 f5       	brne	.+72     	; 0xb8e <main+0x3e2>
     b46:	04 e6       	ldi	r16, 0x64	; 100
     b48:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 3; x++) {
				usart_read_chars(); // Address
     b4a:	a4 da       	rcall	.-2744   	; 0x94 <usart_read_chars>
				flashWriteCycle[x][0] = strtol(receivedBuffer, NULL, 16);
     b4c:	40 e1       	ldi	r20, 0x10	; 16
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	82 e7       	ldi	r24, 0x72	; 114
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	09 d4       	rcall	.+2066   	; 0x136c <strtol>
     b5a:	f8 01       	movw	r30, r16
     b5c:	71 83       	std	Z+1, r23	; 0x01
     b5e:	60 83       	st	Z, r22
				USART_Transmit(SEND_ACK);
     b60:	81 e3       	ldi	r24, 0x31	; 49
     b62:	7f da       	rcall	.-2818   	; 0x62 <USART_Transmit>
				
				usart_read_chars(); // Data
     b64:	97 da       	rcall	.-2770   	; 0x94 <usart_read_chars>
				flashWriteCycle[x][1] = strtol(receivedBuffer, NULL, 16);
     b66:	40 e1       	ldi	r20, 0x10	; 16
     b68:	50 e0       	ldi	r21, 0x00	; 0
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	82 e7       	ldi	r24, 0x72	; 114
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	fc d3       	rcall	.+2040   	; 0x136c <strtol>
     b74:	f8 01       	movw	r30, r16
     b76:	73 83       	std	Z+3, r23	; 0x03
     b78:	62 83       	std	Z+2, r22	; 0x02
				USART_Transmit(SEND_ACK);
     b7a:	81 e3       	ldi	r24, 0x31	; 49
     b7c:	72 da       	rcall	.-2844   	; 0x62 <USART_Transmit>
     b7e:	0c 5f       	subi	r16, 0xFC	; 252
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
			flashBank1CommandWrites = 1;
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
			for (uint8_t x = 0; x < 3; x++) {
     b82:	80 e7       	ldi	r24, 0x70	; 112
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	80 17       	cp	r24, r16
     b88:	91 07       	cpc	r25, r17
     b8a:	f9 f6       	brne	.-66     	; 0xb4a <main+0x39e>
     b8c:	19 ce       	rjmp	.-974    	; 0x7c0 <main+0x14>
				USART_Transmit(SEND_ACK);
			}
		}
		
		// Write address and one byte to Flash, pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
     b8e:	86 34       	cpi	r24, 0x46	; 70
     b90:	b1 f4       	brne	.+44     	; 0xbbe <main+0x412>
			usart_read_chars(); // Read address
     b92:	80 da       	rcall	.-2816   	; 0x94 <usart_read_chars>
			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16);
     b94:	40 e1       	ldi	r20, 0x10	; 16
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	82 e7       	ldi	r24, 0x72	; 114
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	e5 d3       	rcall	.+1994   	; 0x136c <strtol>
     ba2:	4b 01       	movw	r8, r22
     ba4:	5c 01       	movw	r10, r24
			
			usart_read_chars(); // Read data byte
     ba6:	76 da       	rcall	.-2836   	; 0x94 <usart_read_chars>
			uint8_t flashByte = strtol(receivedBuffer, NULL, 16);
     ba8:	40 e1       	ldi	r20, 0x10	; 16
     baa:	50 e0       	ldi	r21, 0x00	; 0
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	82 e7       	ldi	r24, 0x72	; 114
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	db d3       	rcall	.+1974   	; 0x136c <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
     bb6:	93 9a       	sbi	0x12, 3	; 18
			gb_flash_write_bus_cycle(flashAddress, flashByte);
     bb8:	c4 01       	movw	r24, r8
     bba:	54 dc       	rcall	.-1880   	; 0x464 <gb_flash_write_bus_cycle>
     bbc:	c5 c1       	rjmp	.+906    	; 0xf48 <main+0x79c>
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
     bbe:	84 35       	cpi	r24, 0x54	; 84
     bc0:	41 f5       	brne	.+80     	; 0xc12 <main+0x466>
			usart_read_bytes(64);
     bc2:	80 e4       	ldi	r24, 0x40	; 64
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	51 da       	rcall	.-2910   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     bc8:	93 9a       	sbi	0x12, 3	; 18
     bca:	a2 e7       	ldi	r26, 0x72	; 114
     bcc:	aa 2e       	mov	r10, r26
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	ba 2e       	mov	r11, r26
     bd2:	b0 e4       	ldi	r27, 0x40	; 64
     bd4:	9b 2e       	mov	r9, r27
     bd6:	86 01       	movw	r16, r12
     bd8:	02 57       	subi	r16, 0x72	; 114
     bda:	10 40       	sbci	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				if (flashBank1CommandWrites == 0) {
     bdc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flashBank1CommandWrites>
					gb_flash_write_byte(address, receivedBuffer[x]);
     be0:	f5 01       	movw	r30, r10
     be2:	60 81       	ld	r22, Z
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
				if (flashBank1CommandWrites == 0) {
     be4:	81 11       	cpse	r24, r1
     be6:	05 c0       	rjmp	.+10     	; 0xbf2 <main+0x446>
					gb_flash_write_byte(address, receivedBuffer[x]);
     be8:	c8 01       	movw	r24, r16
     bea:	8a 0d       	add	r24, r10
     bec:	9b 1d       	adc	r25, r11
     bee:	53 dc       	rcall	.-1882   	; 0x496 <gb_flash_write_byte>
     bf0:	04 c0       	rjmp	.+8      	; 0xbfa <main+0x44e>
				}
				else { // Some flash carts need to change to bank 1 to issue flash commands
					gb_flash_write_byte_bank1_commands(address, receivedBuffer[x]);
     bf2:	c8 01       	movw	r24, r16
     bf4:	8a 0d       	add	r24, r10
     bf6:	9b 1d       	adc	r25, r11
     bf8:	c1 dc       	rcall	.-1662   	; 0x57c <gb_flash_write_byte_bank1_commands>
     bfa:	9a 94       	dec	r9
     bfc:	ff ef       	ldi	r31, 0xFF	; 255
     bfe:	af 1a       	sub	r10, r31
     c00:	bf 0a       	sbc	r11, r31
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     c02:	91 10       	cpse	r9, r1
     c04:	eb cf       	rjmp	.-42     	; 0xbdc <main+0x430>
     c06:	20 e4       	ldi	r18, 0x40	; 64
     c08:	c2 0e       	add	r12, r18
     c0a:	d1 1c       	adc	r13, r1
     c0c:	e1 1c       	adc	r14, r1
     c0e:	f1 1c       	adc	r15, r1
     c10:	b2 c2       	rjmp	.+1380   	; 0x1176 <main+0x9ca>
			
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 32 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_BUFFERED_32BYTE) {
     c12:	89 35       	cpi	r24, 0x59	; 89
     c14:	09 f0       	breq	.+2      	; 0xc18 <main+0x46c>
     c16:	55 c0       	rjmp	.+170    	; 0xcc2 <main+0x516>
			usart_read_bytes(32);
     c18:	80 e2       	ldi	r24, 0x20	; 32
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	26 da       	rcall	.-2996   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
     c1e:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xAA);
     c20:	6a ea       	ldi	r22, 0xAA	; 170
     c22:	8a ea       	ldi	r24, 0xAA	; 170
     c24:	9a e0       	ldi	r25, 0x0A	; 10
     c26:	1e dc       	rcall	.-1988   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x55);
     c28:	65 e5       	ldi	r22, 0x55	; 85
     c2a:	85 e5       	ldi	r24, 0x55	; 85
     c2c:	95 e0       	ldi	r25, 0x05	; 5
     c2e:	1a dc       	rcall	.-1996   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x25);
     c30:	56 01       	movw	r10, r12
     c32:	65 e2       	ldi	r22, 0x25	; 37
     c34:	c6 01       	movw	r24, r12
     c36:	16 dc       	rcall	.-2004   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x1F); // Length
     c38:	6f e1       	ldi	r22, 0x1F	; 31
     c3a:	c6 01       	movw	r24, r12
     c3c:	13 dc       	rcall	.-2010   	; 0x464 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	8a 95       	dec	r24
     c42:	f1 f7       	brne	.-4      	; 0xc40 <main+0x494>
     c44:	00 c0       	rjmp	.+0      	; 0xc46 <main+0x49a>
     c46:	02 e7       	ldi	r16, 0x72	; 114
     c48:	10 e0       	ldi	r17, 0x00	; 0
     c4a:	81 2c       	mov	r8, r1
     c4c:	91 2c       	mov	r9, r1
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     c4e:	f8 01       	movw	r30, r16
     c50:	61 91       	ld	r22, Z+
     c52:	8f 01       	movw	r16, r30
     c54:	c4 01       	movw	r24, r8
     c56:	8a 0d       	add	r24, r10
     c58:	9b 1d       	adc	r25, r11
     c5a:	04 dc       	rcall	.-2040   	; 0x464 <gb_flash_write_bus_cycle>
     c5c:	ff ef       	ldi	r31, 0xFF	; 255
     c5e:	8f 1a       	sub	r8, r31
     c60:	9f 0a       	sbc	r9, r31
			gb_flash_write_bus_cycle(address, 0x25);
			gb_flash_write_bus_cycle(address, 0x1F); // Length
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
     c62:	20 e2       	ldi	r18, 0x20	; 32
     c64:	82 16       	cp	r8, r18
     c66:	91 04       	cpc	r9, r1
     c68:	91 f7       	brne	.-28     	; 0xc4e <main+0x4a2>
     c6a:	80 e2       	ldi	r24, 0x20	; 32
     c6c:	c8 0e       	add	r12, r24
     c6e:	d1 1c       	adc	r13, r1
     c70:	e1 1c       	adc	r14, r1
     c72:	f1 1c       	adc	r15, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-32, 0x29);
     c74:	c6 01       	movw	r24, r12
     c76:	80 97       	sbiw	r24, 0x20	; 32
     c78:	69 e2       	ldi	r22, 0x29	; 41
     c7a:	f4 db       	rcall	.-2072   	; 0x464 <gb_flash_write_bus_cycle>
     c7c:	ef e8       	ldi	r30, 0x8F	; 143
     c7e:	f1 e0       	ldi	r31, 0x01	; 1
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <main+0x4d4>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <main+0x4da>
     c86:	00 00       	nop
			_delay_us(200);
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
     c88:	86 01       	movw	r16, r12
     c8a:	01 50       	subi	r16, 0x01	; 1
     c8c:	11 09       	sbc	r17, r1
     c8e:	c8 01       	movw	r24, r16
     c90:	e0 db       	rcall	.-2112   	; 0x452 <gb_flash_read_byte>
			uint8_t verifyCount = 0;
			while (dataVerify != receivedBuffer[31]) {
     c92:	f8 ec       	ldi	r31, 0xC8	; 200
     c94:	bf 2e       	mov	r11, r31
     c96:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <receivedBuffer+0x1f>
     c9a:	89 17       	cp	r24, r25
     c9c:	09 f4       	brne	.+2      	; 0xca0 <main+0x4f4>
     c9e:	6b c2       	rjmp	.+1238   	; 0x1176 <main+0x9ca>
				dataVerify = gb_flash_read_byte(address-1);
     ca0:	c8 01       	movw	r24, r16
     ca2:	d7 db       	rcall	.-2130   	; 0x452 <gb_flash_read_byte>
     ca4:	fd e0       	ldi	r31, 0x0D	; 13
     ca6:	fa 95       	dec	r31
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <main+0x4fa>
     caa:	00 00       	nop
     cac:	ba 94       	dec	r11
				_delay_us(5);
				verifyCount++;
				if (verifyCount >= 200) {
     cae:	b1 10       	cpse	r11, r1
     cb0:	f2 cf       	rjmp	.-28     	; 0xc96 <main+0x4ea>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cb2:	2f ef       	ldi	r18, 0xFF	; 255
     cb4:	84 e3       	ldi	r24, 0x34	; 52
     cb6:	9c e0       	ldi	r25, 0x0C	; 12
     cb8:	21 50       	subi	r18, 0x01	; 1
     cba:	80 40       	sbci	r24, 0x00	; 0
     cbc:	90 40       	sbci	r25, 0x00	; 0
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <main+0x50c>
     cc0:	1e c1       	rjmp	.+572    	; 0xefe <main+0x752>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Write 64 bytes to Flash address one byte write at a time, increment and pulse the reset pin after, keep setting bank after bank 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
     cc2:	8a 34       	cpi	r24, 0x4A	; 74
     cc4:	f1 f4       	brne	.+60     	; 0xd02 <main+0x556>
			usart_read_bytes(64);
     cc6:	80 e4       	ldi	r24, 0x40	; 64
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	cf d9       	rcall	.-3170   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     ccc:	93 9a       	sbi	0x12, 3	; 18
     cce:	e2 e7       	ldi	r30, 0x72	; 114
     cd0:	ae 2e       	mov	r10, r30
     cd2:	e0 e0       	ldi	r30, 0x00	; 0
     cd4:	be 2e       	mov	r11, r30
     cd6:	00 e0       	ldi	r16, 0x00	; 0
     cd8:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				if (receivedBuffer[x] != 0xFF) { // No need to program 0xFF, skip
     cda:	f5 01       	movw	r30, r10
     cdc:	61 91       	ld	r22, Z+
     cde:	5f 01       	movw	r10, r30
     ce0:	6f 3f       	cpi	r22, 0xFF	; 255
     ce2:	21 f0       	breq	.+8      	; 0xcec <main+0x540>
					gb_flash_write_byte_special(address, receivedBuffer[x]);
     ce4:	c8 01       	movw	r24, r16
     ce6:	8c 0d       	add	r24, r12
     ce8:	9d 1d       	adc	r25, r13
     cea:	07 dc       	rcall	.-2034   	; 0x4fa <gb_flash_write_byte_special>
     cec:	0f 5f       	subi	r16, 0xFF	; 255
     cee:	1f 4f       	sbci	r17, 0xFF	; 255
		// Write 64 bytes to Flash address one byte write at a time, increment and pulse the reset pin after, keep setting bank after bank 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     cf0:	00 34       	cpi	r16, 0x40	; 64
     cf2:	11 05       	cpc	r17, r1
     cf4:	91 f7       	brne	.-28     	; 0xcda <main+0x52e>
     cf6:	f0 e4       	ldi	r31, 0x40	; 64
     cf8:	cf 0e       	add	r12, r31
     cfa:	d1 1c       	adc	r13, r1
     cfc:	e1 1c       	adc	r14, r1
     cfe:	f1 1c       	adc	r15, r1
     d00:	3a c2       	rjmp	.+1140   	; 0x1176 <main+0x9ca>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 256 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_256BYTE) {
     d02:	88 35       	cpi	r24, 0x58	; 88
     d04:	09 f0       	breq	.+2      	; 0xd08 <main+0x55c>
     d06:	42 c0       	rjmp	.+132    	; 0xd8c <main+0x5e0>
			usart_read_bytes(256);
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	ae d9       	rcall	.-3236   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
     d0e:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xA9);
     d10:	69 ea       	ldi	r22, 0xA9	; 169
     d12:	8a ea       	ldi	r24, 0xAA	; 170
     d14:	9a e0       	ldi	r25, 0x0A	; 10
     d16:	a6 db       	rcall	.-2228   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x56);
     d18:	66 e5       	ldi	r22, 0x56	; 86
     d1a:	85 e5       	ldi	r24, 0x55	; 85
     d1c:	95 e0       	ldi	r25, 0x05	; 5
     d1e:	a2 db       	rcall	.-2236   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
     d20:	56 01       	movw	r10, r12
     d22:	66 e2       	ldi	r22, 0x26	; 38
     d24:	c6 01       	movw	r24, r12
     d26:	9e db       	rcall	.-2244   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0xFF); // Length
     d28:	6f ef       	ldi	r22, 0xFF	; 255
     d2a:	c6 01       	movw	r24, r12
     d2c:	9b db       	rcall	.-2250   	; 0x464 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d2e:	25 e8       	ldi	r18, 0x85	; 133
     d30:	2a 95       	dec	r18
     d32:	f1 f7       	brne	.-4      	; 0xd30 <main+0x584>
     d34:	00 00       	nop
     d36:	02 e7       	ldi	r16, 0x72	; 114
     d38:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
     d3a:	81 2c       	mov	r8, r1
     d3c:	91 2c       	mov	r9, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     d3e:	f8 01       	movw	r30, r16
     d40:	61 91       	ld	r22, Z+
     d42:	8f 01       	movw	r16, r30
     d44:	c4 01       	movw	r24, r8
     d46:	8a 0d       	add	r24, r10
     d48:	9b 1d       	adc	r25, r11
     d4a:	8c db       	rcall	.-2280   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
			gb_flash_write_bus_cycle(address, 0xFF); // Length
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
     d4c:	ff ef       	ldi	r31, 0xFF	; 255
     d4e:	8f 1a       	sub	r8, r31
     d50:	9f 0a       	sbc	r9, r31
     d52:	81 14       	cp	r8, r1
     d54:	21 e0       	ldi	r18, 0x01	; 1
     d56:	92 06       	cpc	r9, r18
     d58:	91 f7       	brne	.-28     	; 0xd3e <main+0x592>
     d5a:	8f ef       	ldi	r24, 0xFF	; 255
     d5c:	d8 1a       	sub	r13, r24
     d5e:	e8 0a       	sbc	r14, r24
     d60:	f8 0a       	sbc	r15, r24
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-256, 0x2A);
     d62:	c6 01       	movw	r24, r12
     d64:	9a 95       	dec	r25
     d66:	6a e2       	ldi	r22, 0x2A	; 42
     d68:	7d db       	rcall	.-2310   	; 0x464 <gb_flash_write_bus_cycle>
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
     d6a:	86 01       	movw	r16, r12
     d6c:	01 50       	subi	r16, 0x01	; 1
     d6e:	11 09       	sbc	r17, r1
     d70:	c8 01       	movw	r24, r16
     d72:	6f db       	rcall	.-2338   	; 0x452 <gb_flash_read_byte>
			while (dataVerify != receivedBuffer[255]) {
     d74:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <receivedBuffer+0xff>
     d78:	89 17       	cp	r24, r25
     d7a:	09 f4       	brne	.+2      	; 0xd7e <main+0x5d2>
     d7c:	fc c1       	rjmp	.+1016   	; 0x1176 <main+0x9ca>
				dataVerify = gb_flash_read_byte(address-1);
     d7e:	c8 01       	movw	r24, r16
     d80:	68 db       	rcall	.-2352   	; 0x452 <gb_flash_read_byte>
     d82:	9d e0       	ldi	r25, 0x0D	; 13
     d84:	9a 95       	dec	r25
     d86:	f1 f7       	brne	.-4      	; 0xd84 <main+0x5d8>
     d88:	00 00       	nop
     d8a:	f4 cf       	rjmp	.-24     	; 0xd74 <main+0x5c8>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Nintendo Power 1MB Cart, Write 128 bytes to flash
		else if (receivedChar == GB_FLASH_WRITE_NP_128BYTE) {
     d8c:	8a 35       	cpi	r24, 0x5A	; 90
     d8e:	09 f0       	breq	.+2      	; 0xd92 <main+0x5e6>
     d90:	b9 c0       	rjmp	.+370    	; 0xf04 <main+0x758>
			usart_read_bytes(128);
     d92:	80 e8       	ldi	r24, 0x80	; 128
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	69 d9       	rcall	.-3374   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
     d98:	93 9a       	sbi	0x12, 3	; 18
			
			// Enable flash chip access
			gb_flash_write_bus_cycle(0x120, 0x09);
     d9a:	69 e0       	ldi	r22, 0x09	; 9
     d9c:	80 e2       	ldi	r24, 0x20	; 32
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	61 db       	rcall	.-2366   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x121, 0xaa);
     da2:	6a ea       	ldi	r22, 0xAA	; 170
     da4:	81 e2       	ldi	r24, 0x21	; 33
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	5d db       	rcall	.-2374   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x122, 0x55);
     daa:	65 e5       	ldi	r22, 0x55	; 85
     dac:	82 e2       	ldi	r24, 0x22	; 34
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	59 db       	rcall	.-2382   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     db2:	65 ea       	ldi	r22, 0xA5	; 165
     db4:	8f e3       	ldi	r24, 0x3F	; 63
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	55 db       	rcall	.-2390   	; 0x464 <gb_flash_write_bus_cycle>
     dba:	ed e0       	ldi	r30, 0x0D	; 13
     dbc:	ea 95       	dec	r30
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <main+0x610>
     dc0:	00 00       	nop
			_delay_us(5);
			
			// Re-Enable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x11);
     dc2:	61 e1       	ldi	r22, 0x11	; 17
     dc4:	80 e2       	ldi	r24, 0x20	; 32
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	4d db       	rcall	.-2406   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     dca:	65 ea       	ldi	r22, 0xA5	; 165
     dcc:	8f e3       	ldi	r24, 0x3F	; 63
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	49 db       	rcall	.-2414   	; 0x464 <gb_flash_write_bus_cycle>
     dd2:	fd e0       	ldi	r31, 0x0D	; 13
     dd4:	fa 95       	dec	r31
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <main+0x628>
     dd8:	00 00       	nop
			_delay_us(5);
			
			// Bank 1 for commands
			gb_flash_write_bus_cycle(0x2100, 0x01);
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	91 e2       	ldi	r25, 0x21	; 33
     de0:	41 db       	rcall	.-2430   	; 0x464 <gb_flash_write_bus_cycle>
     de2:	2d e0       	ldi	r18, 0x0D	; 13
     de4:	2a 95       	dec	r18
     de6:	f1 f7       	brne	.-4      	; 0xde4 <main+0x638>
     de8:	00 00       	nop
			_delay_us(5);
			
			
			// Write setup
			gb_flash_write_bus_cycle(0x120, 0x0F);
     dea:	6f e0       	ldi	r22, 0x0F	; 15
     dec:	80 e2       	ldi	r24, 0x20	; 32
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	39 db       	rcall	.-2446   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
     df2:	65 e5       	ldi	r22, 0x55	; 85
     df4:	85 e2       	ldi	r24, 0x25	; 37
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	35 db       	rcall	.-2454   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
     dfa:	65 e5       	ldi	r22, 0x55	; 85
     dfc:	86 e2       	ldi	r24, 0x26	; 38
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	31 db       	rcall	.-2462   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xAA);
     e02:	6a ea       	ldi	r22, 0xAA	; 170
     e04:	87 e2       	ldi	r24, 0x27	; 39
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	2d db       	rcall	.-2470   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
     e0a:	65 ea       	ldi	r22, 0xA5	; 165
     e0c:	8f e3       	ldi	r24, 0x3F	; 63
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	29 db       	rcall	.-2478   	; 0x464 <gb_flash_write_bus_cycle>
     e12:	8d e0       	ldi	r24, 0x0D	; 13
     e14:	8a 95       	dec	r24
     e16:	f1 f7       	brne	.-4      	; 0xe14 <main+0x668>
     e18:	00 00       	nop
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
     e1a:	6f e0       	ldi	r22, 0x0F	; 15
     e1c:	80 e2       	ldi	r24, 0x20	; 32
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	21 db       	rcall	.-2494   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x2A);
     e22:	6a e2       	ldi	r22, 0x2A	; 42
     e24:	85 e2       	ldi	r24, 0x25	; 37
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	1d db       	rcall	.-2502   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0xAA);
     e2a:	6a ea       	ldi	r22, 0xAA	; 170
     e2c:	86 e2       	ldi	r24, 0x26	; 38
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	19 db       	rcall	.-2510   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0x55);
     e32:	65 e5       	ldi	r22, 0x55	; 85
     e34:	87 e2       	ldi	r24, 0x27	; 39
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	15 db       	rcall	.-2518   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
     e3a:	65 ea       	ldi	r22, 0xA5	; 165
     e3c:	8f e3       	ldi	r24, 0x3F	; 63
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	11 db       	rcall	.-2526   	; 0x464 <gb_flash_write_bus_cycle>
     e42:	9d e0       	ldi	r25, 0x0D	; 13
     e44:	9a 95       	dec	r25
     e46:	f1 f7       	brne	.-4      	; 0xe44 <main+0x698>
     e48:	00 00       	nop
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
     e4a:	6f e0       	ldi	r22, 0x0F	; 15
     e4c:	80 e2       	ldi	r24, 0x20	; 32
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	09 db       	rcall	.-2542   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
     e52:	65 e5       	ldi	r22, 0x55	; 85
     e54:	85 e2       	ldi	r24, 0x25	; 37
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	05 db       	rcall	.-2550   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
     e5a:	65 e5       	ldi	r22, 0x55	; 85
     e5c:	86 e2       	ldi	r24, 0x26	; 38
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	01 db       	rcall	.-2558   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xA0);
     e62:	60 ea       	ldi	r22, 0xA0	; 160
     e64:	87 e2       	ldi	r24, 0x27	; 39
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	fd da       	rcall	.-2566   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
     e6a:	65 ea       	ldi	r22, 0xA5	; 165
     e6c:	8f e3       	ldi	r24, 0x3F	; 63
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	f9 da       	rcall	.-2574   	; 0x464 <gb_flash_write_bus_cycle>
     e72:	ed e0       	ldi	r30, 0x0D	; 13
     e74:	ea 95       	dec	r30
     e76:	f1 f7       	brne	.-4      	; 0xe74 <main+0x6c8>
     e78:	00 00       	nop
			_delay_us(5);
			
			// Set bank back
			write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	91 e2       	ldi	r25, 0x21	; 33
     e84:	2b d9       	rcall	.-3498   	; 0xdc <write_8bit_data>
     e86:	fd e0       	ldi	r31, 0x0D	; 13
     e88:	fa 95       	dec	r31
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <main+0x6dc>
     e8c:	00 00       	nop
			_delay_us(5);
			
			// Disable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x10);
     e8e:	60 e1       	ldi	r22, 0x10	; 16
     e90:	80 e2       	ldi	r24, 0x20	; 32
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	e7 da       	rcall	.-2610   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     e96:	65 ea       	ldi	r22, 0xA5	; 165
     e98:	8f e3       	ldi	r24, 0x3F	; 63
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	e3 da       	rcall	.-2618   	; 0x464 <gb_flash_write_bus_cycle>
     e9e:	2d e0       	ldi	r18, 0x0D	; 13
     ea0:	2a 95       	dec	r18
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <main+0x6f4>
     ea4:	00 00       	nop
			_delay_us(5);
			
			// Undo Wakeup
			gb_flash_write_bus_cycle(0x120, 0x08);
     ea6:	68 e0       	ldi	r22, 0x08	; 8
     ea8:	80 e2       	ldi	r24, 0x20	; 32
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	db da       	rcall	.-2634   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     eae:	65 ea       	ldi	r22, 0xA5	; 165
     eb0:	8f e3       	ldi	r24, 0x3F	; 63
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	d7 da       	rcall	.-2642   	; 0x464 <gb_flash_write_bus_cycle>
     eb6:	8d e0       	ldi	r24, 0x0D	; 13
     eb8:	8a 95       	dec	r24
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <main+0x70c>
     ebc:	00 00       	nop
     ebe:	02 e7       	ldi	r16, 0x72	; 114
     ec0:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(5);
			
			
			// Write data
			for (uint8_t x = 0; x < 128; x++) {
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	02 3f       	cpi	r16, 0xF2	; 242
     ec6:	18 07       	cpc	r17, r24
     ec8:	79 f0       	breq	.+30     	; 0xee8 <main+0x73c>
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     eca:	f8 01       	movw	r30, r16
     ecc:	61 91       	ld	r22, Z+
     ece:	8f 01       	movw	r16, r30
     ed0:	c6 01       	movw	r24, r12
     ed2:	c8 da       	rcall	.-2672   	; 0x464 <gb_flash_write_bus_cycle>
     ed4:	fd e0       	ldi	r31, 0x0D	; 13
     ed6:	fa 95       	dec	r31
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <main+0x72a>
     eda:	00 00       	nop
				_delay_us(5);
				address++;
     edc:	2f ef       	ldi	r18, 0xFF	; 255
     ede:	c2 1a       	sub	r12, r18
     ee0:	d2 0a       	sbc	r13, r18
     ee2:	e2 0a       	sbc	r14, r18
     ee4:	f2 0a       	sbc	r15, r18
     ee6:	ed cf       	rjmp	.-38     	; 0xec2 <main+0x716>
			}
			
			// Write buffer to flash
			address--;
			gb_flash_write_bus_cycle(address, 0xFF);
     ee8:	6f ef       	ldi	r22, 0xFF	; 255
     eea:	d7 01       	movw	r26, r14
     eec:	c6 01       	movw	r24, r12
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	a1 09       	sbc	r26, r1
     ef2:	b1 09       	sbc	r27, r1
     ef4:	b7 da       	rcall	.-2706   	; 0x464 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ef6:	ef e1       	ldi	r30, 0x1F	; 31
     ef8:	fe e4       	ldi	r31, 0x4E	; 78
     efa:	31 97       	sbiw	r30, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <main+0x74e>
     efe:	00 c0       	rjmp	.+0      	; 0xf00 <main+0x754>
     f00:	00 00       	nop
     f02:	39 c1       	rjmp	.+626    	; 0x1176 <main+0x9ca>
		}
		
		
		// ---------- GBA FLASH CARTS ----------
		// Write 24 bit address, 16 bit data and pulse a pin
		else if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
     f04:	8e 36       	cpi	r24, 0x6E	; 110
     f06:	19 f5       	brne	.+70     	; 0xf4e <main+0x7a2>
			usart_read_chars(); // Read address
     f08:	c5 d8       	rcall	.-3702   	; 0x94 <usart_read_chars>
			uint32_t flashAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     f0a:	40 e1       	ldi	r20, 0x10	; 16
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	82 e7       	ldi	r24, 0x72	; 114
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	2a d2       	rcall	.+1108   	; 0x136c <strtol>
     f18:	4b 01       	movw	r8, r22
     f1a:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for byte
     f1c:	9e d8       	rcall	.-3780   	; 0x5a <USART_Receive>
     f1e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <receivedChar>
			if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
     f22:	8e 36       	cpi	r24, 0x6E	; 110
     f24:	09 f0       	breq	.+2      	; 0xf28 <main+0x77c>
     f26:	4c cc       	rjmp	.-1896   	; 0x7c0 <main+0x14>
				usart_read_chars(); // Read data
     f28:	b5 d8       	rcall	.-3734   	; 0x94 <usart_read_chars>
				uint16_t flashByte = strtol(receivedBuffer, NULL, 16); // Convert data byte in hex to dec
     f2a:	40 e1       	ldi	r20, 0x10	; 16
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	82 e7       	ldi	r24, 0x72	; 114
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	1a d2       	rcall	.+1076   	; 0x136c <strtol>
				
				PORTD |= (1<<ACTIVITY_LED);
     f38:	93 9a       	sbi	0x12, 3	; 18
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
     f3a:	c4 bb       	out	0x14, r28	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
     f3c:	ca bb       	out	0x1a, r28	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
     f3e:	c7 bb       	out	0x17, r28	; 23
				gba_flash_write_bus_cycle(flashAddress, flashByte);
     f40:	ab 01       	movw	r20, r22
     f42:	c5 01       	movw	r24, r10
     f44:	b4 01       	movw	r22, r8
     f46:	64 db       	rcall	.-2360   	; 0x610 <gba_flash_write_bus_cycle>
				PORTD &= ~(1<<ACTIVITY_LED);
     f48:	93 98       	cbi	0x12, 3	; 18
				
				USART_Transmit(SEND_ACK); // Send back acknowledgement
     f4a:	81 e3       	ldi	r24, 0x31	; 49
     f4c:	f0 c1       	rjmp	.+992    	; 0x132e <main+0xb82>
			}
		}
		
		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
     f4e:	81 37       	cpi	r24, 0x71	; 113
     f50:	11 f0       	breq	.+4      	; 0xf56 <main+0x7aa>
     f52:	84 37       	cpi	r24, 0x74	; 116
     f54:	c9 f5       	brne	.+114    	; 0xfc8 <main+0x81c>
			PORTD |= (1<<ACTIVITY_LED);
     f56:	93 9a       	sbi	0x12, 3	; 18
			
			int readLength = 64;
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
     f58:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <receivedChar>
     f5c:	84 37       	cpi	r24, 0x74	; 116
     f5e:	19 f4       	brne	.+6      	; 0xf66 <main+0x7ba>
				readLength = 256;
     f60:	00 e0       	ldi	r16, 0x00	; 0
     f62:	11 e0       	ldi	r17, 0x01	; 1
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <main+0x7be>
		
		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
			PORTD |= (1<<ACTIVITY_LED);
			
			int readLength = 64;
     f66:	00 e4       	ldi	r16, 0x40	; 64
     f68:	10 e0       	ldi	r17, 0x00	; 0
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
				readLength = 256;
			}
			usart_read_bytes(readLength);
     f6a:	c8 01       	movw	r24, r16
     f6c:	7e d8       	rcall	.-3844   	; 0x6a <usart_read_bytes>
     f6e:	72 e7       	ldi	r23, 0x72	; 114
     f70:	a7 2e       	mov	r10, r23
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	b7 2e       	mov	r11, r23
     f76:	26 01       	movw	r4, r12
     f78:	37 01       	movw	r6, r14
			
			for (int x = 0; x < readLength; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_byte(address, combinedBytes, D0D1_SWAPPED);
     f7a:	f5 01       	movw	r30, r10
     f7c:	41 81       	ldd	r20, Z+1	; 0x01
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	54 2f       	mov	r21, r20
     f82:	44 27       	eor	r20, r20
     f84:	80 81       	ld	r24, Z
     f86:	48 2b       	or	r20, r24
     f88:	21 e0       	ldi	r18, 0x01	; 1
     f8a:	c3 01       	movw	r24, r6
     f8c:	b2 01       	movw	r22, r4
     f8e:	b6 db       	rcall	.-2196   	; 0x6fc <gba_flash_write_byte>
				address++;
     f90:	ff ef       	ldi	r31, 0xFF	; 255
     f92:	4f 1a       	sub	r4, r31
     f94:	5f 0a       	sbc	r5, r31
     f96:	6f 0a       	sbc	r6, r31
     f98:	7f 0a       	sbc	r7, r31
     f9a:	22 e0       	ldi	r18, 0x02	; 2
     f9c:	a2 0e       	add	r10, r18
     f9e:	b1 1c       	adc	r11, r1
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
				readLength = 256;
			}
			usart_read_bytes(readLength);
			
			for (int x = 0; x < readLength; x += 2) {
     fa0:	c5 01       	movw	r24, r10
     fa2:	82 57       	subi	r24, 0x72	; 114
     fa4:	90 40       	sbci	r25, 0x00	; 0
     fa6:	80 17       	cp	r24, r16
     fa8:	91 07       	cpc	r25, r17
     faa:	3c f3       	brlt	.-50     	; 0xf7a <main+0x7ce>
     fac:	8f ef       	ldi	r24, 0xFF	; 255
     fae:	c8 1a       	sub	r12, r24
     fb0:	d8 0a       	sbc	r13, r24
     fb2:	e8 0a       	sbc	r14, r24
     fb4:	f8 0a       	sbc	r15, r24
     fb6:	01 50       	subi	r16, 0x01	; 1
     fb8:	11 09       	sbc	r17, r1
     fba:	16 95       	lsr	r17
     fbc:	07 95       	ror	r16
     fbe:	c0 0e       	add	r12, r16
     fc0:	d1 1e       	adc	r13, r17
     fc2:	e1 1c       	adc	r14, r1
     fc4:	f1 1c       	adc	r15, r1
     fc6:	d7 c0       	rjmp	.+430    	; 0x1176 <main+0x9ca>
			
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Write 256 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_256BYTE) {
     fc8:	86 36       	cpi	r24, 0x66	; 102
     fca:	21 f5       	brne	.+72     	; 0x1014 <main+0x868>
			PORTD |= (1<<ACTIVITY_LED);
     fcc:	93 9a       	sbi	0x12, 3	; 18
			
			int readLength = 256;
			usart_read_bytes(readLength);
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	4b d8       	rcall	.-3946   	; 0x6a <usart_read_bytes>
     fd4:	02 e7       	ldi	r16, 0x72	; 114
     fd6:	10 e0       	ldi	r17, 0x00	; 0
     fd8:	46 01       	movw	r8, r12
     fda:	57 01       	movw	r10, r14
			
			for (int x = 0; x < readLength; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_byte(address, combinedBytes, D0D1_NOT_SWAPPED);
     fdc:	f8 01       	movw	r30, r16
     fde:	41 81       	ldd	r20, Z+1	; 0x01
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	54 2f       	mov	r21, r20
     fe4:	44 27       	eor	r20, r20
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2b       	or	r20, r24
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	c5 01       	movw	r24, r10
     fee:	b4 01       	movw	r22, r8
     ff0:	85 db       	rcall	.-2294   	; 0x6fc <gba_flash_write_byte>
				address++;
     ff2:	ff ef       	ldi	r31, 0xFF	; 255
     ff4:	8f 1a       	sub	r8, r31
     ff6:	9f 0a       	sbc	r9, r31
     ff8:	af 0a       	sbc	r10, r31
     ffa:	bf 0a       	sbc	r11, r31
     ffc:	0e 5f       	subi	r16, 0xFE	; 254
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
			PORTD |= (1<<ACTIVITY_LED);
			
			int readLength = 256;
			usart_read_bytes(readLength);
			
			for (int x = 0; x < readLength; x += 2) {
    1000:	21 e0       	ldi	r18, 0x01	; 1
    1002:	02 37       	cpi	r16, 0x72	; 114
    1004:	12 07       	cpc	r17, r18
    1006:	51 f7       	brne	.-44     	; 0xfdc <main+0x830>
    1008:	80 e8       	ldi	r24, 0x80	; 128
    100a:	c8 0e       	add	r12, r24
    100c:	d1 1c       	adc	r13, r1
    100e:	e1 1c       	adc	r14, r1
    1010:	f1 1c       	adc	r15, r1
    1012:	b1 c0       	rjmp	.+354    	; 0x1176 <main+0x9ca>
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Intel flash command based chips
		// Write 64 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE) {
    1014:	8c 36       	cpi	r24, 0x6C	; 108
    1016:	09 f0       	breq	.+2      	; 0x101a <main+0x86e>
    1018:	70 c0       	rjmp	.+224    	; 0x10fa <main+0x94e>
			PORTD |= (1<<ACTIVITY_LED);
    101a:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(64);
    101c:	80 e4       	ldi	r24, 0x40	; 64
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	24 d8       	rcall	.-4024   	; 0x6a <usart_read_bytes>
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    1022:	c4 bb       	out	0x14, r28	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1024:	ca bb       	out	0x1a, r28	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1026:	c7 bb       	out	0x17, r28	; 23
			
			// Unlock
			gba_flash_write_bus_cycle(address, 0x60);
    1028:	40 e6       	ldi	r20, 0x60	; 96
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	c7 01       	movw	r24, r14
    102e:	b6 01       	movw	r22, r12
    1030:	ef da       	rcall	.-2594   	; 0x610 <gba_flash_write_bus_cycle>
			gba_flash_write_bus_cycle(address, 0xD0);
    1032:	40 ed       	ldi	r20, 0xD0	; 208
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	c7 01       	movw	r24, r14
    1038:	b6 01       	movw	r22, r12
    103a:	ea da       	rcall	.-2604   	; 0x610 <gba_flash_write_bus_cycle>
			
			// Buffered write command
			gba_flash_write_bus_cycle(address, 0xE8);
    103c:	48 ee       	ldi	r20, 0xE8	; 232
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	c7 01       	movw	r24, r14
    1042:	b6 01       	movw	r22, r12
    1044:	e5 da       	rcall	.-2614   	; 0x610 <gba_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1046:	95 e8       	ldi	r25, 0x85	; 133
    1048:	9a 95       	dec	r25
    104a:	f1 f7       	brne	.-4      	; 0x1048 <main+0x89c>
    104c:	00 00       	nop
			_delay_us(50);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			uint16_t dataVerify = gba_read_16bit_data(address);
    104e:	c7 01       	movw	r24, r14
    1050:	b6 01       	movw	r22, r12
    1052:	78 d8       	rcall	.-3856   	; 0x144 <gba_read_16bit_data>
			while (dataVerify != 0x0080) {
    1054:	80 38       	cpi	r24, 0x80	; 128
    1056:	91 05       	cpc	r25, r1
    1058:	41 f0       	breq	.+16     	; 0x106a <main+0x8be>
				dataVerify = gba_read_16bit_data(address);
    105a:	c7 01       	movw	r24, r14
    105c:	b6 01       	movw	r22, r12
    105e:	72 d8       	rcall	.-3868   	; 0x144 <gba_read_16bit_data>
    1060:	e5 e8       	ldi	r30, 0x85	; 133
    1062:	ea 95       	dec	r30
    1064:	f1 f7       	brne	.-4      	; 0x1062 <main+0x8b6>
    1066:	00 00       	nop
    1068:	f5 cf       	rjmp	.-22     	; 0x1054 <main+0x8a8>
				_delay_us(50);
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    106a:	c4 bb       	out	0x14, r28	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    106c:	ca bb       	out	0x1a, r28	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    106e:	c7 bb       	out	0x17, r28	; 23
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
    1070:	4f e1       	ldi	r20, 0x1F	; 31
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	c7 01       	movw	r24, r14
    1076:	b6 01       	movw	r22, r12
    1078:	cb da       	rcall	.-2666   	; 0x610 <gba_flash_write_bus_cycle>
    107a:	02 e7       	ldi	r16, 0x72	; 114
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	46 01       	movw	r8, r12
    1080:	57 01       	movw	r10, r14
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_bus_cycle(address, combinedBytes);
    1082:	f8 01       	movw	r30, r16
    1084:	41 81       	ldd	r20, Z+1	; 0x01
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	54 2f       	mov	r21, r20
    108a:	44 27       	eor	r20, r20
    108c:	80 81       	ld	r24, Z
    108e:	48 2b       	or	r20, r24
    1090:	c5 01       	movw	r24, r10
    1092:	b4 01       	movw	r22, r8
    1094:	bd da       	rcall	.-2694   	; 0x610 <gba_flash_write_bus_cycle>
				address++;
    1096:	ff ef       	ldi	r31, 0xFF	; 255
    1098:	8f 1a       	sub	r8, r31
    109a:	9f 0a       	sbc	r9, r31
    109c:	af 0a       	sbc	r10, r31
    109e:	bf 0a       	sbc	r11, r31
    10a0:	0e 5f       	subi	r16, 0xFE	; 254
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	02 3b       	cpi	r16, 0xB2	; 178
    10a8:	12 07       	cpc	r17, r18
    10aa:	59 f7       	brne	.-42     	; 0x1082 <main+0x8d6>
    10ac:	80 e2       	ldi	r24, 0x20	; 32
    10ae:	c8 0e       	add	r12, r24
    10b0:	d1 1c       	adc	r13, r1
    10b2:	e1 1c       	adc	r14, r1
    10b4:	f1 1c       	adc	r15, r1
				gba_flash_write_bus_cycle(address, combinedBytes);
				address++;
			}
			
			// Write buffer to flash
			gba_flash_write_bus_cycle(address, 0xD0);
    10b6:	40 ed       	ldi	r20, 0xD0	; 208
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	c7 01       	movw	r24, r14
    10bc:	b6 01       	movw	r22, r12
    10be:	a8 da       	rcall	.-2736   	; 0x610 <gba_flash_write_bus_cycle>
    10c0:	ef e6       	ldi	r30, 0x6F	; 111
    10c2:	f3 e0       	ldi	r31, 0x03	; 3
    10c4:	31 97       	sbiw	r30, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <main+0x918>
    10c8:	00 c0       	rjmp	.+0      	; 0x10ca <main+0x91e>
    10ca:	00 00       	nop
			_delay_us(440);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			dataVerify = gba_read_16bit_data(address);
    10cc:	c7 01       	movw	r24, r14
    10ce:	b6 01       	movw	r22, r12
    10d0:	39 d8       	rcall	.-3982   	; 0x144 <gba_read_16bit_data>
			while (dataVerify != 0x0080) {
    10d2:	80 38       	cpi	r24, 0x80	; 128
    10d4:	91 05       	cpc	r25, r1
    10d6:	41 f0       	breq	.+16     	; 0x10e8 <main+0x93c>
				dataVerify = gba_read_16bit_data(address);
    10d8:	c7 01       	movw	r24, r14
    10da:	b6 01       	movw	r22, r12
    10dc:	33 d8       	rcall	.-3994   	; 0x144 <gba_read_16bit_data>
    10de:	f5 e8       	ldi	r31, 0x85	; 133
    10e0:	fa 95       	dec	r31
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <main+0x934>
    10e4:	00 00       	nop
    10e6:	f5 cf       	rjmp	.-22     	; 0x10d2 <main+0x926>
				_delay_us(50);
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    10e8:	c4 bb       	out	0x14, r28	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    10ea:	ca bb       	out	0x1a, r28	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    10ec:	c7 bb       	out	0x17, r28	; 23
			
			// Back to reading mode
			gba_flash_write_bus_cycle(address, 0xFF);
    10ee:	4f ef       	ldi	r20, 0xFF	; 255
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	c7 01       	movw	r24, r14
    10f4:	b6 01       	movw	r22, r12
    10f6:	8c da       	rcall	.-2792   	; 0x610 <gba_flash_write_bus_cycle>
    10f8:	3e c0       	rjmp	.+124    	; 0x1176 <main+0x9ca>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Intel word programming
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE_WORD) {
    10fa:	85 37       	cpi	r24, 0x75	; 117
    10fc:	f1 f5       	brne	.+124    	; 0x117a <main+0x9ce>
			PORTD |= (1<<ACTIVITY_LED);
    10fe:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(64);
    1100:	80 e4       	ldi	r24, 0x40	; 64
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	b2 d7       	rcall	.+3940   	; 0x206a <__TEXT_REGION_LENGTH__+0x6a>
    1106:	92 e7       	ldi	r25, 0x72	; 114
    1108:	a9 2e       	mov	r10, r25
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	b9 2e       	mov	r11, r25
    110e:	26 01       	movw	r4, r12
    1110:	37 01       	movw	r6, r14
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
				// Set address lines as outputs
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
    1112:	c4 bb       	out	0x14, r28	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1114:	ca bb       	out	0x1a, r28	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1116:	c7 bb       	out	0x17, r28	; 23
				
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
    1118:	f5 01       	movw	r30, r10
    111a:	01 81       	ldd	r16, Z+1	; 0x01
    111c:	10 e0       	ldi	r17, 0x00	; 0
    111e:	10 2f       	mov	r17, r16
    1120:	00 27       	eor	r16, r16
    1122:	80 81       	ld	r24, Z
    1124:	08 2b       	or	r16, r24
				gba_flash_write_bus_cycle(address, 0x40);
    1126:	40 e4       	ldi	r20, 0x40	; 64
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	c3 01       	movw	r24, r6
    112c:	b2 01       	movw	r22, r4
    112e:	70 da       	rcall	.-2848   	; 0x610 <gba_flash_write_bus_cycle>
				gba_flash_write_bus_cycle(address, combinedBytes);
    1130:	a8 01       	movw	r20, r16
    1132:	c3 01       	movw	r24, r6
    1134:	b2 01       	movw	r22, r4
    1136:	6c da       	rcall	.-2856   	; 0x610 <gba_flash_write_bus_cycle>
				
				// Verify status ok
				uint16_t status = gba_read_16bit_data(address);
    1138:	c3 01       	movw	r24, r6
    113a:	b2 01       	movw	r22, r4
    113c:	03 d8       	rcall	.-4090   	; 0x144 <gba_read_16bit_data>
				while ((status & 0x80) == 0) {
    113e:	87 fd       	sbrc	r24, 7
    1140:	08 c0       	rjmp	.+16     	; 0x1152 <main+0x9a6>
					status = gba_read_16bit_data(address);
    1142:	c3 01       	movw	r24, r6
    1144:	b2 01       	movw	r22, r4
    1146:	fe d7       	rcall	.+4092   	; 0x2144 <__TEXT_REGION_LENGTH__+0x144>
    1148:	f5 e0       	ldi	r31, 0x05	; 5
    114a:	fa 95       	dec	r31
    114c:	f1 f7       	brne	.-4      	; 0x114a <main+0x99e>
    114e:	00 00       	nop
    1150:	f6 cf       	rjmp	.-20     	; 0x113e <main+0x992>
					_delay_us(2);
				}
				address++;
    1152:	2f ef       	ldi	r18, 0xFF	; 255
    1154:	42 1a       	sub	r4, r18
    1156:	52 0a       	sbc	r5, r18
    1158:	62 0a       	sbc	r6, r18
    115a:	72 0a       	sbc	r7, r18
    115c:	82 e0       	ldi	r24, 0x02	; 2
    115e:	a8 0e       	add	r10, r24
    1160:	b1 1c       	adc	r11, r1
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE_WORD) {
			PORTD |= (1<<ACTIVITY_LED);
			usart_read_bytes(64);
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
    1162:	e2 eb       	ldi	r30, 0xB2	; 178
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	ea 15       	cp	r30, r10
    1168:	fb 05       	cpc	r31, r11
    116a:	99 f6       	brne	.-90     	; 0x1112 <main+0x966>
    116c:	f0 e2       	ldi	r31, 0x20	; 32
    116e:	cf 0e       	add	r12, r31
    1170:	d1 1c       	adc	r13, r1
    1172:	e1 1c       	adc	r14, r1
    1174:	f1 1c       	adc	r15, r1
					_delay_us(2);
				}
				address++;
			}
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
    1176:	81 e3       	ldi	r24, 0x31	; 49
    1178:	c3 c0       	rjmp	.+390    	; 0x1300 <main+0xb54>
		
		
		// ---------- General commands ----------
		// Set any pin as input/output
		// Reads the DDR/PORT (e.g. DDRB/PORTB is 'B') and the hex value that represents pins to set to an input (e.g. PB7 is 0x80)
		else if (receivedChar == SET_INPUT || receivedChar == SET_OUTPUT) {
    117a:	89 34       	cpi	r24, 0x49	; 73
    117c:	19 f0       	breq	.+6      	; 0x1184 <main+0x9d8>
    117e:	8f 34       	cpi	r24, 0x4F	; 79
    1180:	09 f0       	breq	.+2      	; 0x1184 <main+0x9d8>
    1182:	50 c0       	rjmp	.+160    	; 0x1224 <main+0xa78>
			char portChar = USART_Receive();
    1184:	6a d7       	rcall	.+3796   	; 0x205a <__TEXT_REGION_LENGTH__+0x5a>
    1186:	18 2f       	mov	r17, r24
			usart_read_chars();
    1188:	85 d7       	rcall	.+3850   	; 0x2094 <__TEXT_REGION_LENGTH__+0x94>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
    118a:	40 e1       	ldi	r20, 0x10	; 16
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	82 e7       	ldi	r24, 0x72	; 114
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	ea d0       	rcall	.+468    	; 0x136c <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
    1198:	93 9a       	sbi	0x12, 3	; 18
			if (receivedChar == SET_INPUT) {
    119a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <receivedChar>
    119e:	89 34       	cpi	r24, 0x49	; 73
    11a0:	f9 f4       	brne	.+62     	; 0x11e0 <main+0xa34>
				if (portChar == 'A') {
    11a2:	11 34       	cpi	r17, 0x41	; 65
    11a4:	21 f4       	brne	.+8      	; 0x11ae <main+0xa02>
					DDRA &= ~(setValue);
    11a6:	8a b3       	in	r24, 0x1a	; 26
    11a8:	60 95       	com	r22
    11aa:	68 23       	and	r22, r24
    11ac:	20 c0       	rjmp	.+64     	; 0x11ee <main+0xa42>
				}
				else if (portChar == 'B') {
    11ae:	12 34       	cpi	r17, 0x42	; 66
    11b0:	21 f4       	brne	.+8      	; 0x11ba <main+0xa0e>
					DDRB &= ~(setValue);
    11b2:	87 b3       	in	r24, 0x17	; 23
    11b4:	60 95       	com	r22
    11b6:	68 23       	and	r22, r24
    11b8:	20 c0       	rjmp	.+64     	; 0x11fa <main+0xa4e>
				}
				else if (portChar == 'C') {
    11ba:	13 34       	cpi	r17, 0x43	; 67
    11bc:	21 f4       	brne	.+8      	; 0x11c6 <main+0xa1a>
					DDRC &= ~(setValue);
    11be:	84 b3       	in	r24, 0x14	; 20
    11c0:	60 95       	com	r22
    11c2:	68 23       	and	r22, r24
    11c4:	20 c0       	rjmp	.+64     	; 0x1206 <main+0xa5a>
				}
				else if (portChar == 'D') {
    11c6:	14 34       	cpi	r17, 0x44	; 68
    11c8:	21 f4       	brne	.+8      	; 0x11d2 <main+0xa26>
					DDRD &= ~(setValue);
    11ca:	81 b3       	in	r24, 0x11	; 17
    11cc:	60 95       	com	r22
    11ce:	68 23       	and	r22, r24
    11d0:	20 c0       	rjmp	.+64     	; 0x1212 <main+0xa66>
				}
				else if (portChar == 'E') {
    11d2:	15 34       	cpi	r17, 0x45	; 69
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <main+0xa2c>
    11d6:	95 c0       	rjmp	.+298    	; 0x1302 <main+0xb56>
					DDRE &= ~(setValue);
    11d8:	86 b1       	in	r24, 0x06	; 6
    11da:	60 95       	com	r22
    11dc:	68 23       	and	r22, r24
    11de:	20 c0       	rjmp	.+64     	; 0x1220 <main+0xa74>
				}
			}
			else if (receivedChar == SET_OUTPUT) {
    11e0:	8f 34       	cpi	r24, 0x4F	; 79
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <main+0xa3a>
    11e4:	8e c0       	rjmp	.+284    	; 0x1302 <main+0xb56>
				if (portChar == 'A') {
    11e6:	11 34       	cpi	r17, 0x41	; 65
    11e8:	21 f4       	brne	.+8      	; 0x11f2 <main+0xa46>
					DDRA |= (setValue);
    11ea:	8a b3       	in	r24, 0x1a	; 26
    11ec:	68 2b       	or	r22, r24
    11ee:	6a bb       	out	0x1a, r22	; 26
    11f0:	88 c0       	rjmp	.+272    	; 0x1302 <main+0xb56>
				}
				else if (portChar == 'B') {
    11f2:	12 34       	cpi	r17, 0x42	; 66
    11f4:	21 f4       	brne	.+8      	; 0x11fe <main+0xa52>
					DDRB |= (setValue);
    11f6:	87 b3       	in	r24, 0x17	; 23
    11f8:	68 2b       	or	r22, r24
    11fa:	67 bb       	out	0x17, r22	; 23
    11fc:	82 c0       	rjmp	.+260    	; 0x1302 <main+0xb56>
				}
				else if (portChar == 'C') {
    11fe:	13 34       	cpi	r17, 0x43	; 67
    1200:	21 f4       	brne	.+8      	; 0x120a <main+0xa5e>
					DDRC |= (setValue);
    1202:	84 b3       	in	r24, 0x14	; 20
    1204:	68 2b       	or	r22, r24
    1206:	64 bb       	out	0x14, r22	; 20
    1208:	7c c0       	rjmp	.+248    	; 0x1302 <main+0xb56>
				}
				else if (portChar == 'D') {
    120a:	14 34       	cpi	r17, 0x44	; 68
    120c:	21 f4       	brne	.+8      	; 0x1216 <main+0xa6a>
					DDRD |= (setValue);
    120e:	81 b3       	in	r24, 0x11	; 17
    1210:	68 2b       	or	r22, r24
    1212:	61 bb       	out	0x11, r22	; 17
    1214:	76 c0       	rjmp	.+236    	; 0x1302 <main+0xb56>
				}
				else if (portChar == 'E') {
    1216:	15 34       	cpi	r17, 0x45	; 69
    1218:	09 f0       	breq	.+2      	; 0x121c <main+0xa70>
    121a:	73 c0       	rjmp	.+230    	; 0x1302 <main+0xb56>
					DDRE |= (setValue);
    121c:	86 b1       	in	r24, 0x06	; 6
    121e:	68 2b       	or	r22, r24
    1220:	66 b9       	out	0x06, r22	; 6
    1222:	6f c0       	rjmp	.+222    	; 0x1302 <main+0xb56>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as low
		else if (receivedChar == SET_OUTPUT_LOW) {
    1224:	8c 34       	cpi	r24, 0x4C	; 76
    1226:	51 f5       	brne	.+84     	; 0x127c <main+0xad0>
			char portChar = USART_Receive();			
    1228:	18 d7       	rcall	.+3632   	; 0x205a <__TEXT_REGION_LENGTH__+0x5a>
    122a:	18 2f       	mov	r17, r24
			usart_read_chars();
    122c:	33 d7       	rcall	.+3686   	; 0x2094 <__TEXT_REGION_LENGTH__+0x94>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
    122e:	40 e1       	ldi	r20, 0x10	; 16
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	82 e7       	ldi	r24, 0x72	; 114
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	98 d0       	rcall	.+304    	; 0x136c <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
    123c:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
    123e:	11 34       	cpi	r17, 0x41	; 65
    1240:	21 f4       	brne	.+8      	; 0x124a <main+0xa9e>
				PORTA &= ~(setValue);
    1242:	8b b3       	in	r24, 0x1b	; 27
    1244:	60 95       	com	r22
    1246:	68 23       	and	r22, r24
    1248:	2a c0       	rjmp	.+84     	; 0x129e <main+0xaf2>
			}
			else if (portChar == 'B') {
    124a:	12 34       	cpi	r17, 0x42	; 66
    124c:	21 f4       	brne	.+8      	; 0x1256 <main+0xaaa>
				PORTB &= ~(setValue);
    124e:	88 b3       	in	r24, 0x18	; 24
    1250:	60 95       	com	r22
    1252:	68 23       	and	r22, r24
    1254:	2a c0       	rjmp	.+84     	; 0x12aa <main+0xafe>
			}
			else if (portChar == 'C') {
    1256:	13 34       	cpi	r17, 0x43	; 67
    1258:	21 f4       	brne	.+8      	; 0x1262 <main+0xab6>
				PORTC &= ~(setValue);
    125a:	85 b3       	in	r24, 0x15	; 21
    125c:	60 95       	com	r22
    125e:	68 23       	and	r22, r24
    1260:	2a c0       	rjmp	.+84     	; 0x12b6 <main+0xb0a>
			}
			else if (portChar == 'D') {
    1262:	14 34       	cpi	r17, 0x44	; 68
    1264:	21 f4       	brne	.+8      	; 0x126e <main+0xac2>
				PORTD &= ~(setValue);
    1266:	82 b3       	in	r24, 0x12	; 18
    1268:	60 95       	com	r22
    126a:	68 23       	and	r22, r24
    126c:	2a c0       	rjmp	.+84     	; 0x12c2 <main+0xb16>
			}
			else if (portChar == 'E') {
    126e:	15 34       	cpi	r17, 0x45	; 69
    1270:	09 f0       	breq	.+2      	; 0x1274 <main+0xac8>
    1272:	47 c0       	rjmp	.+142    	; 0x1302 <main+0xb56>
				PORTE &= ~(setValue);
    1274:	87 b1       	in	r24, 0x07	; 7
    1276:	60 95       	com	r22
    1278:	68 23       	and	r22, r24
    127a:	29 c0       	rjmp	.+82     	; 0x12ce <main+0xb22>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as high
		else if (receivedChar == SET_OUTPUT_HIGH) {
    127c:	88 34       	cpi	r24, 0x48	; 72
    127e:	49 f5       	brne	.+82     	; 0x12d2 <main+0xb26>
			char portChar = USART_Receive();			
    1280:	ec d6       	rcall	.+3544   	; 0x205a <__TEXT_REGION_LENGTH__+0x5a>
    1282:	18 2f       	mov	r17, r24
			usart_read_chars();
    1284:	07 d7       	rcall	.+3598   	; 0x2094 <__TEXT_REGION_LENGTH__+0x94>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
    1286:	40 e1       	ldi	r20, 0x10	; 16
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	82 e7       	ldi	r24, 0x72	; 114
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	6c d0       	rcall	.+216    	; 0x136c <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
    1294:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
    1296:	11 34       	cpi	r17, 0x41	; 65
    1298:	21 f4       	brne	.+8      	; 0x12a2 <main+0xaf6>
				PORTA |= (setValue);
    129a:	8b b3       	in	r24, 0x1b	; 27
    129c:	68 2b       	or	r22, r24
    129e:	6b bb       	out	0x1b, r22	; 27
    12a0:	30 c0       	rjmp	.+96     	; 0x1302 <main+0xb56>
			}
			else if (portChar == 'B') {
    12a2:	12 34       	cpi	r17, 0x42	; 66
    12a4:	21 f4       	brne	.+8      	; 0x12ae <main+0xb02>
				PORTB |= (setValue);
    12a6:	88 b3       	in	r24, 0x18	; 24
    12a8:	68 2b       	or	r22, r24
    12aa:	68 bb       	out	0x18, r22	; 24
    12ac:	2a c0       	rjmp	.+84     	; 0x1302 <main+0xb56>
			}
			else if (portChar == 'C') {
    12ae:	13 34       	cpi	r17, 0x43	; 67
    12b0:	21 f4       	brne	.+8      	; 0x12ba <main+0xb0e>
				PORTC |= (setValue);
    12b2:	85 b3       	in	r24, 0x15	; 21
    12b4:	68 2b       	or	r22, r24
    12b6:	65 bb       	out	0x15, r22	; 21
    12b8:	24 c0       	rjmp	.+72     	; 0x1302 <main+0xb56>
			}
			else if (portChar == 'D') {
    12ba:	14 34       	cpi	r17, 0x44	; 68
    12bc:	21 f4       	brne	.+8      	; 0x12c6 <main+0xb1a>
				PORTD |= (setValue);
    12be:	82 b3       	in	r24, 0x12	; 18
    12c0:	68 2b       	or	r22, r24
    12c2:	62 bb       	out	0x12, r22	; 18
    12c4:	1e c0       	rjmp	.+60     	; 0x1302 <main+0xb56>
			}
			else if (portChar == 'E') {
    12c6:	15 34       	cpi	r17, 0x45	; 69
    12c8:	e1 f4       	brne	.+56     	; 0x1302 <main+0xb56>
				PORTE |= (setValue);
    12ca:	87 b1       	in	r24, 0x07	; 7
    12cc:	68 2b       	or	r22, r24
    12ce:	67 b9       	out	0x07, r22	; 7
    12d0:	18 c0       	rjmp	.+48     	; 0x1302 <main+0xb56>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Read all pins of a PORT and return the value
		else if (receivedChar == READ_INPUT) {
    12d2:	84 34       	cpi	r24, 0x44	; 68
    12d4:	c1 f4       	brne	.+48     	; 0x1306 <main+0xb5a>
			char portChar = USART_Receive();			
    12d6:	c1 d6       	rcall	.+3458   	; 0x205a <__TEXT_REGION_LENGTH__+0x5a>
			
			PORTD |= (1<<ACTIVITY_LED);
    12d8:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
    12da:	81 34       	cpi	r24, 0x41	; 65
    12dc:	11 f4       	brne	.+4      	; 0x12e2 <main+0xb36>
				USART_Transmit(PINA);
    12de:	89 b3       	in	r24, 0x19	; 25
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <main+0xb54>
			}
			else if (portChar == 'B') {
    12e2:	82 34       	cpi	r24, 0x42	; 66
    12e4:	11 f4       	brne	.+4      	; 0x12ea <main+0xb3e>
				USART_Transmit(PINB);
    12e6:	86 b3       	in	r24, 0x16	; 22
    12e8:	0b c0       	rjmp	.+22     	; 0x1300 <main+0xb54>
			}
			else if (portChar == 'C') {
    12ea:	83 34       	cpi	r24, 0x43	; 67
    12ec:	11 f4       	brne	.+4      	; 0x12f2 <main+0xb46>
				USART_Transmit(PINC);
    12ee:	83 b3       	in	r24, 0x13	; 19
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <main+0xb54>
			}
			else if (portChar == 'D') {
    12f2:	84 34       	cpi	r24, 0x44	; 68
    12f4:	11 f4       	brne	.+4      	; 0x12fa <main+0xb4e>
				USART_Transmit(PIND);
    12f6:	80 b3       	in	r24, 0x10	; 16
    12f8:	03 c0       	rjmp	.+6      	; 0x1300 <main+0xb54>
			}
			else if (portChar == 'E') {
    12fa:	85 34       	cpi	r24, 0x45	; 69
    12fc:	11 f4       	brne	.+4      	; 0x1302 <main+0xb56>
				USART_Transmit(PINE);
    12fe:	85 b1       	in	r24, 0x05	; 5
    1300:	b0 d6       	rcall	.+3424   	; 0x2062 <__TEXT_REGION_LENGTH__+0x62>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
    1302:	93 98       	cbi	0x12, 3	; 18
    1304:	5d ca       	rjmp	.-2886   	; 0x7c0 <main+0x14>
		}
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
    1306:	8d 34       	cpi	r24, 0x4D	; 77
    1308:	59 f4       	brne	.+22     	; 0x1320 <main+0xb74>
			char commonChar = USART_Receive();
    130a:	a7 d6       	rcall	.+3406   	; 0x205a <__TEXT_REGION_LENGTH__+0x5a>
			if (commonChar == '1') {
    130c:	81 33       	cpi	r24, 0x31	; 49
    130e:	19 f4       	brne	.+6      	; 0x1316 <main+0xb6a>
				resetCommonLines = 1;
    1310:	22 24       	eor	r2, r2
    1312:	23 94       	inc	r2
    1314:	58 ca       	rjmp	.-2896   	; 0x7c6 <main+0x1a>
			}
			else if (commonChar == '0') {
    1316:	80 33       	cpi	r24, 0x30	; 48
    1318:	09 f0       	breq	.+2      	; 0x131c <main+0xb70>
    131a:	52 ca       	rjmp	.-2908   	; 0x7c0 <main+0x14>
				resetCommonLines = 0;
    131c:	21 2c       	mov	r2, r1
    131e:	54 ca       	rjmp	.-2904   	; 0x7c8 <main+0x1c>
			}
		}
		
		// Send back the PCB version number
		else if (receivedChar == READ_PCB_VERSION) {
    1320:	88 36       	cpi	r24, 0x68	; 104
    1322:	11 f4       	brne	.+4      	; 0x1328 <main+0xb7c>
			USART_Transmit(PCB_VERSION);
    1324:	84 e0       	ldi	r24, 0x04	; 4
    1326:	03 c0       	rjmp	.+6      	; 0x132e <main+0xb82>
		}
		
		// Send back the firmware version number
		else if (receivedChar == READ_FIRMWARE_VERSION) {
    1328:	86 35       	cpi	r24, 0x56	; 86
    132a:	19 f4       	brne	.+6      	; 0x1332 <main+0xb86>
			USART_Transmit(FIRMWARE_VERSION);
    132c:	80 e1       	ldi	r24, 0x10	; 16
    132e:	99 d6       	rcall	.+3378   	; 0x2062 <__TEXT_REGION_LENGTH__+0x62>
    1330:	47 ca       	rjmp	.-2930   	; 0x7c0 <main+0x14>
		}
		
		// Reset the AVR if it matches the number
		else if (receivedChar == RESET_AVR) {
    1332:	8a 32       	cpi	r24, 0x2A	; 42
    1334:	09 f0       	breq	.+2      	; 0x1338 <main+0xb8c>
    1336:	44 ca       	rjmp	.-2936   	; 0x7c0 <main+0x14>
			usart_read_chars();
    1338:	ad d6       	rcall	.+3418   	; 0x2094 <__TEXT_REGION_LENGTH__+0x94>
			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
    133a:	40 e1       	ldi	r20, 0x10	; 16
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	82 e7       	ldi	r24, 0x72	; 114
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	12 d0       	rcall	.+36     	; 0x136c <strtol>
			if (resetValue == RESET_VALUE) {
    1348:	61 3e       	cpi	r22, 0xE1	; 225
    134a:	75 4e       	sbci	r23, 0xE5	; 229
    134c:	87 40       	sbci	r24, 0x07	; 7
    134e:	91 05       	cpc	r25, r1
    1350:	09 f0       	breq	.+2      	; 0x1354 <main+0xba8>
    1352:	36 ca       	rjmp	.-2964   	; 0x7c0 <main+0x14>
				// Clear watchdog flag
				MCUCSR &= ~(1<<WDRF);
    1354:	84 b7       	in	r24, 0x34	; 52
    1356:	87 7f       	andi	r24, 0xF7	; 247
    1358:	84 bf       	out	0x34, r24	; 52
				
				// Start timed sequence
				WDTCR = (1<<WDCE) | (1<<WDE);
    135a:	88 e1       	ldi	r24, 0x18	; 24
    135c:	81 bd       	out	0x21, r24	; 33
				
				// Reset in 250 ms
				WDTCR = (1<<WDP2) | (1<<WDE);
    135e:	9c e0       	ldi	r25, 0x0C	; 12
    1360:	91 bd       	out	0x21, r25	; 33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1362:	8f ef       	ldi	r24, 0xFF	; 255
    1364:	9f ef       	ldi	r25, 0xFF	; 255
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <main+0xbba>
    136a:	2a ca       	rjmp	.-2988   	; 0x7c0 <main+0x14>

0000136c <strtol>:
    136c:	a0 e0       	ldi	r26, 0x00	; 0
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	eb eb       	ldi	r30, 0xBB	; 187
    1372:	f9 e0       	ldi	r31, 0x09	; 9
    1374:	78 c1       	rjmp	.+752    	; 0x1666 <__prologue_saves__+0x2>
    1376:	5c 01       	movw	r10, r24
    1378:	6b 01       	movw	r12, r22
    137a:	7a 01       	movw	r14, r20
    137c:	61 15       	cp	r22, r1
    137e:	71 05       	cpc	r23, r1
    1380:	19 f0       	breq	.+6      	; 0x1388 <strtol+0x1c>
    1382:	fb 01       	movw	r30, r22
    1384:	91 83       	std	Z+1, r25	; 0x01
    1386:	80 83       	st	Z, r24
    1388:	e1 14       	cp	r14, r1
    138a:	f1 04       	cpc	r15, r1
    138c:	29 f0       	breq	.+10     	; 0x1398 <strtol+0x2c>
    138e:	c7 01       	movw	r24, r14
    1390:	02 97       	sbiw	r24, 0x02	; 2
    1392:	83 97       	sbiw	r24, 0x23	; 35
    1394:	08 f0       	brcs	.+2      	; 0x1398 <strtol+0x2c>
    1396:	e2 c0       	rjmp	.+452    	; 0x155c <strtol+0x1f0>
    1398:	e5 01       	movw	r28, r10
    139a:	21 96       	adiw	r28, 0x01	; 1
    139c:	f5 01       	movw	r30, r10
    139e:	10 81       	ld	r17, Z
    13a0:	81 2f       	mov	r24, r17
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	11 d1       	rcall	.+546    	; 0x15c8 <isspace>
    13a6:	89 2b       	or	r24, r25
    13a8:	11 f0       	breq	.+4      	; 0x13ae <strtol+0x42>
    13aa:	5e 01       	movw	r10, r28
    13ac:	f5 cf       	rjmp	.-22     	; 0x1398 <strtol+0x2c>
    13ae:	1d 32       	cpi	r17, 0x2D	; 45
    13b0:	29 f4       	brne	.+10     	; 0x13bc <strtol+0x50>
    13b2:	21 96       	adiw	r28, 0x01	; 1
    13b4:	f5 01       	movw	r30, r10
    13b6:	11 81       	ldd	r17, Z+1	; 0x01
    13b8:	01 e0       	ldi	r16, 0x01	; 1
    13ba:	07 c0       	rjmp	.+14     	; 0x13ca <strtol+0x5e>
    13bc:	1b 32       	cpi	r17, 0x2B	; 43
    13be:	21 f4       	brne	.+8      	; 0x13c8 <strtol+0x5c>
    13c0:	e5 01       	movw	r28, r10
    13c2:	22 96       	adiw	r28, 0x02	; 2
    13c4:	f5 01       	movw	r30, r10
    13c6:	11 81       	ldd	r17, Z+1	; 0x01
    13c8:	00 e0       	ldi	r16, 0x00	; 0
    13ca:	e1 14       	cp	r14, r1
    13cc:	f1 04       	cpc	r15, r1
    13ce:	09 f1       	breq	.+66     	; 0x1412 <strtol+0xa6>
    13d0:	f0 e1       	ldi	r31, 0x10	; 16
    13d2:	ef 16       	cp	r14, r31
    13d4:	f1 04       	cpc	r15, r1
    13d6:	29 f4       	brne	.+10     	; 0x13e2 <strtol+0x76>
    13d8:	3e c0       	rjmp	.+124    	; 0x1456 <strtol+0xea>
    13da:	10 e3       	ldi	r17, 0x30	; 48
    13dc:	e1 14       	cp	r14, r1
    13de:	f1 04       	cpc	r15, r1
    13e0:	21 f1       	breq	.+72     	; 0x142a <strtol+0xbe>
    13e2:	28 e0       	ldi	r18, 0x08	; 8
    13e4:	e2 16       	cp	r14, r18
    13e6:	f1 04       	cpc	r15, r1
    13e8:	01 f1       	breq	.+64     	; 0x142a <strtol+0xbe>
    13ea:	54 f4       	brge	.+20     	; 0x1400 <strtol+0x94>
    13ec:	e2 e0       	ldi	r30, 0x02	; 2
    13ee:	ee 16       	cp	r14, r30
    13f0:	f1 04       	cpc	r15, r1
    13f2:	21 f5       	brne	.+72     	; 0x143c <strtol+0xd0>
    13f4:	81 2c       	mov	r8, r1
    13f6:	91 2c       	mov	r9, r1
    13f8:	a1 2c       	mov	r10, r1
    13fa:	b0 e4       	ldi	r27, 0x40	; 64
    13fc:	bb 2e       	mov	r11, r27
    13fe:	3d c0       	rjmp	.+122    	; 0x147a <strtol+0x10e>
    1400:	fa e0       	ldi	r31, 0x0A	; 10
    1402:	ef 16       	cp	r14, r31
    1404:	f1 04       	cpc	r15, r1
    1406:	39 f0       	breq	.+14     	; 0x1416 <strtol+0xaa>
    1408:	20 e1       	ldi	r18, 0x10	; 16
    140a:	e2 16       	cp	r14, r18
    140c:	f1 04       	cpc	r15, r1
    140e:	b1 f4       	brne	.+44     	; 0x143c <strtol+0xd0>
    1410:	2f c0       	rjmp	.+94     	; 0x1470 <strtol+0x104>
    1412:	10 33       	cpi	r17, 0x30	; 48
    1414:	11 f1       	breq	.+68     	; 0x145a <strtol+0xee>
    1416:	fa e0       	ldi	r31, 0x0A	; 10
    1418:	ef 2e       	mov	r14, r31
    141a:	f1 2c       	mov	r15, r1
    141c:	ac ec       	ldi	r26, 0xCC	; 204
    141e:	8a 2e       	mov	r8, r26
    1420:	98 2c       	mov	r9, r8
    1422:	a8 2c       	mov	r10, r8
    1424:	ac e0       	ldi	r26, 0x0C	; 12
    1426:	ba 2e       	mov	r11, r26
    1428:	28 c0       	rjmp	.+80     	; 0x147a <strtol+0x10e>
    142a:	78 e0       	ldi	r23, 0x08	; 8
    142c:	e7 2e       	mov	r14, r23
    142e:	f1 2c       	mov	r15, r1
    1430:	81 2c       	mov	r8, r1
    1432:	91 2c       	mov	r9, r1
    1434:	a1 2c       	mov	r10, r1
    1436:	e0 e1       	ldi	r30, 0x10	; 16
    1438:	be 2e       	mov	r11, r30
    143a:	1f c0       	rjmp	.+62     	; 0x147a <strtol+0x10e>
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e8       	ldi	r25, 0x80	; 128
    1444:	97 01       	movw	r18, r14
    1446:	0f 2c       	mov	r0, r15
    1448:	00 0c       	add	r0, r0
    144a:	44 0b       	sbc	r20, r20
    144c:	55 0b       	sbc	r21, r21
    144e:	de d0       	rcall	.+444    	; 0x160c <__udivmodsi4>
    1450:	49 01       	movw	r8, r18
    1452:	5a 01       	movw	r10, r20
    1454:	12 c0       	rjmp	.+36     	; 0x147a <strtol+0x10e>
    1456:	10 33       	cpi	r17, 0x30	; 48
    1458:	59 f4       	brne	.+22     	; 0x1470 <strtol+0x104>
    145a:	88 81       	ld	r24, Y
    145c:	8f 7d       	andi	r24, 0xDF	; 223
    145e:	88 35       	cpi	r24, 0x58	; 88
    1460:	09 f0       	breq	.+2      	; 0x1464 <strtol+0xf8>
    1462:	bb cf       	rjmp	.-138    	; 0x13da <strtol+0x6e>
    1464:	19 81       	ldd	r17, Y+1	; 0x01
    1466:	22 96       	adiw	r28, 0x02	; 2
    1468:	02 60       	ori	r16, 0x02	; 2
    146a:	80 e1       	ldi	r24, 0x10	; 16
    146c:	e8 2e       	mov	r14, r24
    146e:	f1 2c       	mov	r15, r1
    1470:	81 2c       	mov	r8, r1
    1472:	91 2c       	mov	r9, r1
    1474:	a1 2c       	mov	r10, r1
    1476:	68 e0       	ldi	r22, 0x08	; 8
    1478:	b6 2e       	mov	r11, r22
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	cb 01       	movw	r24, r22
    1482:	27 01       	movw	r4, r14
    1484:	0f 2c       	mov	r0, r15
    1486:	00 0c       	add	r0, r0
    1488:	66 08       	sbc	r6, r6
    148a:	77 08       	sbc	r7, r7
    148c:	fe 01       	movw	r30, r28
    148e:	50 ed       	ldi	r21, 0xD0	; 208
    1490:	35 2e       	mov	r3, r21
    1492:	31 0e       	add	r3, r17
    1494:	29 e0       	ldi	r18, 0x09	; 9
    1496:	23 15       	cp	r18, r3
    1498:	70 f4       	brcc	.+28     	; 0x14b6 <strtol+0x14a>
    149a:	2f eb       	ldi	r18, 0xBF	; 191
    149c:	21 0f       	add	r18, r17
    149e:	2a 31       	cpi	r18, 0x1A	; 26
    14a0:	18 f4       	brcc	.+6      	; 0x14a8 <strtol+0x13c>
    14a2:	39 ec       	ldi	r19, 0xC9	; 201
    14a4:	33 2e       	mov	r3, r19
    14a6:	06 c0       	rjmp	.+12     	; 0x14b4 <strtol+0x148>
    14a8:	2f e9       	ldi	r18, 0x9F	; 159
    14aa:	21 0f       	add	r18, r17
    14ac:	2a 31       	cpi	r18, 0x1A	; 26
    14ae:	10 f5       	brcc	.+68     	; 0x14f4 <strtol+0x188>
    14b0:	29 ea       	ldi	r18, 0xA9	; 169
    14b2:	32 2e       	mov	r3, r18
    14b4:	31 0e       	add	r3, r17
    14b6:	23 2d       	mov	r18, r3
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	2e 15       	cp	r18, r14
    14bc:	3f 05       	cpc	r19, r15
    14be:	d4 f4       	brge	.+52     	; 0x14f4 <strtol+0x188>
    14c0:	47 fd       	sbrc	r20, 7
    14c2:	15 c0       	rjmp	.+42     	; 0x14ee <strtol+0x182>
    14c4:	86 16       	cp	r8, r22
    14c6:	97 06       	cpc	r9, r23
    14c8:	a8 06       	cpc	r10, r24
    14ca:	b9 06       	cpc	r11, r25
    14cc:	68 f0       	brcs	.+26     	; 0x14e8 <strtol+0x17c>
    14ce:	a3 01       	movw	r20, r6
    14d0:	92 01       	movw	r18, r4
    14d2:	8d d0       	rcall	.+282    	; 0x15ee <__mulsi3>
    14d4:	63 0d       	add	r22, r3
    14d6:	71 1d       	adc	r23, r1
    14d8:	81 1d       	adc	r24, r1
    14da:	91 1d       	adc	r25, r1
    14dc:	61 30       	cpi	r22, 0x01	; 1
    14de:	71 05       	cpc	r23, r1
    14e0:	81 05       	cpc	r24, r1
    14e2:	20 e8       	ldi	r18, 0x80	; 128
    14e4:	92 07       	cpc	r25, r18
    14e6:	10 f0       	brcs	.+4      	; 0x14ec <strtol+0x180>
    14e8:	4f ef       	ldi	r20, 0xFF	; 255
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <strtol+0x182>
    14ec:	41 e0       	ldi	r20, 0x01	; 1
    14ee:	21 96       	adiw	r28, 0x01	; 1
    14f0:	10 81       	ld	r17, Z
    14f2:	cc cf       	rjmp	.-104    	; 0x148c <strtol+0x120>
    14f4:	20 2f       	mov	r18, r16
    14f6:	21 70       	andi	r18, 0x01	; 1
    14f8:	c1 14       	cp	r12, r1
    14fa:	d1 04       	cpc	r13, r1
    14fc:	71 f0       	breq	.+28     	; 0x151a <strtol+0x1ae>
    14fe:	44 23       	and	r20, r20
    1500:	29 f0       	breq	.+10     	; 0x150c <strtol+0x1a0>
    1502:	21 97       	sbiw	r28, 0x01	; 1
    1504:	f6 01       	movw	r30, r12
    1506:	d1 83       	std	Z+1, r29	; 0x01
    1508:	c0 83       	st	Z, r28
    150a:	07 c0       	rjmp	.+14     	; 0x151a <strtol+0x1ae>
    150c:	01 ff       	sbrs	r16, 1
    150e:	19 c0       	rjmp	.+50     	; 0x1542 <strtol+0x1d6>
    1510:	22 97       	sbiw	r28, 0x02	; 2
    1512:	f6 01       	movw	r30, r12
    1514:	d1 83       	std	Z+1, r29	; 0x01
    1516:	c0 83       	st	Z, r28
    1518:	14 c0       	rjmp	.+40     	; 0x1542 <strtol+0x1d6>
    151a:	47 ff       	sbrs	r20, 7
    151c:	12 c0       	rjmp	.+36     	; 0x1542 <strtol+0x1d6>
    151e:	22 23       	and	r18, r18
    1520:	29 f0       	breq	.+10     	; 0x152c <strtol+0x1c0>
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e8       	ldi	r25, 0x80	; 128
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <strtol+0x1c8>
    152c:	6f ef       	ldi	r22, 0xFF	; 255
    152e:	7f ef       	ldi	r23, 0xFF	; 255
    1530:	8f ef       	ldi	r24, 0xFF	; 255
    1532:	9f e7       	ldi	r25, 0x7F	; 127
    1534:	22 e2       	ldi	r18, 0x22	; 34
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <errno+0x1>
    153c:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <errno>
    1540:	09 c0       	rjmp	.+18     	; 0x1554 <strtol+0x1e8>
    1542:	22 23       	and	r18, r18
    1544:	81 f0       	breq	.+32     	; 0x1566 <strtol+0x1fa>
    1546:	90 95       	com	r25
    1548:	80 95       	com	r24
    154a:	70 95       	com	r23
    154c:	61 95       	neg	r22
    154e:	7f 4f       	sbci	r23, 0xFF	; 255
    1550:	8f 4f       	sbci	r24, 0xFF	; 255
    1552:	9f 4f       	sbci	r25, 0xFF	; 255
    1554:	46 2f       	mov	r20, r22
    1556:	37 2f       	mov	r19, r23
    1558:	28 2f       	mov	r18, r24
    155a:	12 c0       	rjmp	.+36     	; 0x1580 <strtol+0x214>
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0d c0       	rjmp	.+26     	; 0x1580 <strtol+0x214>
    1566:	97 ff       	sbrs	r25, 7
    1568:	f5 cf       	rjmp	.-22     	; 0x1554 <strtol+0x1e8>
    156a:	82 e2       	ldi	r24, 0x22	; 34
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <errno+0x1>
    1572:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <errno>
    1576:	6f ef       	ldi	r22, 0xFF	; 255
    1578:	7f ef       	ldi	r23, 0xFF	; 255
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	9f e7       	ldi	r25, 0x7F	; 127
    157e:	ea cf       	rjmp	.-44     	; 0x1554 <strtol+0x1e8>
    1580:	64 2f       	mov	r22, r20
    1582:	73 2f       	mov	r23, r19
    1584:	82 2f       	mov	r24, r18
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	e1 e1       	ldi	r30, 0x11	; 17
    158c:	88 c0       	rjmp	.+272    	; 0x169e <__epilogue_restores__+0x2>

0000158e <atoi>:
    158e:	fc 01       	movw	r30, r24
    1590:	88 27       	eor	r24, r24
    1592:	99 27       	eor	r25, r25
    1594:	e8 94       	clt
    1596:	21 91       	ld	r18, Z+
    1598:	20 32       	cpi	r18, 0x20	; 32
    159a:	e9 f3       	breq	.-6      	; 0x1596 <atoi+0x8>
    159c:	29 30       	cpi	r18, 0x09	; 9
    159e:	10 f0       	brcs	.+4      	; 0x15a4 <atoi+0x16>
    15a0:	2e 30       	cpi	r18, 0x0E	; 14
    15a2:	c8 f3       	brcs	.-14     	; 0x1596 <atoi+0x8>
    15a4:	2b 32       	cpi	r18, 0x2B	; 43
    15a6:	39 f0       	breq	.+14     	; 0x15b6 <atoi+0x28>
    15a8:	2d 32       	cpi	r18, 0x2D	; 45
    15aa:	31 f4       	brne	.+12     	; 0x15b8 <atoi+0x2a>
    15ac:	68 94       	set
    15ae:	03 c0       	rjmp	.+6      	; 0x15b6 <atoi+0x28>
    15b0:	13 d0       	rcall	.+38     	; 0x15d8 <__mulhi_const_10>
    15b2:	82 0f       	add	r24, r18
    15b4:	91 1d       	adc	r25, r1
    15b6:	21 91       	ld	r18, Z+
    15b8:	20 53       	subi	r18, 0x30	; 48
    15ba:	2a 30       	cpi	r18, 0x0A	; 10
    15bc:	c8 f3       	brcs	.-14     	; 0x15b0 <atoi+0x22>
    15be:	1e f4       	brtc	.+6      	; 0x15c6 <atoi+0x38>
    15c0:	90 95       	com	r25
    15c2:	81 95       	neg	r24
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	08 95       	ret

000015c8 <isspace>:
    15c8:	91 11       	cpse	r25, r1
    15ca:	0e c0       	rjmp	.+28     	; 0x15e8 <__ctype_isfalse>
    15cc:	80 32       	cpi	r24, 0x20	; 32
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <isspace+0xe>
    15d0:	89 50       	subi	r24, 0x09	; 9
    15d2:	85 50       	subi	r24, 0x05	; 5
    15d4:	d0 f7       	brcc	.-12     	; 0x15ca <isspace+0x2>
    15d6:	08 95       	ret

000015d8 <__mulhi_const_10>:
    15d8:	7a e0       	ldi	r23, 0x0A	; 10
    15da:	97 9f       	mul	r25, r23
    15dc:	90 2d       	mov	r25, r0
    15de:	87 9f       	mul	r24, r23
    15e0:	80 2d       	mov	r24, r0
    15e2:	91 0d       	add	r25, r1
    15e4:	11 24       	eor	r1, r1
    15e6:	08 95       	ret

000015e8 <__ctype_isfalse>:
    15e8:	99 27       	eor	r25, r25
    15ea:	88 27       	eor	r24, r24

000015ec <__ctype_istrue>:
    15ec:	08 95       	ret

000015ee <__mulsi3>:
    15ee:	db 01       	movw	r26, r22
    15f0:	8f 93       	push	r24
    15f2:	9f 93       	push	r25
    15f4:	2d d0       	rcall	.+90     	; 0x1650 <__muluhisi3>
    15f6:	bf 91       	pop	r27
    15f8:	af 91       	pop	r26
    15fa:	a2 9f       	mul	r26, r18
    15fc:	80 0d       	add	r24, r0
    15fe:	91 1d       	adc	r25, r1
    1600:	a3 9f       	mul	r26, r19
    1602:	90 0d       	add	r25, r0
    1604:	b2 9f       	mul	r27, r18
    1606:	90 0d       	add	r25, r0
    1608:	11 24       	eor	r1, r1
    160a:	08 95       	ret

0000160c <__udivmodsi4>:
    160c:	a1 e2       	ldi	r26, 0x21	; 33
    160e:	1a 2e       	mov	r1, r26
    1610:	aa 1b       	sub	r26, r26
    1612:	bb 1b       	sub	r27, r27
    1614:	fd 01       	movw	r30, r26
    1616:	0d c0       	rjmp	.+26     	; 0x1632 <__udivmodsi4_ep>

00001618 <__udivmodsi4_loop>:
    1618:	aa 1f       	adc	r26, r26
    161a:	bb 1f       	adc	r27, r27
    161c:	ee 1f       	adc	r30, r30
    161e:	ff 1f       	adc	r31, r31
    1620:	a2 17       	cp	r26, r18
    1622:	b3 07       	cpc	r27, r19
    1624:	e4 07       	cpc	r30, r20
    1626:	f5 07       	cpc	r31, r21
    1628:	20 f0       	brcs	.+8      	; 0x1632 <__udivmodsi4_ep>
    162a:	a2 1b       	sub	r26, r18
    162c:	b3 0b       	sbc	r27, r19
    162e:	e4 0b       	sbc	r30, r20
    1630:	f5 0b       	sbc	r31, r21

00001632 <__udivmodsi4_ep>:
    1632:	66 1f       	adc	r22, r22
    1634:	77 1f       	adc	r23, r23
    1636:	88 1f       	adc	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	1a 94       	dec	r1
    163c:	69 f7       	brne	.-38     	; 0x1618 <__udivmodsi4_loop>
    163e:	60 95       	com	r22
    1640:	70 95       	com	r23
    1642:	80 95       	com	r24
    1644:	90 95       	com	r25
    1646:	9b 01       	movw	r18, r22
    1648:	ac 01       	movw	r20, r24
    164a:	bd 01       	movw	r22, r26
    164c:	cf 01       	movw	r24, r30
    164e:	08 95       	ret

00001650 <__muluhisi3>:
    1650:	40 d0       	rcall	.+128    	; 0x16d2 <__umulhisi3>
    1652:	a5 9f       	mul	r26, r21
    1654:	90 0d       	add	r25, r0
    1656:	b4 9f       	mul	r27, r20
    1658:	90 0d       	add	r25, r0
    165a:	a4 9f       	mul	r26, r20
    165c:	80 0d       	add	r24, r0
    165e:	91 1d       	adc	r25, r1
    1660:	11 24       	eor	r1, r1
    1662:	08 95       	ret

00001664 <__prologue_saves__>:
    1664:	2f 92       	push	r2
    1666:	3f 92       	push	r3
    1668:	4f 92       	push	r4
    166a:	5f 92       	push	r5
    166c:	6f 92       	push	r6
    166e:	7f 92       	push	r7
    1670:	8f 92       	push	r8
    1672:	9f 92       	push	r9
    1674:	af 92       	push	r10
    1676:	bf 92       	push	r11
    1678:	cf 92       	push	r12
    167a:	df 92       	push	r13
    167c:	ef 92       	push	r14
    167e:	ff 92       	push	r15
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	ca 1b       	sub	r28, r26
    168e:	db 0b       	sbc	r29, r27
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	09 94       	ijmp

0000169c <__epilogue_restores__>:
    169c:	2a 88       	ldd	r2, Y+18	; 0x12
    169e:	39 88       	ldd	r3, Y+17	; 0x11
    16a0:	48 88       	ldd	r4, Y+16	; 0x10
    16a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    16a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    16a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    16a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    16aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    16ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    16ae:	b9 84       	ldd	r11, Y+9	; 0x09
    16b0:	c8 84       	ldd	r12, Y+8	; 0x08
    16b2:	df 80       	ldd	r13, Y+7	; 0x07
    16b4:	ee 80       	ldd	r14, Y+6	; 0x06
    16b6:	fd 80       	ldd	r15, Y+5	; 0x05
    16b8:	0c 81       	ldd	r16, Y+4	; 0x04
    16ba:	1b 81       	ldd	r17, Y+3	; 0x03
    16bc:	aa 81       	ldd	r26, Y+2	; 0x02
    16be:	b9 81       	ldd	r27, Y+1	; 0x01
    16c0:	ce 0f       	add	r28, r30
    16c2:	d1 1d       	adc	r29, r1
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	ed 01       	movw	r28, r26
    16d0:	08 95       	ret

000016d2 <__umulhisi3>:
    16d2:	a2 9f       	mul	r26, r18
    16d4:	b0 01       	movw	r22, r0
    16d6:	b3 9f       	mul	r27, r19
    16d8:	c0 01       	movw	r24, r0
    16da:	a3 9f       	mul	r26, r19
    16dc:	01 d0       	rcall	.+2      	; 0x16e0 <__umulhisi3+0xe>
    16de:	b2 9f       	mul	r27, r18
    16e0:	70 0d       	add	r23, r0
    16e2:	81 1d       	adc	r24, r1
    16e4:	11 24       	eor	r1, r1
    16e6:	91 1d       	adc	r25, r1
    16e8:	08 95       	ret

000016ea <_exit>:
    16ea:	f8 94       	cli

000016ec <__stop_program>:
    16ec:	ff cf       	rjmp	.-2      	; 0x16ec <__stop_program>
