
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000015b0  00001644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011c  00800062  00800062  00001646  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001646  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ee0  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ed  00000000  00000000  000045ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016be  00000000  00000000  00004cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00006398  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067a  00000000  00000000  000066d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fc6  00000000  00000000  00006d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00008d18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
       2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
       4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
       6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
       8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
       a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
       c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
       e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
      10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
      12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
      14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
      16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
      18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
      1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
      1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
      1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
      20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf e5       	ldi	r28, 0x5F	; 95
      28:	d2 e0       	ldi	r29, 0x02	; 2
      2a:	de bf       	out	0x3e, r29	; 62
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
      2e:	10 e0       	ldi	r17, 0x00	; 0
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	e0 eb       	ldi	r30, 0xB0	; 176
      36:	f5 e1       	ldi	r31, 0x15	; 21
      38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
      3a:	05 90       	lpm	r0, Z+
      3c:	0d 92       	st	X+, r0
      3e:	a2 36       	cpi	r26, 0x62	; 98
      40:	b1 07       	cpc	r27, r17
      42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
      44:	21 e0       	ldi	r18, 0x01	; 1
      46:	a2 e6       	ldi	r26, 0x62	; 98
      48:	b0 e0       	ldi	r27, 0x00	; 0
      4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
      4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
      4e:	ae 37       	cpi	r26, 0x7E	; 126
      50:	b2 07       	cpc	r27, r18
      52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
      54:	6a d3       	rcall	.+1748   	; 0x72a <main>
      56:	aa ca       	rjmp	.-2732   	; 0xfffff5ac <__eeprom_end+0xff7ef5ac>

00000058 <__bad_interrupt>:
      58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <USART_Receive>:

uint8_t cartMode = GBA_MODE;

// Receive USART data
uint8_t USART_Receive(void) {
	while ( !(UCSRA & (1<<RXC)) ); // Wait for data to be received
      5a:	5f 9b       	sbis	0x0b, 7	; 11
      5c:	fe cf       	rjmp	.-4      	; 0x5a <USART_Receive>
	return UDR; // Get and return received data from buffer
      5e:	8c b1       	in	r24, 0x0c	; 12
}
      60:	08 95       	ret

00000062 <USART_Transmit>:

// Transmit USART data
void USART_Transmit(unsigned char data) {
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer
      62:	5d 9b       	sbis	0x0b, 5	; 11
      64:	fe cf       	rjmp	.-4      	; 0x62 <USART_Transmit>
	UDR = data;
      66:	8c b9       	out	0x0c, r24	; 12
      68:	08 95       	ret

0000006a <usart_read_bytes>:
}

// Read 1-256 bytes from the USART 
void usart_read_bytes(int count) {
      6a:	0f 93       	push	r16
      6c:	1f 93       	push	r17
      6e:	cf 93       	push	r28
      70:	df 93       	push	r29
      72:	8c 01       	movw	r16, r24
	for (int x = 0; x < count; x++) {
      74:	c2 e7       	ldi	r28, 0x72	; 114
      76:	d0 e0       	ldi	r29, 0x00	; 0
      78:	ce 01       	movw	r24, r28
      7a:	82 57       	subi	r24, 0x72	; 114
      7c:	90 40       	sbci	r25, 0x00	; 0
      7e:	80 17       	cp	r24, r16
      80:	91 07       	cpc	r25, r17
      82:	1c f4       	brge	.+6      	; 0x8a <usart_read_bytes+0x20>
		receivedBuffer[x] = USART_Receive();
      84:	ea df       	rcall	.-44     	; 0x5a <USART_Receive>
      86:	89 93       	st	Y+, r24
      88:	f7 cf       	rjmp	.-18     	; 0x78 <usart_read_bytes+0xe>
	}
}
      8a:	df 91       	pop	r29
      8c:	cf 91       	pop	r28
      8e:	1f 91       	pop	r17
      90:	0f 91       	pop	r16
      92:	08 95       	ret

00000094 <usart_read_chars>:

// Read the USART until a 0 (string terminator byte) is received
void usart_read_chars(void) {
      94:	cf 93       	push	r28
      96:	df 93       	push	r29
      98:	c2 e7       	ldi	r28, 0x72	; 114
      9a:	d0 e0       	ldi	r29, 0x00	; 0
	int x = 0;
	while (1) {
		receivedBuffer[x] = USART_Receive();
      9c:	de df       	rcall	.-68     	; 0x5a <USART_Receive>
      9e:	89 93       	st	Y+, r24
		if (receivedBuffer[x] == 0) {
      a0:	81 11       	cpse	r24, r1
      a2:	fc cf       	rjmp	.-8      	; 0x9c <usart_read_chars+0x8>
			break;
		}
		x++;
	}
}
      a4:	df 91       	pop	r29
      a6:	cf 91       	pop	r28
      a8:	08 95       	ret

000000aa <rd_wr_csmreq_cs2_reset>:

// Turn RD, WR, CS/MREQ and CS2 to high so they are deselected (reset state)
void rd_wr_csmreq_cs2_reset(void) {
	cs2Pin_high; // CS2 off
      aa:	3a 9a       	sbi	0x07, 2	; 7
	cs_mreqPin_high; // CS/MREQ off
      ac:	94 9a       	sbi	0x12, 4	; 18
	rdPin_high; // RD off
      ae:	95 9a       	sbi	0x12, 5	; 18
	wrPin_high; // WR off
      b0:	96 9a       	sbi	0x12, 6	; 18
      b2:	08 95       	ret

000000b4 <gb_mode>:
// ****** Gameboy / Gameboy Colour functions ******

// Set Gameboy mode
void gb_mode(void) {
	// Set inputs
	PORT_DATA7_0 = 0;
      b4:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
      b6:	14 ba       	out	0x14, r1	; 20
	
	// Set outputs
	PORT_ADDR7_0 = 0;
      b8:	18 ba       	out	0x18, r1	; 24
	PORT_ADDR15_8 = 0;
      ba:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR7_0 = 0xFF;
      bc:	8f ef       	ldi	r24, 0xFF	; 255
      be:	87 bb       	out	0x17, r24	; 23
	DDR_ADDR15_8 = 0xFF;
      c0:	8a bb       	out	0x1a, r24	; 26
      c2:	08 95       	ret

000000c4 <set_16bit_address>:
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
      c4:	9b bb       	out	0x1b, r25	; 27
	PORT_ADDR7_0 = (address & 0xFF);
      c6:	88 bb       	out	0x18, r24	; 24
      c8:	08 95       	ret

000000ca <read_8bit_data>:
}

// Set the address and read a byte from the 8 bit data line
uint8_t read_8bit_data(uint16_t address) {
	set_16bit_address(address);
      ca:	fc df       	rcall	.-8      	; 0xc4 <set_16bit_address>
	
	cs_mreqPin_low;
      cc:	94 98       	cbi	0x12, 4	; 18
	rdPin_low;
      ce:	95 98       	cbi	0x12, 5	; 18
	
	asm volatile("nop"); // Delay a little (minimum needed is 1 nops, 2 nops for GB camera)
      d0:	00 00       	nop
	asm volatile("nop");
      d2:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
      d4:	83 b3       	in	r24, 0x13	; 19
	
	rdPin_high;
      d6:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
      d8:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
}
      da:	08 95       	ret

000000dc <write_8bit_data>:

// Set the address and write a byte to the 8 bit data line and pulse cs/mREQ if writing to RAM
void write_8bit_data(uint16_t address, uint8_t data, uint8_t type) {
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	d6 2f       	mov	r29, r22
      e2:	c4 2f       	mov	r28, r20
	set_16bit_address(address);
      e4:	ef df       	rcall	.-34     	; 0xc4 <set_16bit_address>
	
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
      e6:	8f ef       	ldi	r24, 0xFF	; 255
      e8:	84 bb       	out	0x14, r24	; 20
	PORT_DATA7_0 = data; // Set data
      ea:	d5 bb       	out	0x15, r29	; 21
	
	// Pulse WR and mREQ if the type matches
	wrPin_low;
      ec:	96 98       	cbi	0x12, 6	; 18
	if (type == MEMORY_WRITE) {
      ee:	c1 30       	cpi	r28, 0x01	; 1
      f0:	09 f4       	brne	.+2      	; 0xf4 <write_8bit_data+0x18>
		cs_mreqPin_low;
      f2:	94 98       	cbi	0x12, 4	; 18
	}
	
	asm volatile("nop");
      f4:	00 00       	nop
	
	if (type == MEMORY_WRITE) {
      f6:	c1 30       	cpi	r28, 0x01	; 1
      f8:	09 f4       	brne	.+2      	; 0xfc <write_8bit_data+0x20>
		cs_mreqPin_high;
      fa:	94 9a       	sbi	0x12, 4	; 18
	}
	wrPin_high;
      fc:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
      fe:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     100:	14 ba       	out	0x14, r1	; 20
}
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <gba_mode>:
// ****** Gameboy Advance functions ****** 

// Set GBA mode
void gba_mode(void) {
	// Set outputs for reading ROM addresses as default
	GBA_PORT_ROM_ADDR7_0 = 0;
     108:	18 ba       	out	0x18, r1	; 24
	GBA_PORT_ROM_ADDR15_8 = 0;
     10a:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR23_16 = 0;
     10c:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     10e:	8f ef       	ldi	r24, 0xFF	; 255
     110:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     112:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     114:	84 bb       	out	0x14, r24	; 20
     116:	08 95       	ret

00000118 <gba_set_24bit_address>:
}

// Set the 24 bit address on A23-0
void gba_set_24bit_address(uint32_t address) {	
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = 0; // Set 0-23 address lines low and set as outputs
     11c:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0;
     11e:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
     120:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     122:	2f ef       	ldi	r18, 0xFF	; 255
     124:	24 bb       	out	0x14, r18	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     126:	2a bb       	out	0x1a, r18	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     128:	27 bb       	out	0x17, r18	; 23
	
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
     12a:	8c 01       	movw	r16, r24
     12c:	22 27       	eor	r18, r18
     12e:	33 27       	eor	r19, r19
     130:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
     132:	07 2f       	mov	r16, r23
     134:	18 2f       	mov	r17, r24
     136:	29 2f       	mov	r18, r25
     138:	33 27       	eor	r19, r19
     13a:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
     13c:	68 bb       	out	0x18, r22	; 24
}
     13e:	1f 91       	pop	r17
     140:	0f 91       	pop	r16
     142:	08 95       	ret

00000144 <gba_read_16bit_data>:

// ---------- ROM/SRAM ----------

// Read a byte from the 16 bit data line non-sequentially
uint16_t gba_read_16bit_data(uint32_t address) {
	gba_set_24bit_address(address);
     144:	e9 df       	rcall	.-46     	; 0x118 <gba_set_24bit_address>
	
	cs_mreqPin_low;
     146:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_ADDR15_8 = 0; // Set A16-A0 address lines low and set as inputs for the data to be read out
     148:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
     14a:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR15_8 = 0;
     14c:	1a ba       	out	0x1a, r1	; 26
	GBA_DDR_ROM_ADDR7_0 = 0;
     14e:	17 ba       	out	0x17, r1	; 23
	
	rdPin_low;
     150:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop");
     152:	00 00       	nop
	
	uint16_t data = (GBA_PIN_ROM_DATA15_8 << 8) | GBA_PIN_ROM_DATA7_0; // Read data
     154:	29 b3       	in	r18, 0x19	; 25
     156:	86 b3       	in	r24, 0x16	; 22
	
	rdPin_high;
     158:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
     15a:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
     15c:	90 e0       	ldi	r25, 0x00	; 0
}
     15e:	92 2b       	or	r25, r18
     160:	08 95       	ret

00000162 <gba_read_ram_8bit_data>:

// Set the address and read a byte from the 8 bit data line
uint8_t gba_read_ram_8bit_data(uint16_t address) {
	set_16bit_address(address);
     162:	b0 df       	rcall	.-160    	; 0xc4 <set_16bit_address>
	
	rdPin_low;
     164:	95 98       	cbi	0x12, 5	; 18
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
     166:	3a 98       	cbi	0x07, 2	; 7
	
	asm volatile("nop"); // Delay a little (minimum needed is 2)
     168:	00 00       	nop
	asm volatile("nop");
     16a:	00 00       	nop
	
	uint8_t data = GBA_PIN_RAM_DATA7_0; // Read data
     16c:	83 b3       	in	r24, 0x13	; 19
	
	cs2Pin_high;
     16e:	3a 9a       	sbi	0x07, 2	; 7
	rdPin_high;
     170:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
     172:	08 95       	ret

00000174 <gba_write_ram_8bit_data>:

// Set the address and write a byte to the 8 bit data line 
void gba_write_ram_8bit_data(uint16_t address, uint8_t data) {
     174:	cf 93       	push	r28
     176:	c6 2f       	mov	r28, r22
	set_16bit_address(address);
     178:	a5 df       	rcall	.-182    	; 0xc4 <set_16bit_address>
	
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
     17a:	8f ef       	ldi	r24, 0xFF	; 255
     17c:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_RAM_DATA7_0 = data; // Set data
     17e:	c5 bb       	out	0x15, r28	; 21
	
	// Pulse WR
	wrPin_low;
     180:	96 98       	cbi	0x12, 6	; 18
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
     182:	3a 98       	cbi	0x07, 2	; 7
	
	asm volatile("nop");
     184:	00 00       	nop
	asm volatile("nop");
     186:	00 00       	nop
	
	cs2Pin_high;
     188:	3a 9a       	sbi	0x07, 2	; 7
	wrPin_high;
     18a:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
     18c:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
     18e:	14 ba       	out	0x14, r1	; 20
}
     190:	cf 91       	pop	r28
     192:	08 95       	ret

00000194 <gba_eeprom_mode>:

// ---------- EEPROM ----------

// Set address/data all high (includes AD0/A23)
void gba_eeprom_mode (void) {
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     194:	8f ef       	ldi	r24, 0xFF	; 255
     196:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     198:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     19a:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_ROM_ADDR7_0 = 0x80;
     19c:	90 e8       	ldi	r25, 0x80	; 128
     19e:	98 bb       	out	0x18, r25	; 24
	GBA_PORT_ROM_ADDR15_8 = 0xFF;
     1a0:	8b bb       	out	0x1b, r24	; 27
	GBA_PORT_ROM_ADDR23_16 = 0xFF;
     1a2:	85 bb       	out	0x15, r24	; 21
     1a4:	08 95       	ret

000001a6 <gba_eeprom_set_address>:
}

// Send out EEPROM address serially (WR clock, AD0 data out)
void gba_eeprom_set_address(uint16_t address, uint8_t eepromSize, uint8_t command) {
	cs_mreqPin_low;
     1a6:	94 98       	cbi	0x12, 4	; 18
	
	int8_t x = 0;
	if (eepromSize == EEPROM_64KBIT) {
     1a8:	62 30       	cpi	r22, 0x02	; 2
     1aa:	49 f4       	brne	.+18     	; 0x1be <gba_eeprom_set_address+0x18>
		if (command == EEPROM_READ) {
     1ac:	41 11       	cpse	r20, r1
     1ae:	05 c0       	rjmp	.+10     	; 0x1ba <gba_eeprom_set_address+0x14>
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
     1b0:	90 6c       	ori	r25, 0xC0	; 192
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
		}
		x = 15;
     1b2:	2f e0       	ldi	r18, 0x0F	; 15
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
		if (address & (1<<x)) {
     1b4:	e1 e0       	ldi	r30, 0x01	; 1
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	13 c0       	rjmp	.+38     	; 0x1e0 <gba_eeprom_set_address+0x3a>
	if (eepromSize == EEPROM_64KBIT) {
		if (command == EEPROM_READ) {
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
     1ba:	90 68       	ori	r25, 0x80	; 128
     1bc:	fa cf       	rjmp	.-12     	; 0x1b2 <gba_eeprom_set_address+0xc>
		}
		x = 15;
	}
	else {
		if (command == EEPROM_READ) {
     1be:	41 11       	cpse	r20, r1
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <gba_eeprom_set_address+0x20>
			address |= (1<<7) | (1<<6);
     1c2:	80 6c       	ori	r24, 0xC0	; 192
     1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <gba_eeprom_set_address+0x22>
		}
		else {
			address |= (1<<7);
     1c6:	80 68       	ori	r24, 0x80	; 128
		}
		x = 7;
     1c8:	27 e0       	ldi	r18, 0x07	; 7
     1ca:	f4 cf       	rjmp	.-24     	; 0x1b4 <gba_eeprom_set_address+0xe>
	while (x >= 0) {
		if (address & (1<<x)) {
			ad0Pin_high;
		}
		else {
			ad0Pin_low;
     1cc:	c0 98       	cbi	0x18, 0	; 24
		}
		
		wrPin_low; // CLK
     1ce:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
     1d0:	00 00       	nop
		asm ("nop");
     1d2:	00 00       	nop
		wrPin_high; 
     1d4:	96 9a       	sbi	0x12, 6	; 18
		asm ("nop");
     1d6:	00 00       	nop
		asm ("nop");
     1d8:	00 00       	nop
     1da:	21 50       	subi	r18, 0x01	; 1
		}
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
     1dc:	27 fd       	sbrc	r18, 7
     1de:	0d c0       	rjmp	.+26     	; 0x1fa <gba_eeprom_set_address+0x54>
		if (address & (1<<x)) {
     1e0:	bf 01       	movw	r22, r30
     1e2:	02 2e       	mov	r0, r18
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <gba_eeprom_set_address+0x44>
     1e6:	66 0f       	add	r22, r22
     1e8:	77 1f       	adc	r23, r23
     1ea:	0a 94       	dec	r0
     1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <gba_eeprom_set_address+0x40>
     1ee:	68 23       	and	r22, r24
     1f0:	79 23       	and	r23, r25
     1f2:	67 2b       	or	r22, r23
     1f4:	59 f3       	breq	.-42     	; 0x1cc <gba_eeprom_set_address+0x26>
			ad0Pin_high;
     1f6:	c0 9a       	sbi	0x18, 0	; 24
     1f8:	ea cf       	rjmp	.-44     	; 0x1ce <gba_eeprom_set_address+0x28>
		
		x--;
	}
	
	// Only send stop bit (0) and WR/CS high if reading, as writing is done in 1 continuous chunk
	if (command == EEPROM_READ) {  
     1fa:	41 11       	cpse	r20, r1
     1fc:	07 c0       	rjmp	.+14     	; 0x20c <gba_eeprom_set_address+0x66>
		ad0Pin_low;
     1fe:	c0 98       	cbi	0x18, 0	; 24
		asm ("nop");
     200:	00 00       	nop
		wrPin_low;
     202:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
     204:	00 00       	nop
		asm ("nop");
     206:	00 00       	nop
		
		wrPin_high;
     208:	96 9a       	sbi	0x12, 6	; 18
		cs_mreqPin_high;
     20a:	94 9a       	sbi	0x12, 4	; 18
     20c:	08 95       	ret

0000020e <gba_eeprom_read>:
	}
}

// Read 8 bytes from the EEPROM address, data is valid on rising edge
void gba_eeprom_read(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_READ);
     20e:	40 e0       	ldi	r20, 0x00	; 0
     210:	ca df       	rcall	.-108    	; 0x1a6 <gba_eeprom_set_address>
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
     212:	c0 98       	cbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
     214:	b8 98       	cbi	0x17, 0	; 23
	
	cs_mreqPin_low;
     216:	94 98       	cbi	0x12, 4	; 18
     218:	84 e0       	ldi	r24, 0x04	; 4
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
		rdPin_low; // CLK
     21a:	95 98       	cbi	0x12, 5	; 18
		asm ("nop");
     21c:	00 00       	nop
		asm ("nop");
     21e:	00 00       	nop
		rdPin_high; 
     220:	95 9a       	sbi	0x12, 5	; 18
		asm ("nop");
     222:	00 00       	nop
		asm ("nop");
     224:	00 00       	nop
     226:	81 50       	subi	r24, 0x01	; 1
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
     228:	c1 f7       	brne	.-16     	; 0x21a <gba_eeprom_read+0xc>
     22a:	e3 e7       	ldi	r30, 0x73	; 115
     22c:	f1 e0       	ldi	r31, 0x01	; 1
			asm ("nop");
			asm ("nop");
			rdPin_high;
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
				data |= (1<<x);
     22e:	41 e0       	ldi	r20, 0x01	; 1
     230:	50 e0       	ldi	r21, 0x00	; 0
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
     232:	87 e0       	ldi	r24, 0x07	; 7
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	20 e0       	ldi	r18, 0x00	; 0
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		uint8_t data = 0;
		for (int8_t x = 7; x >= 0; x--) {
			rdPin_low; // CLK
     238:	95 98       	cbi	0x12, 5	; 18
			asm ("nop");
     23a:	00 00       	nop
			asm ("nop");
     23c:	00 00       	nop
			rdPin_high;
     23e:	95 9a       	sbi	0x12, 5	; 18
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
     240:	b0 9b       	sbis	0x16, 0	; 22
     242:	07 c0       	rjmp	.+14     	; 0x252 <gba_eeprom_read+0x44>
				data |= (1<<x);
     244:	ba 01       	movw	r22, r20
     246:	08 2e       	mov	r0, r24
     248:	01 c0       	rjmp	.+2      	; 0x24c <gba_eeprom_read+0x3e>
     24a:	66 0f       	add	r22, r22
     24c:	0a 94       	dec	r0
     24e:	ea f7       	brpl	.-6      	; 0x24a <gba_eeprom_read+0x3c>
     250:	26 2b       	or	r18, r22
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	88 f7       	brcc	.-30     	; 0x238 <gba_eeprom_read+0x2a>
			}
		}
		eepromBuffer[c] = data;
     256:	21 93       	st	Z+, r18
		asm ("nop");
		asm ("nop");
	}
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	eb 37       	cpi	r30, 0x7B	; 123
     25c:	f8 07       	cpc	r31, r24
     25e:	49 f7       	brne	.-46     	; 0x232 <gba_eeprom_read+0x24>
			}
		}
		eepromBuffer[c] = data;
	}
	
	cs_mreqPin_high;
     260:	94 9a       	sbi	0x12, 4	; 18
	
	// Set AD0 pin as output
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
     262:	c0 9a       	sbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
     264:	b8 9a       	sbi	0x17, 0	; 23
     266:	08 95       	ret

00000268 <gba_eeprom_write>:
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
     268:	41 e0       	ldi	r20, 0x01	; 1
     26a:	9d df       	rcall	.-198    	; 0x1a6 <gba_eeprom_set_address>
     26c:	e3 e7       	ldi	r30, 0x73	; 115
     26e:	f1 e0       	ldi	r31, 0x01	; 1
     270:	48 e0       	ldi	r20, 0x08	; 8
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
     272:	27 e0       	ldi	r18, 0x07	; 7
     274:	30 e0       	ldi	r19, 0x00	; 0
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		for (int8_t x = 7; x >= 0; x--) {
			if (eepromBuffer[c] & (1<<x)) {
     276:	80 81       	ld	r24, Z
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	02 2e       	mov	r0, r18
     27c:	02 c0       	rjmp	.+4      	; 0x282 <gba_eeprom_write+0x1a>
     27e:	95 95       	asr	r25
     280:	87 95       	ror	r24
     282:	0a 94       	dec	r0
     284:	e2 f7       	brpl	.-8      	; 0x27e <gba_eeprom_write+0x16>
     286:	80 ff       	sbrs	r24, 0
     288:	02 c0       	rjmp	.+4      	; 0x28e <gba_eeprom_write+0x26>
				ad0Pin_high;
     28a:	c0 9a       	sbi	0x18, 0	; 24
     28c:	01 c0       	rjmp	.+2      	; 0x290 <gba_eeprom_write+0x28>
			}
			else {
				ad0Pin_low;
     28e:	c0 98       	cbi	0x18, 0	; 24
			}
			
			wrPin_low; // CLK
     290:	96 98       	cbi	0x12, 6	; 18
			asm ("nop");
     292:	00 00       	nop
			asm ("nop");
     294:	00 00       	nop
			wrPin_high; 
     296:	96 9a       	sbi	0x12, 6	; 18
			asm ("nop");
     298:	00 00       	nop
			asm ("nop");
     29a:	00 00       	nop
     29c:	21 50       	subi	r18, 0x01	; 1
     29e:	31 09       	sbc	r19, r1
     2a0:	50 f7       	brcc	.-44     	; 0x276 <gba_eeprom_write+0xe>
     2a2:	41 50       	subi	r20, 0x01	; 1
     2a4:	31 96       	adiw	r30, 0x01	; 1
// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
     2a6:	41 11       	cpse	r20, r1
     2a8:	e4 cf       	rjmp	.-56     	; 0x272 <gba_eeprom_write+0xa>
			asm ("nop");
		}
	}
	
	// Last bit low
	ad0Pin_low;
     2aa:	c0 98       	cbi	0x18, 0	; 24
	wrPin_low; // CLK
     2ac:	96 98       	cbi	0x12, 6	; 18
	asm ("nop");
     2ae:	00 00       	nop
	asm ("nop");
     2b0:	00 00       	nop
	wrPin_high; 
     2b2:	96 9a       	sbi	0x12, 6	; 18
	asm ("nop");
     2b4:	00 00       	nop
	asm ("nop");
     2b6:	00 00       	nop
	
	cs_mreqPin_high;
     2b8:	94 9a       	sbi	0x12, 4	; 18
     2ba:	08 95       	ret

000002bc <flash_write_bus_cycle>:


// ---------- FLASH ----------

// Set the address and data for the write byte cycle to the flash
void flash_write_bus_cycle(uint16_t address, uint8_t data) {
     2bc:	cf 93       	push	r28
     2be:	c6 2f       	mov	r28, r22
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
     2c0:	2f ef       	ldi	r18, 0xFF	; 255
     2c2:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
     2c4:	ff de       	rcall	.-514    	; 0xc4 <set_16bit_address>
	GBA_PORT_RAM_DATA7_0 = data;
     2c6:	c5 bb       	out	0x15, r28	; 21
	
	wrPin_low;
     2c8:	96 98       	cbi	0x12, 6	; 18
	cs2Pin_low;
     2ca:	3a 98       	cbi	0x07, 2	; 7
	asm volatile("nop");
     2cc:	00 00       	nop
	wrPin_high;
     2ce:	96 9a       	sbi	0x12, 6	; 18
	cs2Pin_high;
     2d0:	3a 9a       	sbi	0x07, 2	; 7
}
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <flash_read_chip_id>:

// Read the flash manufacturer and device ID (Software ID)
void flash_read_chip_id(void) {
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
	flash_write_bus_cycle(0x5555, 0xAA);
     2da:	6a ea       	ldi	r22, 0xAA	; 170
     2dc:	85 e5       	ldi	r24, 0x55	; 85
     2de:	95 e5       	ldi	r25, 0x55	; 85
     2e0:	ed df       	rcall	.-38     	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     2e2:	65 e5       	ldi	r22, 0x55	; 85
     2e4:	8a ea       	ldi	r24, 0xAA	; 170
     2e6:	9a e2       	ldi	r25, 0x2A	; 42
     2e8:	e9 df       	rcall	.-46     	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x90); // Software ID entry
     2ea:	60 e9       	ldi	r22, 0x90	; 144
     2ec:	85 e5       	ldi	r24, 0x55	; 85
     2ee:	95 e5       	ldi	r25, 0x55	; 85
     2f0:	e5 df       	rcall	.-54     	; 0x2bc <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f2:	8f e3       	ldi	r24, 0x3F	; 63
     2f4:	9c e9       	ldi	r25, 0x9C	; 156
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <flash_read_chip_id+0x20>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <flash_read_chip_id+0x26>
     2fc:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
	
	// Set data as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
     2fe:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
     300:	14 ba       	out	0x14, r1	; 20
	
	// Read and transmit the 2 bytes
	flashChipIdBuffer[0] = gba_read_ram_8bit_data(0x0000);
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	2d df       	rcall	.-422    	; 0x162 <gba_read_ram_8bit_data>
     308:	c0 e7       	ldi	r28, 0x70	; 112
     30a:	d0 e0       	ldi	r29, 0x00	; 0
     30c:	88 83       	st	Y, r24
	flashChipIdBuffer[1] = gba_read_ram_8bit_data(0x0001);
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	27 df       	rcall	.-434    	; 0x162 <gba_read_ram_8bit_data>
     314:	89 83       	std	Y+1, r24	; 0x01
	
	flash_write_bus_cycle(0x5555, 0xAA);
     316:	6a ea       	ldi	r22, 0xAA	; 170
     318:	85 e5       	ldi	r24, 0x55	; 85
     31a:	95 e5       	ldi	r25, 0x55	; 85
     31c:	cf df       	rcall	.-98     	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     31e:	65 e5       	ldi	r22, 0x55	; 85
     320:	8a ea       	ldi	r24, 0xAA	; 170
     322:	9a e2       	ldi	r25, 0x2A	; 42
     324:	cb df       	rcall	.-106    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xF0); // Software ID exit
     326:	60 ef       	ldi	r22, 0xF0	; 240
     328:	85 e5       	ldi	r24, 0x55	; 85
     32a:	95 e5       	ldi	r25, 0x55	; 85
     32c:	c7 df       	rcall	.-114    	; 0x2bc <flash_write_bus_cycle>
     32e:	8f e3       	ldi	r24, 0x3F	; 63
     330:	9c e9       	ldi	r25, 0x9C	; 156
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	f1 f7       	brne	.-4      	; 0x332 <flash_read_chip_id+0x5c>
     336:	00 c0       	rjmp	.+0      	; 0x338 <flash_read_chip_id+0x62>
     338:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <flash_switch_bank>:

// Switch banks on the Flash
void flash_switch_bank(uint8_t bank) {
     340:	cf 93       	push	r28
     342:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     344:	6a ea       	ldi	r22, 0xAA	; 170
     346:	85 e5       	ldi	r24, 0x55	; 85
     348:	95 e5       	ldi	r25, 0x55	; 85
     34a:	b8 df       	rcall	.-144    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     34c:	65 e5       	ldi	r22, 0x55	; 85
     34e:	8a ea       	ldi	r24, 0xAA	; 170
     350:	9a e2       	ldi	r25, 0x2A	; 42
     352:	b4 df       	rcall	.-152    	; 0x2bc <flash_write_bus_cycle>
	
	flash_write_bus_cycle(0x5555, 0xB0);
     354:	60 eb       	ldi	r22, 0xB0	; 176
     356:	85 e5       	ldi	r24, 0x55	; 85
     358:	95 e5       	ldi	r25, 0x55	; 85
     35a:	b0 df       	rcall	.-160    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x0000, bank);
     35c:	6c 2f       	mov	r22, r28
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
}
     362:	cf 91       	pop	r28
void flash_switch_bank(uint8_t bank) {
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	
	flash_write_bus_cycle(0x5555, 0xB0);
	flash_write_bus_cycle(0x0000, bank);
     364:	ab cf       	rjmp	.-170    	; 0x2bc <flash_write_bus_cycle>

00000366 <flash_erase_4k_sector>:
}

// Erase 4K sector on Flash, expects first sector to start at 0, left shifts by 12 (A15-A12 to select sector for 512Kbit)
// Takes 25ms after last command to erase sector
void flash_erase_4k_sector(uint8_t sector) {
     366:	cf 93       	push	r28
     368:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     36a:	6a ea       	ldi	r22, 0xAA	; 170
     36c:	85 e5       	ldi	r24, 0x55	; 85
     36e:	95 e5       	ldi	r25, 0x55	; 85
     370:	a5 df       	rcall	.-182    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     372:	65 e5       	ldi	r22, 0x55	; 85
     374:	8a ea       	ldi	r24, 0xAA	; 170
     376:	9a e2       	ldi	r25, 0x2A	; 42
     378:	a1 df       	rcall	.-190    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x80);
     37a:	60 e8       	ldi	r22, 0x80	; 128
     37c:	85 e5       	ldi	r24, 0x55	; 85
     37e:	95 e5       	ldi	r25, 0x55	; 85
     380:	9d df       	rcall	.-198    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xAA);
     382:	6a ea       	ldi	r22, 0xAA	; 170
     384:	85 e5       	ldi	r24, 0x55	; 85
     386:	95 e5       	ldi	r25, 0x55	; 85
     388:	99 df       	rcall	.-206    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     38a:	65 e5       	ldi	r22, 0x55	; 85
     38c:	8a ea       	ldi	r24, 0xAA	; 170
     38e:	9a e2       	ldi	r25, 0x2A	; 42
     390:	95 df       	rcall	.-214    	; 0x2bc <flash_write_bus_cycle>
	
	flash_write_bus_cycle((uint16_t) sector << 12, 0x30);
     392:	60 e3       	ldi	r22, 0x30	; 48
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	9c 2f       	mov	r25, r28
     398:	92 95       	swap	r25
     39a:	90 7f       	andi	r25, 0xF0	; 240
     39c:	8f df       	rcall	.-226    	; 0x2bc <flash_write_bus_cycle>
     39e:	8f e4       	ldi	r24, 0x4F	; 79
     3a0:	93 ec       	ldi	r25, 0xC3	; 195
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <flash_erase_4k_sector+0x3c>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <flash_erase_4k_sector+0x42>
     3a8:	00 00       	nop
	_delay_ms(25); // Wait 25ms for sector erase
}
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <flash_write_byte>:

// Write a single byte to the Flash address
// Takes 20us to program Flash
void flash_write_byte(uint16_t address, uint8_t data) {
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	ec 01       	movw	r28, r24
     3b6:	16 2f       	mov	r17, r22
	flash_write_bus_cycle(0x5555, 0xAA);
     3b8:	6a ea       	ldi	r22, 0xAA	; 170
     3ba:	85 e5       	ldi	r24, 0x55	; 85
     3bc:	95 e5       	ldi	r25, 0x55	; 85
     3be:	7e df       	rcall	.-260    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     3c0:	65 e5       	ldi	r22, 0x55	; 85
     3c2:	8a ea       	ldi	r24, 0xAA	; 170
     3c4:	9a e2       	ldi	r25, 0x2A	; 42
     3c6:	7a df       	rcall	.-268    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
     3c8:	60 ea       	ldi	r22, 0xA0	; 160
     3ca:	85 e5       	ldi	r24, 0x55	; 85
     3cc:	95 e5       	ldi	r25, 0x55	; 85
     3ce:	76 df       	rcall	.-276    	; 0x2bc <flash_write_bus_cycle>
	
	flash_write_bus_cycle(address, data);
     3d0:	61 2f       	mov	r22, r17
     3d2:	ce 01       	movw	r24, r28
     3d4:	73 df       	rcall	.-282    	; 0x2bc <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d6:	85 e3       	ldi	r24, 0x35	; 53
     3d8:	8a 95       	dec	r24
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <flash_write_byte+0x2a>
     3dc:	00 00       	nop
	_delay_us(20); // Wait byte program time
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	08 95       	ret

000003e6 <flash_write_sector>:

// Write a sector (128 bytes) to the Atmel flash
// Takes 20ms for write cycle
void flash_write_sector(uint16_t sector) {
     3e6:	ef 92       	push	r14
     3e8:	ff 92       	push	r15
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	8c 01       	movw	r16, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     3f4:	6a ea       	ldi	r22, 0xAA	; 170
     3f6:	85 e5       	ldi	r24, 0x55	; 85
     3f8:	95 e5       	ldi	r25, 0x55	; 85
     3fa:	60 df       	rcall	.-320    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     3fc:	65 e5       	ldi	r22, 0x55	; 85
     3fe:	8a ea       	ldi	r24, 0xAA	; 170
     400:	9a e2       	ldi	r25, 0x2A	; 42
     402:	5c df       	rcall	.-328    	; 0x2bc <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
     404:	60 ea       	ldi	r22, 0xA0	; 160
     406:	85 e5       	ldi	r24, 0x55	; 85
     408:	95 e5       	ldi	r25, 0x55	; 85
     40a:	58 df       	rcall	.-336    	; 0x2bc <flash_write_bus_cycle>
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
     40c:	16 95       	lsr	r17
     40e:	10 2f       	mov	r17, r16
     410:	00 27       	eor	r16, r16
     412:	17 95       	ror	r17
     414:	07 95       	ror	r16
     416:	92 e7       	ldi	r25, 0x72	; 114
     418:	e9 2e       	mov	r14, r25
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	f9 2e       	mov	r15, r25
     41e:	c0 e0       	ldi	r28, 0x00	; 0
     420:	d0 e0       	ldi	r29, 0x00	; 0
     422:	f7 01       	movw	r30, r14
     424:	61 91       	ld	r22, Z+
     426:	7f 01       	movw	r14, r30
     428:	ce 01       	movw	r24, r28
     42a:	80 2b       	or	r24, r16
     42c:	91 2b       	or	r25, r17
     42e:	46 df       	rcall	.-372    	; 0x2bc <flash_write_bus_cycle>
     430:	21 96       	adiw	r28, 0x01	; 1
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	flash_write_bus_cycle(0x5555, 0xA0);
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
     432:	c0 38       	cpi	r28, 0x80	; 128
     434:	d1 05       	cpc	r29, r1
     436:	a9 f7       	brne	.-22     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     438:	8f e3       	ldi	r24, 0x3F	; 63
     43a:	9c e9       	ldi	r25, 0x9C	; 156
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     442:	00 00       	nop
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
	}
	_delay_ms(20); // Wait sector program time
}
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	ff 90       	pop	r15
     44e:	ef 90       	pop	r14
     450:	08 95       	ret

00000452 <gb_flash_read_byte>:

// ---------- GB FLASH CARTS ----------

// Read a byte from the flash (No CS pin pulse)
uint8_t gb_flash_read_byte(uint16_t address) {
	PORT_DATA7_0 = 0;
     452:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     454:	14 ba       	out	0x14, r1	; 20
	
	set_16bit_address(address);
     456:	36 de       	rcall	.-916    	; 0xc4 <set_16bit_address>
	
	rdPin_low;
     458:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop"); // Delay a little
     45a:	00 00       	nop
	asm volatile("nop");
     45c:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
     45e:	83 b3       	in	r24, 0x13	; 19
	rdPin_high;
     460:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
     462:	08 95       	ret

00000464 <gb_flash_write_bus_cycle>:

// Set the address and data for the write byte cycle to the flash
void gb_flash_write_bus_cycle(uint16_t address, uint8_t data) {
     464:	cf 93       	push	r28
     466:	c6 2f       	mov	r28, r22
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
     468:	2f ef       	ldi	r18, 0xFF	; 255
     46a:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
     46c:	2b de       	rcall	.-938    	; 0xc4 <set_16bit_address>
	PORT_DATA7_0 = data;
     46e:	c5 bb       	out	0x15, r28	; 21
	
	if (flashWriteWePin == WE_AS_AUDIO_PIN) { // Audio pin
     470:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <flashWriteWePin>
     474:	81 34       	cpi	r24, 0x41	; 65
     476:	31 f4       	brne	.+12     	; 0x484 <gb_flash_write_bus_cycle+0x20>
		audioPin_low; // WE low
     478:	39 98       	cbi	0x07, 1	; 7
		asm volatile("nop");
     47a:	00 00       	nop
		asm volatile("nop");
     47c:	00 00       	nop
		asm volatile("nop");
     47e:	00 00       	nop
		audioPin_high; // WE high
     480:	39 9a       	sbi	0x07, 1	; 7
     482:	05 c0       	rjmp	.+10     	; 0x48e <gb_flash_write_bus_cycle+0x2a>
	}
	else { // WR pin
		wrPin_low; // WE low
     484:	96 98       	cbi	0x12, 6	; 18
		asm volatile("nop");
     486:	00 00       	nop
		asm volatile("nop");
     488:	00 00       	nop
		asm volatile("nop");
     48a:	00 00       	nop
		wrPin_high; // WE high
     48c:	96 9a       	sbi	0x12, 6	; 18
	}
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
     48e:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     490:	14 ba       	out	0x14, r1	; 20
}
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <gb_flash_write_byte>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte.
void gb_flash_write_byte(uint16_t address, uint8_t data) {
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ec 01       	movw	r28, r24
     49e:	16 2f       	mov	r17, r22
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     4a0:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <flashWriteCycle+0x2>
     4a4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashWriteCycle>
     4a8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <flashWriteCycle+0x1>
     4ac:	db df       	rcall	.-74     	; 0x464 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     4ae:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <flashWriteCycle+0x6>
     4b2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flashWriteCycle+0x4>
     4b6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <flashWriteCycle+0x5>
     4ba:	d4 df       	rcall	.-88     	; 0x464 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     4bc:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <flashWriteCycle+0xa>
     4c0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flashWriteCycle+0x8>
     4c4:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <flashWriteCycle+0x9>
     4c8:	cd df       	rcall	.-102    	; 0x464 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
     4ca:	61 2f       	mov	r22, r17
     4cc:	ce 01       	movw	r24, r28
     4ce:	ca df       	rcall	.-108    	; 0x464 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d0:	8a e1       	ldi	r24, 0x1A	; 26
     4d2:	8a 95       	dec	r24
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <gb_flash_write_byte+0x3c>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <gb_flash_write_byte+0x42>
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     4d8:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     4da:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
     4dc:	ce 01       	movw	r24, r28
     4de:	b9 df       	rcall	.-142    	; 0x452 <gb_flash_read_byte>
	while (data != dataVerify) {
     4e0:	81 17       	cp	r24, r17
     4e2:	39 f0       	breq	.+14     	; 0x4f2 <gb_flash_write_byte+0x5c>
		dataVerify = gb_flash_read_byte(address);
     4e4:	ce 01       	movw	r24, r28
     4e6:	b5 df       	rcall	.-150    	; 0x452 <gb_flash_read_byte>
     4e8:	9d e0       	ldi	r25, 0x0D	; 13
     4ea:	9a 95       	dec	r25
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <gb_flash_write_byte+0x54>
     4ee:	00 00       	nop
     4f0:	f7 cf       	rjmp	.-18     	; 0x4e0 <gb_flash_write_byte+0x4a>
		_delay_us(5);
	}
}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	08 95       	ret

000004fa <gb_flash_write_byte_bank1_commands>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte. 
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	ec 01       	movw	r28, r24
     506:	16 2f       	mov	r17, r22
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
     508:	ff 24       	eor	r15, r15
     50a:	fa 94       	dec	r15
     50c:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
     50e:	01 e2       	ldi	r16, 0x21	; 33
     510:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
     512:	18 ba       	out	0x18, r1	; 24
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = 1;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
     518:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     51a:	00 00       	nop
	wrPin_high;
     51c:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     51e:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <flashWriteCycle+0x2>
     522:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashWriteCycle>
     526:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <flashWriteCycle+0x1>
     52a:	9c df       	rcall	.-200    	; 0x464 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     52c:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <flashWriteCycle+0x6>
     530:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flashWriteCycle+0x4>
     534:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <flashWriteCycle+0x5>
     538:	95 df       	rcall	.-214    	; 0x464 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     53a:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <flashWriteCycle+0xa>
     53e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flashWriteCycle+0x8>
     542:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <flashWriteCycle+0x9>
     546:	8e df       	rcall	.-228    	; 0x464 <gb_flash_write_bus_cycle>
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
     548:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
     54a:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
     54c:	18 ba       	out	0x18, r1	; 24
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = lastBankAccessed;
     54e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     552:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
     554:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     556:	00 00       	nop
	wrPin_high;
     558:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(address, data);
     55a:	61 2f       	mov	r22, r17
     55c:	ce 01       	movw	r24, r28
     55e:	82 df       	rcall	.-252    	; 0x464 <gb_flash_write_bus_cycle>
     560:	8a e1       	ldi	r24, 0x1A	; 26
     562:	8a 95       	dec	r24
     564:	f1 f7       	brne	.-4      	; 0x562 <gb_flash_write_byte_bank1_commands+0x68>
     566:	00 c0       	rjmp	.+0      	; 0x568 <gb_flash_write_byte_bank1_commands+0x6e>
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     568:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     56a:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
     56c:	ce 01       	movw	r24, r28
     56e:	71 df       	rcall	.-286    	; 0x452 <gb_flash_read_byte>
	while (data != dataVerify) {
     570:	81 17       	cp	r24, r17
     572:	39 f0       	breq	.+14     	; 0x582 <gb_flash_write_byte_bank1_commands+0x88>
		dataVerify = gb_flash_read_byte(address);
     574:	ce 01       	movw	r24, r28
     576:	6d df       	rcall	.-294    	; 0x452 <gb_flash_read_byte>
     578:	9d e0       	ldi	r25, 0x0D	; 13
     57a:	9a 95       	dec	r25
     57c:	f1 f7       	brne	.-4      	; 0x57a <gb_flash_write_byte_bank1_commands+0x80>
     57e:	00 00       	nop
     580:	f7 cf       	rjmp	.-18     	; 0x570 <gb_flash_write_byte_bank1_commands+0x76>
		_delay_us(5);
	}
}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	08 95       	ret

0000058e <gba_flash_write_bus_cycle>:


// ---------- GBA FLASH CARTS ----------

// Set the 24 bit address and 16 bit data for the write byte cycle to the flash (pulse WR pin)
void gba_flash_write_bus_cycle(uint32_t address, uint16_t data) {
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
     592:	8c 01       	movw	r16, r24
     594:	22 27       	eor	r18, r18
     596:	33 27       	eor	r19, r19
     598:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
     59a:	07 2f       	mov	r16, r23
     59c:	18 2f       	mov	r17, r24
     59e:	29 2f       	mov	r18, r25
     5a0:	33 27       	eor	r19, r19
     5a2:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
     5a4:	68 bb       	out	0x18, r22	; 24
	
	cs_mreqPin_low;
     5a6:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_DATA15_8 = data >> 8; // Set data
     5a8:	5b bb       	out	0x1b, r21	; 27
	GBA_PORT_ROM_DATA7_0 = data & 0xFF;
     5aa:	48 bb       	out	0x18, r20	; 24
	
	wrPin_low;
     5ac:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     5ae:	00 00       	nop
	asm volatile("nop");
     5b0:	00 00       	nop
	asm volatile("nop");
     5b2:	00 00       	nop
	wrPin_high;
     5b4:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     5b6:	94 9a       	sbi	0x12, 4	; 18
}
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	08 95       	ret

000005be <gba_flash_write_cycle_start_swapped>:

// Send the first 3 write cycles to the flash (swapped D0/D1)
void gba_flash_write_cycle_start_swapped(void) {
	// Set outputs
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     5be:	8f ef       	ldi	r24, 0xFF	; 255
     5c0:	84 bb       	out	0x14, r24	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     5c2:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     5c4:	87 bb       	out	0x17, r24	; 23
	
	// 0x555, 0xA9
	GBA_PORT_ROM_ADDR23_16 = 0;
     5c6:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     5c8:	95 e0       	ldi	r25, 0x05	; 5
     5ca:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     5cc:	85 e5       	ldi	r24, 0x55	; 85
     5ce:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     5d0:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     5d2:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA9;
     5d4:	29 ea       	ldi	r18, 0xA9	; 169
     5d6:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     5d8:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     5da:	00 00       	nop
	asm volatile("nop");
     5dc:	00 00       	nop
	asm volatile("nop");
     5de:	00 00       	nop
	wrPin_high;
     5e0:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     5e2:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x2AA, 0x56
	GBA_PORT_ROM_ADDR23_16 = 0;
     5e4:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x02;
     5e6:	22 e0       	ldi	r18, 0x02	; 2
     5e8:	2b bb       	out	0x1b, r18	; 27
	GBA_PORT_ROM_ADDR7_0 = 0xAA;
     5ea:	2a ea       	ldi	r18, 0xAA	; 170
     5ec:	28 bb       	out	0x18, r18	; 24
	cs_mreqPin_low;
     5ee:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     5f0:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0x56;
     5f2:	26 e5       	ldi	r18, 0x56	; 86
     5f4:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     5f6:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     5f8:	00 00       	nop
	asm volatile("nop");
     5fa:	00 00       	nop
	asm volatile("nop");
     5fc:	00 00       	nop
	wrPin_high;
     5fe:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     600:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x555, 0xA0;
	GBA_PORT_ROM_ADDR23_16 = 0;
     602:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     604:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     606:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     608:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     60a:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA0;
     60c:	80 ea       	ldi	r24, 0xA0	; 160
     60e:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     610:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     612:	00 00       	nop
	asm volatile("nop");
     614:	00 00       	nop
	asm volatile("nop");
     616:	00 00       	nop
	wrPin_high;
     618:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     61a:	94 9a       	sbi	0x12, 4	; 18
     61c:	08 95       	ret

0000061e <gba_flash_write_cycle_start>:


// Send the first 3 write cycles to the flash
void gba_flash_write_cycle_start(void) {
	// Set outputs
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     61e:	8f ef       	ldi	r24, 0xFF	; 255
     620:	84 bb       	out	0x14, r24	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     622:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     624:	87 bb       	out	0x17, r24	; 23
	
	// 0x555, 0xAA
	GBA_PORT_ROM_ADDR23_16 = 0;
     626:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     628:	95 e0       	ldi	r25, 0x05	; 5
     62a:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     62c:	85 e5       	ldi	r24, 0x55	; 85
     62e:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     630:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     632:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xAA;
     634:	2a ea       	ldi	r18, 0xAA	; 170
     636:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     638:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     63a:	00 00       	nop
	asm volatile("nop");
     63c:	00 00       	nop
	asm volatile("nop");
     63e:	00 00       	nop
	wrPin_high;
     640:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     642:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x2AA, 0x55
	GBA_PORT_ROM_ADDR23_16 = 0;
     644:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x02;
     646:	32 e0       	ldi	r19, 0x02	; 2
     648:	3b bb       	out	0x1b, r19	; 27
	GBA_PORT_ROM_ADDR7_0 = 0xAA;
     64a:	28 bb       	out	0x18, r18	; 24
	cs_mreqPin_low;
     64c:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     64e:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0x55;
     650:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     652:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     654:	00 00       	nop
	asm volatile("nop");
     656:	00 00       	nop
	asm volatile("nop");
     658:	00 00       	nop
	wrPin_high;
     65a:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     65c:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x555, 0xA0;
	GBA_PORT_ROM_ADDR23_16 = 0;
     65e:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     660:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     662:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     664:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     666:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA0;
     668:	80 ea       	ldi	r24, 0xA0	; 160
     66a:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     66c:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     66e:	00 00       	nop
	asm volatile("nop");
     670:	00 00       	nop
	asm volatile("nop");
     672:	00 00       	nop
	wrPin_high;
     674:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     676:	94 9a       	sbi	0x12, 4	; 18
     678:	08 95       	ret

0000067a <gba_flash_write_byte>:
}	


// Write 2 bytes to the Flash address. Time to wait depends on Flash, we will query it to verify the correct data has been written.
// Address is divided by 2 as we are in GBA mode. 
void gba_flash_write_byte(uint32_t address, uint16_t data, uint8_t isD0D1Swapped) {
     67a:	cf 92       	push	r12
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	6b 01       	movw	r12, r22
     688:	7c 01       	movw	r14, r24
     68a:	ea 01       	movw	r28, r20
	if (isD0D1Swapped == 0) {
     68c:	21 11       	cpse	r18, r1
     68e:	02 c0       	rjmp	.+4      	; 0x694 <gba_flash_write_byte+0x1a>
		gba_flash_write_cycle_start();
     690:	c6 df       	rcall	.-116    	; 0x61e <gba_flash_write_cycle_start>
     692:	01 c0       	rjmp	.+2      	; 0x696 <gba_flash_write_byte+0x1c>
	}
	else {
		gba_flash_write_cycle_start_swapped();
     694:	94 df       	rcall	.-216    	; 0x5be <gba_flash_write_cycle_start_swapped>
	}
	gba_flash_write_bus_cycle(address, data);
     696:	ae 01       	movw	r20, r28
     698:	c7 01       	movw	r24, r14
     69a:	b6 01       	movw	r22, r12
     69c:	78 df       	rcall	.-272    	; 0x58e <gba_flash_write_bus_cycle>
     69e:	25 e0       	ldi	r18, 0x05	; 5
     6a0:	2a 95       	dec	r18
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <gba_flash_write_byte+0x26>
     6a4:	00 00       	nop
	_delay_us(2); // Wait byte program time
	
	// Verify data
	uint16_t dataVerify = gba_read_16bit_data(address);
     6a6:	c7 01       	movw	r24, r14
     6a8:	b6 01       	movw	r22, r12
     6aa:	4c dd       	rcall	.-1384   	; 0x144 <gba_read_16bit_data>
	while (data != dataVerify) {
     6ac:	8c 17       	cp	r24, r28
     6ae:	9d 07       	cpc	r25, r29
     6b0:	41 f0       	breq	.+16     	; 0x6c2 <gba_flash_write_byte+0x48>
		dataVerify = gba_read_16bit_data(address);
     6b2:	c7 01       	movw	r24, r14
     6b4:	b6 01       	movw	r22, r12
     6b6:	46 dd       	rcall	.-1396   	; 0x144 <gba_read_16bit_data>
     6b8:	25 e0       	ldi	r18, 0x05	; 5
     6ba:	2a 95       	dec	r18
     6bc:	f1 f7       	brne	.-4      	; 0x6ba <gba_flash_write_byte+0x40>
     6be:	00 00       	nop
     6c0:	f5 cf       	rjmp	.-22     	; 0x6ac <gba_flash_write_byte+0x32>
		_delay_us(2);
	}
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	df 90       	pop	r13
     6cc:	cf 90       	pop	r12
     6ce:	08 95       	ret

000006d0 <setup>:


// Setup
void setup(void) {
	// Turn off watchdog
	MCUCSR &= ~(1<<WDRF);
     6d0:	84 b7       	in	r24, 0x34	; 52
     6d2:	87 7f       	andi	r24, 0xF7	; 247
     6d4:	84 bf       	out	0x34, r24	; 52
	WDTCR = (1<<WDCE) | (1<<WDE);
     6d6:	88 e1       	ldi	r24, 0x18	; 24
     6d8:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
     6da:	11 bc       	out	0x21, r1	; 33
	
	// Reset common lines
	rd_wr_csmreq_cs2_reset();
     6dc:	e6 dc       	rcall	.-1588   	; 0xaa <rd_wr_csmreq_cs2_reset>
	
	// Set outputs
	DDRD |= (1<<ACTIVITY_LED) | (1<<WR_PIN) | (1<<RD_PIN) | (1<<CS_MREQ_PIN) | (1<<LED_5V) | (1<<VOLTAGE_SELECT);
     6de:	81 b3       	in	r24, 0x11	; 17
     6e0:	8c 6f       	ori	r24, 0xFC	; 252
     6e2:	81 bb       	out	0x11, r24	; 17
	DDRE |= (1<<CS2_PIN) | (1<<LED_3V);
     6e4:	86 b1       	in	r24, 0x06	; 6
     6e6:	85 60       	ori	r24, 0x05	; 5
     6e8:	86 b9       	out	0x06, r24	; 6
	
	// Set all pins as inputs
	PORT_DATA7_0 = 0;
     6ea:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     6ec:	14 ba       	out	0x14, r1	; 20
	PORT_ADDR7_0 = 0;
     6ee:	18 ba       	out	0x18, r1	; 24
	DDR_ADDR7_0 = 0;
     6f0:	17 ba       	out	0x17, r1	; 23
	PORT_ADDR15_8 = 0;
     6f2:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR15_8 = 0;
     6f4:	1a ba       	out	0x1a, r1	; 26
	
	// Light up 3.3V or 5V
	if (cartMode == GB_MODE) {
     6f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     6fa:	81 30       	cpi	r24, 0x01	; 1
     6fc:	19 f4       	brne	.+6      	; 0x704 <setup+0x34>
		PORTD |= (1<<LED_5V);
     6fe:	97 9a       	sbi	0x12, 7	; 18
		PORTE &= ~(1<<LED_3V);
     700:	38 98       	cbi	0x07, 0	; 7
     702:	02 c0       	rjmp	.+4      	; 0x708 <setup+0x38>
	}
	else {
		PORTE |= (1<<LED_3V);
     704:	38 9a       	sbi	0x07, 0	; 7
		PORTD &= ~(1<<LED_5V);
     706:	97 98       	cbi	0x12, 7	; 18
	}
	
	// Light LED
	PORTD |= (1<<ACTIVITY_LED);
     708:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     70a:	2f ef       	ldi	r18, 0xFF	; 255
     70c:	84 e3       	ldi	r24, 0x34	; 52
     70e:	9c e0       	ldi	r25, 0x0C	; 12
     710:	21 50       	subi	r18, 0x01	; 1
     712:	80 40       	sbci	r24, 0x00	; 0
     714:	90 40       	sbci	r25, 0x00	; 0
     716:	e1 f7       	brne	.-8      	; 0x710 <setup+0x40>
     718:	00 c0       	rjmp	.+0      	; 0x71a <setup+0x4a>
     71a:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1<<ACTIVITY_LED);
     71c:	93 98       	cbi	0x12, 3	; 18
	
	// Setup USART
	UBRRL = 0; // 1Mbps Baud rate
     71e:	19 b8       	out	0x09, r1	; 9
	sbi(UCSRA, U2X); // Double rate
     720:	59 9a       	sbi	0x0b, 1	; 11
	sbi(UCSRB, TXEN); // Transmitter enable
     722:	53 9a       	sbi	0x0a, 3	; 10
	sbi(UCSRB, RXEN); // Receiver enable
     724:	54 9a       	sbi	0x0a, 4	; 10
	
	// Turn on interrupts
	sei();
     726:	78 94       	sei
     728:	08 95       	ret

0000072a <main>:
#include <string.h>
#include "setup.c" // See defines, variables, constants, functions here


int main(void) {
	setup();
     72a:	d2 df       	rcall	.-92     	; 0x6d0 <setup>
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t resetCommonLines = 1;
     72c:	66 24       	eor	r6, r6
     72e:	63 94       	inc	r6

int main(void) {
	setup();
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
     730:	d1 e0       	ldi	r29, 0x01	; 1


int main(void) {
	setup();
	
	uint32_t address = 0;
     732:	c1 2c       	mov	r12, r1
     734:	d1 2c       	mov	r13, r1
     736:	76 01       	movw	r14, r12
			uint8_t readEnd = 32;
			if (receivedChar == GBA_READ_ROM_256BYTE) {
				readEnd = 128;
			}
			
			receivedChar = '1';
     738:	b1 e3       	ldi	r27, 0x31	; 49
     73a:	7b 2e       	mov	r7, r27
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE) {
			PORTD |= (1<<ACTIVITY_LED);
			usart_read_bytes(64);
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
     73c:	cf ef       	ldi	r28, 0xFF	; 255
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t resetCommonLines = 1;
	
	while(1) {
		if (resetCommonLines == 1) {
     73e:	21 e0       	ldi	r18, 0x01	; 1
     740:	62 12       	cpse	r6, r18
     742:	01 c0       	rjmp	.+2      	; 0x746 <main+0x1c>
			rd_wr_csmreq_cs2_reset();
     744:	b2 dc       	rcall	.-1692   	; 0xaa <rd_wr_csmreq_cs2_reset>
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
     746:	89 dc       	rcall	.-1774   	; 0x5a <USART_Receive>
     748:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <receivedChar>
		
		// Return the cart mode in use
		if (receivedChar == CART_MODE) {
     74c:	83 34       	cpi	r24, 0x43	; 67
     74e:	19 f4       	brne	.+6      	; 0x756 <main+0x2c>
			USART_Transmit(cartMode);
     750:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     754:	4d c5       	rjmp	.+2714   	; 0x11f0 <main+0xac6>
		}
		
		// Change to GB mode or GBA mode if requested
		else if (receivedChar == GB_CART_MODE) {
     756:	87 34       	cpi	r24, 0x47	; 71
     758:	11 f4       	brne	.+4      	; 0x75e <main+0x34>
			gb_mode();
     75a:	ac dc       	rcall	.-1704   	; 0xb4 <gb_mode>
     75c:	f0 cf       	rjmp	.-32     	; 0x73e <main+0x14>
		}
		else if (receivedChar == GBA_CART_MODE) {
     75e:	87 36       	cpi	r24, 0x67	; 103
     760:	09 f4       	brne	.+2      	; 0x764 <main+0x3a>
     762:	f8 c0       	rjmp	.+496    	; 0x954 <main+0x22a>
			gba_mode();
		}
		
		// Switch voltage if requested
		else if (receivedChar == VOLTAGE_3_3V) {
     764:	83 33       	cpi	r24, 0x33	; 51
     766:	39 f4       	brne	.+14     	; 0x776 <main+0x4c>
			PORTD &= ~(1<<VOLTAGE_SELECT);
     768:	92 98       	cbi	0x12, 2	; 18
			cartMode = GBA_MODE;
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			PORTE |= (1<<LED_3V);
     770:	38 9a       	sbi	0x07, 0	; 7
			PORTD &= ~(1<<LED_5V);
     772:	97 98       	cbi	0x12, 7	; 18
     774:	e4 cf       	rjmp	.-56     	; 0x73e <main+0x14>
		}
		else if (receivedChar == VOLTAGE_5V) {
     776:	85 33       	cpi	r24, 0x35	; 53
     778:	39 f4       	brne	.+14     	; 0x788 <main+0x5e>
			PORTD |= (1<<VOLTAGE_SELECT);
     77a:	92 9a       	sbi	0x12, 2	; 18
			cartMode = GB_MODE;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			PORTD |= (1<<LED_5V);
     782:	97 9a       	sbi	0x12, 7	; 18
			PORTE &= ~(1<<LED_3V);
     784:	38 98       	cbi	0x07, 0	; 7
     786:	db cf       	rjmp	.-74     	; 0x73e <main+0x14>
		
		
		// ****** Gameboy / Gameboy Colour ******
		
		// Set address
		else if (receivedChar == SET_START_ADDRESS) {
     788:	81 34       	cpi	r24, 0x41	; 65
     78a:	59 f4       	brne	.+22     	; 0x7a2 <main+0x78>
			usart_read_chars(); // Read start address
     78c:	83 dc       	rcall	.-1786   	; 0x94 <usart_read_chars>
			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     78e:	40 e1       	ldi	r20, 0x10	; 16
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	82 e7       	ldi	r24, 0x72	; 114
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	49 d5       	rcall	.+2706   	; 0x122e <strtol>
     79c:	6b 01       	movw	r12, r22
     79e:	7c 01       	movw	r14, r24
     7a0:	ce cf       	rjmp	.-100    	; 0x73e <main+0x14>
		}
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
     7a2:	82 35       	cpi	r24, 0x52	; 82
     7a4:	f1 f4       	brne	.+60     	; 0x7e2 <main+0xb8>
			gb_mode();
     7a6:	86 dc       	rcall	.-1780   	; 0xb4 <gb_mode>
			receivedChar = '1';
     7a8:	70 92 72 01 	sts	0x0172, r7	; 0x800172 <receivedChar>
			while (receivedChar == '1') {
     7ac:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <receivedChar>
     7b0:	81 33       	cpi	r24, 0x31	; 49
     7b2:	29 f6       	brne	.-118    	; 0x73e <main+0x14>
				PORTD |= (1<<ACTIVITY_LED);
     7b4:	93 9a       	sbi	0x12, 3	; 18
     7b6:	00 e0       	ldi	r16, 0x00	; 0
     7b8:	10 e0       	ldi	r17, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(read_8bit_data(address));
     7ba:	c8 01       	movw	r24, r16
     7bc:	8c 0d       	add	r24, r12
     7be:	9d 1d       	adc	r25, r13
     7c0:	84 dc       	rcall	.-1784   	; 0xca <read_8bit_data>
     7c2:	4f dc       	rcall	.-1890   	; 0x62 <USART_Transmit>
     7c4:	0f 5f       	subi	r16, 0xFF	; 255
     7c6:	1f 4f       	sbci	r17, 0xFF	; 255
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
     7c8:	00 34       	cpi	r16, 0x40	; 64
     7ca:	11 05       	cpc	r17, r1
     7cc:	b1 f7       	brne	.-20     	; 0x7ba <main+0x90>
     7ce:	90 e4       	ldi	r25, 0x40	; 64
     7d0:	c9 0e       	add	r12, r25
     7d2:	d1 1c       	adc	r13, r1
     7d4:	e1 1c       	adc	r14, r1
     7d6:	f1 1c       	adc	r15, r1
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     7d8:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     7da:	3f dc       	rcall	.-1922   	; 0x5a <USART_Receive>
     7dc:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <receivedChar>
     7e0:	e5 cf       	rjmp	.-54     	; 0x7ac <main+0x82>
			}
		}
		
		// Write 64 bytes to RAM on address (and increment)
		else if (receivedChar == WRITE_RAM) {
     7e2:	87 35       	cpi	r24, 0x57	; 87
     7e4:	f1 f4       	brne	.+60     	; 0x822 <main+0xf8>
			gb_mode();
     7e6:	66 dc       	rcall	.-1844   	; 0xb4 <gb_mode>
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
     7e8:	80 e4       	ldi	r24, 0x40	; 64
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	3e dc       	rcall	.-1924   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     7ee:	93 9a       	sbi	0x12, 3	; 18
     7f0:	a2 e7       	ldi	r26, 0x72	; 114
     7f2:	aa 2e       	mov	r10, r26
     7f4:	a0 e0       	ldi	r26, 0x00	; 0
     7f6:	ba 2e       	mov	r11, r26
     7f8:	00 e0       	ldi	r16, 0x00	; 0
     7fa:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
     7fc:	f5 01       	movw	r30, r10
     7fe:	61 91       	ld	r22, Z+
     800:	5f 01       	movw	r10, r30
     802:	c8 01       	movw	r24, r16
     804:	8c 0d       	add	r24, r12
     806:	9d 1d       	adc	r25, r13
     808:	41 e0       	ldi	r20, 0x01	; 1
     80a:	68 dc       	rcall	.-1840   	; 0xdc <write_8bit_data>
     80c:	0f 5f       	subi	r16, 0xFF	; 255
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     810:	00 34       	cpi	r16, 0x40	; 64
     812:	11 05       	cpc	r17, r1
     814:	99 f7       	brne	.-26     	; 0x7fc <main+0xd2>
     816:	f0 e4       	ldi	r31, 0x40	; 64
     818:	cf 0e       	add	r12, r31
     81a:	d1 1c       	adc	r13, r1
     81c:	e1 1c       	adc	r14, r1
     81e:	f1 1c       	adc	r15, r1
     820:	32 c3       	rjmp	.+1636   	; 0xe86 <main+0x75c>
			PORTD &= ~(1<<ACTIVITY_LED);
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Set bank address and write a byte
		else if (receivedChar == SET_BANK) {
     822:	82 34       	cpi	r24, 0x42	; 66
     824:	e1 f4       	brne	.+56     	; 0x85e <main+0x134>
			gb_mode();
     826:	46 dc       	rcall	.-1908   	; 0xb4 <gb_mode>
			
			usart_read_chars(); // Read start address
     828:	35 dc       	rcall	.-1942   	; 0x94 <usart_read_chars>
			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     82a:	40 e1       	ldi	r20, 0x10	; 16
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	82 e7       	ldi	r24, 0x72	; 114
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	fb d4       	rcall	.+2550   	; 0x122e <strtol>
     838:	4b 01       	movw	r8, r22
     83a:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for bank number
     83c:	0e dc       	rcall	.-2020   	; 0x5a <USART_Receive>
     83e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <receivedChar>
			if (receivedChar == 'B') {
     842:	82 34       	cpi	r24, 0x42	; 66
     844:	09 f0       	breq	.+2      	; 0x848 <main+0x11e>
     846:	7b cf       	rjmp	.-266    	; 0x73e <main+0x14>
				usart_read_chars(); // Read data
     848:	25 dc       	rcall	.-1974   	; 0x94 <usart_read_chars>
				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
     84a:	82 e7       	ldi	r24, 0x72	; 114
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	00 d6       	rcall	.+3072   	; 0x1450 <atoi>
				lastBankAccessed = data; // Store the last bank accessed (used for flash carts that need it)
     850:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
				
				write_8bit_data(bankaddress, data, BANK_WRITE);
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	68 2f       	mov	r22, r24
     858:	c4 01       	movw	r24, r8
     85a:	40 dc       	rcall	.-1920   	; 0xdc <write_8bit_data>
     85c:	70 cf       	rjmp	.-288    	; 0x73e <main+0x14>
		
		// ****** Gameboy Advance ******
		
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
     85e:	82 37       	cpi	r24, 0x72	; 114
     860:	11 f0       	breq	.+4      	; 0x866 <main+0x13c>
     862:	8a 36       	cpi	r24, 0x6A	; 106
     864:	b1 f5       	brne	.+108    	; 0x8d2 <main+0x1a8>
			gba_mode();
     866:	50 dc       	rcall	.-1888   	; 0x108 <gba_mode>
			
			uint8_t readEnd = 32;
			if (receivedChar == GBA_READ_ROM_256BYTE) {
     868:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <receivedChar>
     86c:	8a 36       	cpi	r24, 0x6A	; 106
     86e:	11 f4       	brne	.+4      	; 0x874 <main+0x14a>
				readEnd = 128;
     870:	10 e8       	ldi	r17, 0x80	; 128
     872:	01 c0       	rjmp	.+2      	; 0x876 <main+0x14c>
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
			gba_mode();
			
			uint8_t readEnd = 32;
     874:	10 e2       	ldi	r17, 0x20	; 32
			if (receivedChar == GBA_READ_ROM_256BYTE) {
				readEnd = 128;
			}
			
			receivedChar = '1';
     876:	70 92 72 01 	sts	0x0172, r7	; 0x800172 <receivedChar>
     87a:	88 24       	eor	r8, r8
     87c:	8a 94       	dec	r8
     87e:	81 0e       	add	r8, r17
     880:	91 2c       	mov	r9, r1
     882:	a1 2c       	mov	r10, r1
     884:	b1 2c       	mov	r11, r1
     886:	2f ef       	ldi	r18, 0xFF	; 255
     888:	82 1a       	sub	r8, r18
     88a:	92 0a       	sbc	r9, r18
     88c:	a2 0a       	sbc	r10, r18
     88e:	b2 0a       	sbc	r11, r18
			while (receivedChar == '1') {
     890:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <receivedChar>
     894:	81 33       	cpi	r24, 0x31	; 49
     896:	09 f0       	breq	.+2      	; 0x89a <main+0x170>
     898:	52 cf       	rjmp	.-348    	; 0x73e <main+0x14>
				PORTD |= (1<<ACTIVITY_LED);
     89a:	93 9a       	sbi	0x12, 3	; 18
     89c:	16 01       	movw	r2, r12
     89e:	27 01       	movw	r4, r14
				
				for (uint8_t x = 0; x < readEnd; x++) {
					uint16_t dataRead = gba_read_16bit_data(address);
     8a0:	c2 01       	movw	r24, r4
     8a2:	b1 01       	movw	r22, r2
     8a4:	4f dc       	rcall	.-1890   	; 0x144 <gba_read_16bit_data>
     8a6:	09 2f       	mov	r16, r25
					
					// Low byte & High byte
					USART_Transmit(dataRead & 0xFF);
     8a8:	dc db       	rcall	.-2120   	; 0x62 <USART_Transmit>
					USART_Transmit(dataRead >> 8);
     8aa:	80 2f       	mov	r24, r16
     8ac:	da db       	rcall	.-2124   	; 0x62 <USART_Transmit>
					
					address++;
     8ae:	8f ef       	ldi	r24, 0xFF	; 255
     8b0:	28 1a       	sub	r2, r24
     8b2:	38 0a       	sbc	r3, r24
     8b4:	48 0a       	sbc	r4, r24
     8b6:	58 0a       	sbc	r5, r24
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				
				for (uint8_t x = 0; x < readEnd; x++) {
     8b8:	82 2d       	mov	r24, r2
     8ba:	8c 19       	sub	r24, r12
     8bc:	81 17       	cp	r24, r17
     8be:	80 f3       	brcs	.-32     	; 0x8a0 <main+0x176>
     8c0:	c8 0c       	add	r12, r8
     8c2:	d9 1c       	adc	r13, r9
     8c4:	ea 1c       	adc	r14, r10
     8c6:	fb 1c       	adc	r15, r11
					USART_Transmit(dataRead >> 8);
					
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     8c8:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     8ca:	c7 db       	rcall	.-2162   	; 0x5a <USART_Receive>
     8cc:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <receivedChar>
     8d0:	df cf       	rjmp	.-66     	; 0x890 <main+0x166>
			}
		}
		
		// ---------- SRAM ----------
		// Read RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_SRAM) {
     8d2:	8d 36       	cpi	r24, 0x6D	; 109
     8d4:	f1 f4       	brne	.+60     	; 0x912 <main+0x1e8>
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
     8d6:	ee db       	rcall	.-2084   	; 0xb4 <gb_mode>
			
			receivedChar = '1';
     8d8:	70 92 72 01 	sts	0x0172, r7	; 0x800172 <receivedChar>
			while (receivedChar == '1') {
     8dc:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <receivedChar>
     8e0:	81 33       	cpi	r24, 0x31	; 49
     8e2:	c1 f5       	brne	.+112    	; 0x954 <main+0x22a>
				PORTD |= (1<<ACTIVITY_LED);
     8e4:	93 9a       	sbi	0x12, 3	; 18
     8e6:	00 e0       	ldi	r16, 0x00	; 0
     8e8:	10 e0       	ldi	r17, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(gba_read_ram_8bit_data(address));
     8ea:	c8 01       	movw	r24, r16
     8ec:	8c 0d       	add	r24, r12
     8ee:	9d 1d       	adc	r25, r13
     8f0:	38 dc       	rcall	.-1936   	; 0x162 <gba_read_ram_8bit_data>
     8f2:	b7 db       	rcall	.-2194   	; 0x62 <USART_Transmit>
     8f4:	0f 5f       	subi	r16, 0xFF	; 255
     8f6:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
     8f8:	00 34       	cpi	r16, 0x40	; 64
     8fa:	11 05       	cpc	r17, r1
     8fc:	b1 f7       	brne	.-20     	; 0x8ea <main+0x1c0>
     8fe:	90 e4       	ldi	r25, 0x40	; 64
     900:	c9 0e       	add	r12, r25
     902:	d1 1c       	adc	r13, r1
     904:	e1 1c       	adc	r14, r1
     906:	f1 1c       	adc	r15, r1
					USART_Transmit(gba_read_ram_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     908:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     90a:	a7 db       	rcall	.-2226   	; 0x5a <USART_Receive>
     90c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <receivedChar>
     910:	e5 cf       	rjmp	.-54     	; 0x8dc <main+0x1b2>
			
			gba_mode(); // Set back
		}
		
		// Write to RAM on address (and increment) with 64 bytes of data
		else if (receivedChar == GBA_WRITE_SRAM) {
     912:	87 37       	cpi	r24, 0x77	; 119
     914:	09 f5       	brne	.+66     	; 0x958 <main+0x22e>
			gb_mode();
     916:	ce db       	rcall	.-2148   	; 0xb4 <gb_mode>
			
			usart_read_bytes(64);
     918:	80 e4       	ldi	r24, 0x40	; 64
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a6 db       	rcall	.-2228   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     91e:	93 9a       	sbi	0x12, 3	; 18
     920:	f2 e7       	ldi	r31, 0x72	; 114
     922:	af 2e       	mov	r10, r31
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	bf 2e       	mov	r11, r31
     928:	00 e0       	ldi	r16, 0x00	; 0
     92a:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
     92c:	f5 01       	movw	r30, r10
     92e:	61 91       	ld	r22, Z+
     930:	5f 01       	movw	r10, r30
     932:	c8 01       	movw	r24, r16
     934:	8c 0d       	add	r24, r12
     936:	9d 1d       	adc	r25, r13
     938:	1d dc       	rcall	.-1990   	; 0x174 <gba_write_ram_8bit_data>
     93a:	0f 5f       	subi	r16, 0xFF	; 255
     93c:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     93e:	00 34       	cpi	r16, 0x40	; 64
     940:	11 05       	cpc	r17, r1
     942:	a1 f7       	brne	.-24     	; 0x92c <main+0x202>
     944:	f0 e4       	ldi	r31, 0x40	; 64
     946:	cf 0e       	add	r12, r31
     948:	d1 1c       	adc	r13, r1
     94a:	e1 1c       	adc	r14, r1
     94c:	f1 1c       	adc	r15, r1
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
				address++;
			}
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     94e:	81 e3       	ldi	r24, 0x31	; 49
     950:	88 db       	rcall	.-2288   	; 0x62 <USART_Transmit>
			
			PORTD &= ~(1<<ACTIVITY_LED);
     952:	93 98       	cbi	0x12, 3	; 18
			gba_mode(); // Set back
     954:	d9 db       	rcall	.-2126   	; 0x108 <gba_mode>
     956:	f3 ce       	rjmp	.-538    	; 0x73e <main+0x14>
		}
		
		// Write 1 byte to SRAM address
		else if (receivedChar == GBA_WRITE_ONE_BYTE_SRAM) {
     958:	8f 36       	cpi	r24, 0x6F	; 111
     95a:	31 f4       	brne	.+12     	; 0x968 <main+0x23e>
			gb_mode();
     95c:	ab db       	rcall	.-2218   	; 0xb4 <gb_mode>
			
			uint8_t data = USART_Receive();
     95e:	7d db       	rcall	.-2310   	; 0x5a <USART_Receive>
			gba_write_ram_8bit_data(address, data);
     960:	68 2f       	mov	r22, r24
     962:	c6 01       	movw	r24, r12
     964:	07 dc       	rcall	.-2034   	; 0x174 <gba_write_ram_8bit_data>
     966:	23 c0       	rjmp	.+70     	; 0x9ae <main+0x284>
		}
		
		
		// ---------- FLASH ----------
		// Read the Flash Manufacturer and Device ID
		else if (receivedChar == GBA_FLASH_READ_ID) {
     968:	89 36       	cpi	r24, 0x69	; 105
     96a:	49 f4       	brne	.+18     	; 0x97e <main+0x254>
			gb_mode();
     96c:	a3 db       	rcall	.-2234   	; 0xb4 <gb_mode>
			
			flash_read_chip_id();
     96e:	b3 dc       	rcall	.-1690   	; 0x2d6 <flash_read_chip_id>
			USART_Transmit(flashChipIdBuffer[0]);
     970:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <flashChipIdBuffer>
     974:	76 db       	rcall	.-2324   	; 0x62 <USART_Transmit>
			USART_Transmit(flashChipIdBuffer[1]);
     976:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <flashChipIdBuffer+0x1>
     97a:	73 db       	rcall	.-2330   	; 0x62 <USART_Transmit>
     97c:	eb cf       	rjmp	.-42     	; 0x954 <main+0x22a>
			
			gba_mode(); // Set back
		}
		
		// Change bank
		else if (receivedChar == GBA_FLASH_SET_BANK) {
     97e:	8b 36       	cpi	r24, 0x6B	; 107
     980:	49 f4       	brne	.+18     	; 0x994 <main+0x26a>
			usart_read_chars(); // Read data
     982:	88 db       	rcall	.-2288   	; 0x94 <usart_read_chars>
			uint8_t bank = atoi(receivedBuffer); // Convert data string to dec
     984:	82 e7       	ldi	r24, 0x72	; 114
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	63 d5       	rcall	.+2758   	; 0x1450 <atoi>
     98a:	18 2f       	mov	r17, r24
			
			gb_mode();
     98c:	93 db       	rcall	.-2266   	; 0xb4 <gb_mode>
			flash_switch_bank(bank);
     98e:	81 2f       	mov	r24, r17
     990:	d7 dc       	rcall	.-1618   	; 0x340 <flash_switch_bank>
     992:	e0 cf       	rjmp	.-64     	; 0x954 <main+0x22a>
			
			gba_mode(); // Set back
		}
		
		// Erase 4K sector on Flash (sector 0 to 15 for 512Kbit)
		else if (receivedChar == GBA_FLASH_4K_SECTOR_ERASE) {
     994:	83 37       	cpi	r24, 0x73	; 115
     996:	69 f4       	brne	.+26     	; 0x9b2 <main+0x288>
			gb_mode();
     998:	8d db       	rcall	.-2278   	; 0xb4 <gb_mode>
			
			usart_read_chars(); // Read sector
     99a:	7c db       	rcall	.-2312   	; 0x94 <usart_read_chars>
			uint8_t sectorAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     99c:	40 e1       	ldi	r20, 0x10	; 16
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	82 e7       	ldi	r24, 0x72	; 114
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	42 d4       	rcall	.+2180   	; 0x122e <strtol>
     9aa:	86 2f       	mov	r24, r22
			
			flash_erase_4k_sector(sectorAddress);
     9ac:	dc dc       	rcall	.-1608   	; 0x366 <flash_erase_4k_sector>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     9ae:	81 e3       	ldi	r24, 0x31	; 49
     9b0:	e4 cf       	rjmp	.-56     	; 0x97a <main+0x250>
			
			gba_mode(); // Set back
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_BYTE) {
     9b2:	82 36       	cpi	r24, 0x62	; 98
     9b4:	c1 f4       	brne	.+48     	; 0x9e6 <main+0x2bc>
			gb_mode();
     9b6:	7e db       	rcall	.-2308   	; 0xb4 <gb_mode>
			
			usart_read_bytes(64);
     9b8:	80 e4       	ldi	r24, 0x40	; 64
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	56 db       	rcall	.-2388   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     9be:	93 9a       	sbi	0x12, 3	; 18
     9c0:	e2 e7       	ldi	r30, 0x72	; 114
     9c2:	ae 2e       	mov	r10, r30
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	be 2e       	mov	r11, r30
     9c8:	00 e0       	ldi	r16, 0x00	; 0
     9ca:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				flash_write_byte(address, receivedBuffer[x]);
     9cc:	f5 01       	movw	r30, r10
     9ce:	61 91       	ld	r22, Z+
     9d0:	5f 01       	movw	r10, r30
     9d2:	c8 01       	movw	r24, r16
     9d4:	8c 0d       	add	r24, r12
     9d6:	9d 1d       	adc	r25, r13
     9d8:	ea dc       	rcall	.-1580   	; 0x3ae <flash_write_byte>
     9da:	0f 5f       	subi	r16, 0xFF	; 255
     9dc:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     9de:	00 34       	cpi	r16, 0x40	; 64
     9e0:	11 05       	cpc	r17, r1
     9e2:	a1 f7       	brne	.-24     	; 0x9cc <main+0x2a2>
     9e4:	af cf       	rjmp	.-162    	; 0x944 <main+0x21a>
			PORTD &= ~(1<<ACTIVITY_LED);
			gba_mode(); // Set back
		}
		
		// Write 128 bytes to flash sector for Atmel flash (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_ATMEL) {
     9e6:	81 36       	cpi	r24, 0x61	; 97
     9e8:	69 f4       	brne	.+26     	; 0xa04 <main+0x2da>
			gb_mode();
     9ea:	64 db       	rcall	.-2360   	; 0xb4 <gb_mode>
			
			usart_read_bytes(128);
     9ec:	80 e8       	ldi	r24, 0x80	; 128
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	3c db       	rcall	.-2440   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     9f2:	93 9a       	sbi	0x12, 3	; 18
			flash_write_sector(address); // Address used as sector number
     9f4:	c6 01       	movw	r24, r12
     9f6:	f7 dc       	rcall	.-1554   	; 0x3e6 <flash_write_sector>
			address++;
     9f8:	2f ef       	ldi	r18, 0xFF	; 255
     9fa:	c2 1a       	sub	r12, r18
     9fc:	d2 0a       	sbc	r13, r18
     9fe:	e2 0a       	sbc	r14, r18
     a00:	f2 0a       	sbc	r15, r18
     a02:	a5 cf       	rjmp	.-182    	; 0x94e <main+0x224>
		}
		
		
		// ---------- EEPROM ----------
		// Set EEPROM size
		else if (receivedChar == GBA_SET_EEPROM_SIZE) {
     a04:	83 35       	cpi	r24, 0x53	; 83
     a06:	51 f4       	brne	.+20     	; 0xa1c <main+0x2f2>
			usart_read_chars(); // Read size
     a08:	45 db       	rcall	.-2422   	; 0x94 <usart_read_chars>
			eepromSize = strtol(receivedBuffer, NULL, 16); // Convert size to dec
     a0a:	40 e1       	ldi	r20, 0x10	; 16
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	82 e7       	ldi	r24, 0x72	; 114
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0b d4       	rcall	.+2070   	; 0x122e <strtol>
     a18:	d6 2f       	mov	r29, r22
     a1a:	91 ce       	rjmp	.-734    	; 0x73e <main+0x14>
		}
		
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
     a1c:	85 36       	cpi	r24, 0x65	; 101
     a1e:	09 f5       	brne	.+66     	; 0xa62 <main+0x338>
			gba_eeprom_mode();
     a20:	b9 db       	rcall	.-2190   	; 0x194 <gba_eeprom_mode>
			
			receivedChar = '1';
     a22:	70 92 72 01 	sts	0x0172, r7	; 0x800172 <receivedChar>
			while (receivedChar == '1') {
     a26:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <receivedChar>
     a2a:	81 33       	cpi	r24, 0x31	; 49
     a2c:	09 f0       	breq	.+2      	; 0xa30 <main+0x306>
     a2e:	92 cf       	rjmp	.-220    	; 0x954 <main+0x22a>
				PORTD |= (1<<ACTIVITY_LED);
     a30:	93 9a       	sbi	0x12, 3	; 18
				gba_eeprom_read(address, eepromSize);
     a32:	6d 2f       	mov	r22, r29
     a34:	c6 01       	movw	r24, r12
     a36:	eb db       	rcall	.-2090   	; 0x20e <gba_eeprom_read>
     a38:	03 e7       	ldi	r16, 0x73	; 115
     a3a:	11 e0       	ldi	r17, 0x01	; 1
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
					USART_Transmit(eepromBuffer[c]);
     a3c:	f8 01       	movw	r30, r16
     a3e:	81 91       	ld	r24, Z+
     a40:	8f 01       	movw	r16, r30
     a42:	0f db       	rcall	.-2530   	; 0x62 <USART_Transmit>
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				gba_eeprom_read(address, eepromSize);
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
     a44:	8b e7       	ldi	r24, 0x7B	; 123
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	80 17       	cp	r24, r16
     a4a:	91 07       	cpc	r25, r17
     a4c:	b9 f7       	brne	.-18     	; 0xa3c <main+0x312>
					USART_Transmit(eepromBuffer[c]);
				}
				address++; // Increment to next 8 bytes
     a4e:	9f ef       	ldi	r25, 0xFF	; 255
     a50:	c9 1a       	sub	r12, r25
     a52:	d9 0a       	sbc	r13, r25
     a54:	e9 0a       	sbc	r14, r25
     a56:	f9 0a       	sbc	r15, r25
				
				PORTD &= ~(1<<ACTIVITY_LED);
     a58:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     a5a:	ff da       	rcall	.-2562   	; 0x5a <USART_Receive>
     a5c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <receivedChar>
     a60:	e2 cf       	rjmp	.-60     	; 0xa26 <main+0x2fc>
			
			gba_mode(); // Set back
		}
		
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
     a62:	80 37       	cpi	r24, 0x70	; 112
     a64:	e1 f4       	brne	.+56     	; 0xa9e <main+0x374>
			gba_eeprom_mode();
     a66:	96 db       	rcall	.-2260   	; 0x194 <gba_eeprom_mode>
     a68:	03 e7       	ldi	r16, 0x73	; 115
     a6a:	11 e0       	ldi	r17, 0x01	; 1
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
				eepromBuffer[x] = USART_Receive();
     a6c:	f6 da       	rcall	.-2580   	; 0x5a <USART_Receive>
     a6e:	f8 01       	movw	r30, r16
     a70:	81 93       	st	Z+, r24
     a72:	8f 01       	movw	r16, r30
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
			gba_eeprom_mode();
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
     a74:	8b e7       	ldi	r24, 0x7B	; 123
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	8e 17       	cp	r24, r30
     a7a:	9f 07       	cpc	r25, r31
     a7c:	b9 f7       	brne	.-18     	; 0xa6c <main+0x342>
				eepromBuffer[x] = USART_Receive();
			}
			PORTD |= (1<<ACTIVITY_LED);
     a7e:	93 9a       	sbi	0x12, 3	; 18
			
			gba_eeprom_write(address, eepromSize);
     a80:	6d 2f       	mov	r22, r29
     a82:	c6 01       	movw	r24, r12
     a84:	f1 db       	rcall	.-2078   	; 0x268 <gba_eeprom_write>
			address++;
     a86:	9f ef       	ldi	r25, 0xFF	; 255
     a88:	c9 1a       	sub	r12, r25
     a8a:	d9 0a       	sbc	r13, r25
     a8c:	e9 0a       	sbc	r14, r25
     a8e:	f9 0a       	sbc	r15, r25
     a90:	ef e7       	ldi	r30, 0x7F	; 127
     a92:	fe e3       	ldi	r31, 0x3E	; 62
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	f1 f7       	brne	.-4      	; 0xa94 <main+0x36a>
     a98:	00 c0       	rjmp	.+0      	; 0xa9a <main+0x370>
     a9a:	00 00       	nop
     a9c:	58 cf       	rjmp	.-336    	; 0x94e <main+0x224>
		}
		
		
		// ---------- GB FLASH CARTS ----------
		// Select which pin need to pulse as WE (Audio or WR)
		else if (receivedChar == GB_FLASH_WE_PIN) {
     a9e:	80 35       	cpi	r24, 0x50	; 80
     aa0:	49 f4       	brne	.+18     	; 0xab4 <main+0x38a>
			flashWriteWePin = USART_Receive();
     aa2:	db da       	rcall	.-2634   	; 0x5a <USART_Receive>
     aa4:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <flashWriteWePin>
			
			if (flashWriteWePin == WE_AS_AUDIO_PIN) {
     aa8:	81 34       	cpi	r24, 0x41	; 65
     aaa:	09 f0       	breq	.+2      	; 0xaae <main+0x384>
     aac:	48 ce       	rjmp	.-880    	; 0x73e <main+0x14>
				DDRE |= (1<<AUDIO_PIN);
     aae:	31 9a       	sbi	0x06, 1	; 6
				audioPin_high;
     ab0:	39 9a       	sbi	0x07, 1	; 7
     ab2:	45 ce       	rjmp	.-886    	; 0x73e <main+0x14>
			}
		}
		
		// Some flash carts may require changing the bank back to 1 in order to accept flash chip commands
		else if (receivedChar == GB_FLASH_BANK_1_COMMAND_WRITES) {
     ab4:	8e 34       	cpi	r24, 0x4E	; 78
     ab6:	21 f4       	brne	.+8      	; 0xac0 <main+0x396>
			flashBank1CommandWrites = 1;
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <flashBank1CommandWrites>
     abe:	3f ce       	rjmp	.-898    	; 0x73e <main+0x14>
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
     ac0:	85 34       	cpi	r24, 0x45	; 69
     ac2:	21 f5       	brne	.+72     	; 0xb0c <main+0x3e2>
     ac4:	04 e6       	ldi	r16, 0x64	; 100
     ac6:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 3; x++) {
				usart_read_chars(); // Address
     ac8:	e5 da       	rcall	.-2614   	; 0x94 <usart_read_chars>
				flashWriteCycle[x][0] = strtol(receivedBuffer, NULL, 16);
     aca:	40 e1       	ldi	r20, 0x10	; 16
     acc:	50 e0       	ldi	r21, 0x00	; 0
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	82 e7       	ldi	r24, 0x72	; 114
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	ab d3       	rcall	.+1878   	; 0x122e <strtol>
     ad8:	f8 01       	movw	r30, r16
     ada:	71 83       	std	Z+1, r23	; 0x01
     adc:	60 83       	st	Z, r22
				USART_Transmit(SEND_ACK);
     ade:	81 e3       	ldi	r24, 0x31	; 49
     ae0:	c0 da       	rcall	.-2688   	; 0x62 <USART_Transmit>
				
				usart_read_chars(); // Data
     ae2:	d8 da       	rcall	.-2640   	; 0x94 <usart_read_chars>
				flashWriteCycle[x][1] = strtol(receivedBuffer, NULL, 16);
     ae4:	40 e1       	ldi	r20, 0x10	; 16
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	82 e7       	ldi	r24, 0x72	; 114
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	9e d3       	rcall	.+1852   	; 0x122e <strtol>
     af2:	f8 01       	movw	r30, r16
     af4:	73 83       	std	Z+3, r23	; 0x03
     af6:	62 83       	std	Z+2, r22	; 0x02
				USART_Transmit(SEND_ACK);
     af8:	81 e3       	ldi	r24, 0x31	; 49
     afa:	b3 da       	rcall	.-2714   	; 0x62 <USART_Transmit>
     afc:	0c 5f       	subi	r16, 0xFC	; 252
     afe:	1f 4f       	sbci	r17, 0xFF	; 255
			flashBank1CommandWrites = 1;
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
			for (uint8_t x = 0; x < 3; x++) {
     b00:	80 e7       	ldi	r24, 0x70	; 112
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	80 17       	cp	r24, r16
     b06:	91 07       	cpc	r25, r17
     b08:	f9 f6       	brne	.-66     	; 0xac8 <main+0x39e>
     b0a:	19 ce       	rjmp	.-974    	; 0x73e <main+0x14>
				USART_Transmit(SEND_ACK);
			}
		}
		
		// Write address and one byte to Flash, pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
     b0c:	86 34       	cpi	r24, 0x46	; 70
     b0e:	b1 f4       	brne	.+44     	; 0xb3c <main+0x412>
			usart_read_chars(); // Read address
     b10:	c1 da       	rcall	.-2686   	; 0x94 <usart_read_chars>
			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16);
     b12:	40 e1       	ldi	r20, 0x10	; 16
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	82 e7       	ldi	r24, 0x72	; 114
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	87 d3       	rcall	.+1806   	; 0x122e <strtol>
     b20:	4b 01       	movw	r8, r22
     b22:	5c 01       	movw	r10, r24
			
			usart_read_chars(); // Read data byte
     b24:	b7 da       	rcall	.-2706   	; 0x94 <usart_read_chars>
			uint8_t flashByte = strtol(receivedBuffer, NULL, 16);
     b26:	40 e1       	ldi	r20, 0x10	; 16
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	82 e7       	ldi	r24, 0x72	; 114
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	7d d3       	rcall	.+1786   	; 0x122e <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
     b34:	93 9a       	sbi	0x12, 3	; 18
			gb_flash_write_bus_cycle(flashAddress, flashByte);
     b36:	c4 01       	movw	r24, r8
     b38:	95 dc       	rcall	.-1750   	; 0x464 <gb_flash_write_bus_cycle>
     b3a:	a5 c1       	rjmp	.+842    	; 0xe86 <main+0x75c>
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
     b3c:	84 35       	cpi	r24, 0x54	; 84
     b3e:	41 f5       	brne	.+80     	; 0xb90 <main+0x466>
			usart_read_bytes(64);
     b40:	80 e4       	ldi	r24, 0x40	; 64
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	92 da       	rcall	.-2780   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     b46:	93 9a       	sbi	0x12, 3	; 18
     b48:	62 e7       	ldi	r22, 0x72	; 114
     b4a:	a6 2e       	mov	r10, r22
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	b6 2e       	mov	r11, r22
     b50:	70 e4       	ldi	r23, 0x40	; 64
     b52:	97 2e       	mov	r9, r23
     b54:	86 01       	movw	r16, r12
     b56:	02 57       	subi	r16, 0x72	; 114
     b58:	10 40       	sbci	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				if (flashBank1CommandWrites == 0) {
     b5a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flashBank1CommandWrites>
					gb_flash_write_byte(address, receivedBuffer[x]);
     b5e:	f5 01       	movw	r30, r10
     b60:	60 81       	ld	r22, Z
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
				if (flashBank1CommandWrites == 0) {
     b62:	81 11       	cpse	r24, r1
     b64:	05 c0       	rjmp	.+10     	; 0xb70 <main+0x446>
					gb_flash_write_byte(address, receivedBuffer[x]);
     b66:	c8 01       	movw	r24, r16
     b68:	8a 0d       	add	r24, r10
     b6a:	9b 1d       	adc	r25, r11
     b6c:	94 dc       	rcall	.-1752   	; 0x496 <gb_flash_write_byte>
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <main+0x44e>
				}
				else { // Some flash carts need to change to bank 1 to issue flash commands
					gb_flash_write_byte_bank1_commands(address, receivedBuffer[x]);
     b70:	c8 01       	movw	r24, r16
     b72:	8a 0d       	add	r24, r10
     b74:	9b 1d       	adc	r25, r11
     b76:	c1 dc       	rcall	.-1662   	; 0x4fa <gb_flash_write_byte_bank1_commands>
     b78:	9a 94       	dec	r9
     b7a:	ff ef       	ldi	r31, 0xFF	; 255
     b7c:	af 1a       	sub	r10, r31
     b7e:	bf 0a       	sbc	r11, r31
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     b80:	91 10       	cpse	r9, r1
     b82:	eb cf       	rjmp	.-42     	; 0xb5a <main+0x430>
     b84:	20 e4       	ldi	r18, 0x40	; 64
     b86:	c2 0e       	add	r12, r18
     b88:	d1 1c       	adc	r13, r1
     b8a:	e1 1c       	adc	r14, r1
     b8c:	f1 1c       	adc	r15, r1
     b8e:	54 c2       	rjmp	.+1192   	; 0x1038 <main+0x90e>
			
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 32 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_BUFFERED_32BYTE) {
     b90:	89 35       	cpi	r24, 0x59	; 89
     b92:	09 f0       	breq	.+2      	; 0xb96 <main+0x46c>
     b94:	55 c0       	rjmp	.+170    	; 0xc40 <main+0x516>
			usart_read_bytes(32);
     b96:	80 e2       	ldi	r24, 0x20	; 32
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	67 da       	rcall	.-2866   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
     b9c:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xAA);
     b9e:	6a ea       	ldi	r22, 0xAA	; 170
     ba0:	8a ea       	ldi	r24, 0xAA	; 170
     ba2:	9a e0       	ldi	r25, 0x0A	; 10
     ba4:	5f dc       	rcall	.-1858   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x55);
     ba6:	65 e5       	ldi	r22, 0x55	; 85
     ba8:	85 e5       	ldi	r24, 0x55	; 85
     baa:	95 e0       	ldi	r25, 0x05	; 5
     bac:	5b dc       	rcall	.-1866   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x25);
     bae:	56 01       	movw	r10, r12
     bb0:	65 e2       	ldi	r22, 0x25	; 37
     bb2:	c6 01       	movw	r24, r12
     bb4:	57 dc       	rcall	.-1874   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x1F); // Length
     bb6:	6f e1       	ldi	r22, 0x1F	; 31
     bb8:	c6 01       	movw	r24, r12
     bba:	54 dc       	rcall	.-1880   	; 0x464 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	8a 95       	dec	r24
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <main+0x494>
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <main+0x49a>
     bc4:	02 e7       	ldi	r16, 0x72	; 114
     bc6:	10 e0       	ldi	r17, 0x00	; 0
     bc8:	81 2c       	mov	r8, r1
     bca:	91 2c       	mov	r9, r1
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     bcc:	f8 01       	movw	r30, r16
     bce:	61 91       	ld	r22, Z+
     bd0:	8f 01       	movw	r16, r30
     bd2:	c4 01       	movw	r24, r8
     bd4:	8a 0d       	add	r24, r10
     bd6:	9b 1d       	adc	r25, r11
     bd8:	45 dc       	rcall	.-1910   	; 0x464 <gb_flash_write_bus_cycle>
     bda:	ff ef       	ldi	r31, 0xFF	; 255
     bdc:	8f 1a       	sub	r8, r31
     bde:	9f 0a       	sbc	r9, r31
			gb_flash_write_bus_cycle(address, 0x25);
			gb_flash_write_bus_cycle(address, 0x1F); // Length
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
     be0:	20 e2       	ldi	r18, 0x20	; 32
     be2:	82 16       	cp	r8, r18
     be4:	91 04       	cpc	r9, r1
     be6:	91 f7       	brne	.-28     	; 0xbcc <main+0x4a2>
     be8:	80 e2       	ldi	r24, 0x20	; 32
     bea:	c8 0e       	add	r12, r24
     bec:	d1 1c       	adc	r13, r1
     bee:	e1 1c       	adc	r14, r1
     bf0:	f1 1c       	adc	r15, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-32, 0x29);
     bf2:	c6 01       	movw	r24, r12
     bf4:	80 97       	sbiw	r24, 0x20	; 32
     bf6:	69 e2       	ldi	r22, 0x29	; 41
     bf8:	35 dc       	rcall	.-1942   	; 0x464 <gb_flash_write_bus_cycle>
     bfa:	ef e8       	ldi	r30, 0x8F	; 143
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	31 97       	sbiw	r30, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <main+0x4d4>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <main+0x4da>
     c04:	00 00       	nop
			_delay_us(200);
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
     c06:	86 01       	movw	r16, r12
     c08:	01 50       	subi	r16, 0x01	; 1
     c0a:	11 09       	sbc	r17, r1
     c0c:	c8 01       	movw	r24, r16
     c0e:	21 dc       	rcall	.-1982   	; 0x452 <gb_flash_read_byte>
			uint8_t verifyCount = 0;
			while (dataVerify != receivedBuffer[31]) {
     c10:	58 ec       	ldi	r21, 0xC8	; 200
     c12:	b5 2e       	mov	r11, r21
     c14:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <receivedBuffer+0x1f>
     c18:	89 17       	cp	r24, r25
     c1a:	09 f4       	brne	.+2      	; 0xc1e <main+0x4f4>
     c1c:	0d c2       	rjmp	.+1050   	; 0x1038 <main+0x90e>
				dataVerify = gb_flash_read_byte(address-1);
     c1e:	c8 01       	movw	r24, r16
     c20:	18 dc       	rcall	.-2000   	; 0x452 <gb_flash_read_byte>
     c22:	fd e0       	ldi	r31, 0x0D	; 13
     c24:	fa 95       	dec	r31
     c26:	f1 f7       	brne	.-4      	; 0xc24 <main+0x4fa>
     c28:	00 00       	nop
     c2a:	ba 94       	dec	r11
				_delay_us(5);
				verifyCount++;
				if (verifyCount >= 200) {
     c2c:	b1 10       	cpse	r11, r1
     c2e:	f2 cf       	rjmp	.-28     	; 0xc14 <main+0x4ea>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c30:	2f ef       	ldi	r18, 0xFF	; 255
     c32:	84 e3       	ldi	r24, 0x34	; 52
     c34:	9c e0       	ldi	r25, 0x0C	; 12
     c36:	21 50       	subi	r18, 0x01	; 1
     c38:	80 40       	sbci	r24, 0x00	; 0
     c3a:	90 40       	sbci	r25, 0x00	; 0
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <main+0x50c>
     c3e:	fe c0       	rjmp	.+508    	; 0xe3c <main+0x712>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 256 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_256BYTE) {
     c40:	88 35       	cpi	r24, 0x58	; 88
     c42:	09 f0       	breq	.+2      	; 0xc46 <main+0x51c>
     c44:	42 c0       	rjmp	.+132    	; 0xcca <main+0x5a0>
			usart_read_bytes(256);
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	0f da       	rcall	.-3042   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
     c4c:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xA9);
     c4e:	69 ea       	ldi	r22, 0xA9	; 169
     c50:	8a ea       	ldi	r24, 0xAA	; 170
     c52:	9a e0       	ldi	r25, 0x0A	; 10
     c54:	07 dc       	rcall	.-2034   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x56);
     c56:	66 e5       	ldi	r22, 0x56	; 86
     c58:	85 e5       	ldi	r24, 0x55	; 85
     c5a:	95 e0       	ldi	r25, 0x05	; 5
     c5c:	03 dc       	rcall	.-2042   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
     c5e:	56 01       	movw	r10, r12
     c60:	66 e2       	ldi	r22, 0x26	; 38
     c62:	c6 01       	movw	r24, r12
     c64:	ff db       	rcall	.-2050   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0xFF); // Length
     c66:	6f ef       	ldi	r22, 0xFF	; 255
     c68:	c6 01       	movw	r24, r12
     c6a:	fc db       	rcall	.-2056   	; 0x464 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c6c:	e5 e8       	ldi	r30, 0x85	; 133
     c6e:	ea 95       	dec	r30
     c70:	f1 f7       	brne	.-4      	; 0xc6e <main+0x544>
     c72:	00 00       	nop
     c74:	02 e7       	ldi	r16, 0x72	; 114
     c76:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
     c78:	81 2c       	mov	r8, r1
     c7a:	91 2c       	mov	r9, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     c7c:	f8 01       	movw	r30, r16
     c7e:	61 91       	ld	r22, Z+
     c80:	8f 01       	movw	r16, r30
     c82:	c4 01       	movw	r24, r8
     c84:	8a 0d       	add	r24, r10
     c86:	9b 1d       	adc	r25, r11
     c88:	ed db       	rcall	.-2086   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
			gb_flash_write_bus_cycle(address, 0xFF); // Length
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
     c8a:	ff ef       	ldi	r31, 0xFF	; 255
     c8c:	8f 1a       	sub	r8, r31
     c8e:	9f 0a       	sbc	r9, r31
     c90:	81 14       	cp	r8, r1
     c92:	21 e0       	ldi	r18, 0x01	; 1
     c94:	92 06       	cpc	r9, r18
     c96:	91 f7       	brne	.-28     	; 0xc7c <main+0x552>
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	d8 1a       	sub	r13, r24
     c9c:	e8 0a       	sbc	r14, r24
     c9e:	f8 0a       	sbc	r15, r24
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-256, 0x2A);
     ca0:	c6 01       	movw	r24, r12
     ca2:	9a 95       	dec	r25
     ca4:	6a e2       	ldi	r22, 0x2A	; 42
     ca6:	de db       	rcall	.-2116   	; 0x464 <gb_flash_write_bus_cycle>
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
     ca8:	86 01       	movw	r16, r12
     caa:	01 50       	subi	r16, 0x01	; 1
     cac:	11 09       	sbc	r17, r1
     cae:	c8 01       	movw	r24, r16
     cb0:	d0 db       	rcall	.-2144   	; 0x452 <gb_flash_read_byte>
			while (dataVerify != receivedBuffer[255]) {
     cb2:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <receivedBuffer+0xff>
     cb6:	89 17       	cp	r24, r25
     cb8:	09 f4       	brne	.+2      	; 0xcbc <main+0x592>
     cba:	be c1       	rjmp	.+892    	; 0x1038 <main+0x90e>
				dataVerify = gb_flash_read_byte(address-1);
     cbc:	c8 01       	movw	r24, r16
     cbe:	c9 db       	rcall	.-2158   	; 0x452 <gb_flash_read_byte>
     cc0:	9d e0       	ldi	r25, 0x0D	; 13
     cc2:	9a 95       	dec	r25
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <main+0x598>
     cc6:	00 00       	nop
     cc8:	f4 cf       	rjmp	.-24     	; 0xcb2 <main+0x588>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Nintendo Power 1MB Cart, Write 128 bytes to flash
		else if (receivedChar == GB_FLASH_WRITE_NP_128BYTE) {
     cca:	8a 35       	cpi	r24, 0x5A	; 90
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <main+0x5a6>
     cce:	b9 c0       	rjmp	.+370    	; 0xe42 <main+0x718>
			usart_read_bytes(128);
     cd0:	80 e8       	ldi	r24, 0x80	; 128
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	ca d9       	rcall	.-3180   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
     cd6:	93 9a       	sbi	0x12, 3	; 18
			
			// Enable flash chip access
			gb_flash_write_bus_cycle(0x120, 0x09);
     cd8:	69 e0       	ldi	r22, 0x09	; 9
     cda:	80 e2       	ldi	r24, 0x20	; 32
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	c2 db       	rcall	.-2172   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x121, 0xaa);
     ce0:	6a ea       	ldi	r22, 0xAA	; 170
     ce2:	81 e2       	ldi	r24, 0x21	; 33
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	be db       	rcall	.-2180   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x122, 0x55);
     ce8:	65 e5       	ldi	r22, 0x55	; 85
     cea:	82 e2       	ldi	r24, 0x22	; 34
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	ba db       	rcall	.-2188   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     cf0:	65 ea       	ldi	r22, 0xA5	; 165
     cf2:	8f e3       	ldi	r24, 0x3F	; 63
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	b6 db       	rcall	.-2196   	; 0x464 <gb_flash_write_bus_cycle>
     cf8:	ed e0       	ldi	r30, 0x0D	; 13
     cfa:	ea 95       	dec	r30
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <main+0x5d0>
     cfe:	00 00       	nop
			_delay_us(5);
			
			// Re-Enable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x11);
     d00:	61 e1       	ldi	r22, 0x11	; 17
     d02:	80 e2       	ldi	r24, 0x20	; 32
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	ae db       	rcall	.-2212   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     d08:	65 ea       	ldi	r22, 0xA5	; 165
     d0a:	8f e3       	ldi	r24, 0x3F	; 63
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	aa db       	rcall	.-2220   	; 0x464 <gb_flash_write_bus_cycle>
     d10:	fd e0       	ldi	r31, 0x0D	; 13
     d12:	fa 95       	dec	r31
     d14:	f1 f7       	brne	.-4      	; 0xd12 <main+0x5e8>
     d16:	00 00       	nop
			_delay_us(5);
			
			// Bank 1 for commands
			gb_flash_write_bus_cycle(0x2100, 0x01);
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	91 e2       	ldi	r25, 0x21	; 33
     d1e:	a2 db       	rcall	.-2236   	; 0x464 <gb_flash_write_bus_cycle>
     d20:	2d e0       	ldi	r18, 0x0D	; 13
     d22:	2a 95       	dec	r18
     d24:	f1 f7       	brne	.-4      	; 0xd22 <main+0x5f8>
     d26:	00 00       	nop
			_delay_us(5);
			
			
			// Write setup
			gb_flash_write_bus_cycle(0x120, 0x0F);
     d28:	6f e0       	ldi	r22, 0x0F	; 15
     d2a:	80 e2       	ldi	r24, 0x20	; 32
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	9a db       	rcall	.-2252   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
     d30:	65 e5       	ldi	r22, 0x55	; 85
     d32:	85 e2       	ldi	r24, 0x25	; 37
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	96 db       	rcall	.-2260   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
     d38:	65 e5       	ldi	r22, 0x55	; 85
     d3a:	86 e2       	ldi	r24, 0x26	; 38
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	92 db       	rcall	.-2268   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xAA);
     d40:	6a ea       	ldi	r22, 0xAA	; 170
     d42:	87 e2       	ldi	r24, 0x27	; 39
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	8e db       	rcall	.-2276   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
     d48:	65 ea       	ldi	r22, 0xA5	; 165
     d4a:	8f e3       	ldi	r24, 0x3F	; 63
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	8a db       	rcall	.-2284   	; 0x464 <gb_flash_write_bus_cycle>
     d50:	8d e0       	ldi	r24, 0x0D	; 13
     d52:	8a 95       	dec	r24
     d54:	f1 f7       	brne	.-4      	; 0xd52 <main+0x628>
     d56:	00 00       	nop
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
     d58:	6f e0       	ldi	r22, 0x0F	; 15
     d5a:	80 e2       	ldi	r24, 0x20	; 32
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	82 db       	rcall	.-2300   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x2A);
     d60:	6a e2       	ldi	r22, 0x2A	; 42
     d62:	85 e2       	ldi	r24, 0x25	; 37
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	7e db       	rcall	.-2308   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0xAA);
     d68:	6a ea       	ldi	r22, 0xAA	; 170
     d6a:	86 e2       	ldi	r24, 0x26	; 38
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	7a db       	rcall	.-2316   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0x55);
     d70:	65 e5       	ldi	r22, 0x55	; 85
     d72:	87 e2       	ldi	r24, 0x27	; 39
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	76 db       	rcall	.-2324   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
     d78:	65 ea       	ldi	r22, 0xA5	; 165
     d7a:	8f e3       	ldi	r24, 0x3F	; 63
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	72 db       	rcall	.-2332   	; 0x464 <gb_flash_write_bus_cycle>
     d80:	9d e0       	ldi	r25, 0x0D	; 13
     d82:	9a 95       	dec	r25
     d84:	f1 f7       	brne	.-4      	; 0xd82 <main+0x658>
     d86:	00 00       	nop
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
     d88:	6f e0       	ldi	r22, 0x0F	; 15
     d8a:	80 e2       	ldi	r24, 0x20	; 32
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	6a db       	rcall	.-2348   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
     d90:	65 e5       	ldi	r22, 0x55	; 85
     d92:	85 e2       	ldi	r24, 0x25	; 37
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	66 db       	rcall	.-2356   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
     d98:	65 e5       	ldi	r22, 0x55	; 85
     d9a:	86 e2       	ldi	r24, 0x26	; 38
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	62 db       	rcall	.-2364   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xA0);
     da0:	60 ea       	ldi	r22, 0xA0	; 160
     da2:	87 e2       	ldi	r24, 0x27	; 39
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	5e db       	rcall	.-2372   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
     da8:	65 ea       	ldi	r22, 0xA5	; 165
     daa:	8f e3       	ldi	r24, 0x3F	; 63
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	5a db       	rcall	.-2380   	; 0x464 <gb_flash_write_bus_cycle>
     db0:	ed e0       	ldi	r30, 0x0D	; 13
     db2:	ea 95       	dec	r30
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <main+0x688>
     db6:	00 00       	nop
			_delay_us(5);
			
			// Set bank back
			write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	91 e2       	ldi	r25, 0x21	; 33
     dc2:	8c d9       	rcall	.-3304   	; 0xdc <write_8bit_data>
     dc4:	fd e0       	ldi	r31, 0x0D	; 13
     dc6:	fa 95       	dec	r31
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <main+0x69c>
     dca:	00 00       	nop
			_delay_us(5);
			
			// Disable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x10);
     dcc:	60 e1       	ldi	r22, 0x10	; 16
     dce:	80 e2       	ldi	r24, 0x20	; 32
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	48 db       	rcall	.-2416   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     dd4:	65 ea       	ldi	r22, 0xA5	; 165
     dd6:	8f e3       	ldi	r24, 0x3F	; 63
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	44 db       	rcall	.-2424   	; 0x464 <gb_flash_write_bus_cycle>
     ddc:	2d e0       	ldi	r18, 0x0D	; 13
     dde:	2a 95       	dec	r18
     de0:	f1 f7       	brne	.-4      	; 0xdde <main+0x6b4>
     de2:	00 00       	nop
			_delay_us(5);
			
			// Undo Wakeup
			gb_flash_write_bus_cycle(0x120, 0x08);
     de4:	68 e0       	ldi	r22, 0x08	; 8
     de6:	80 e2       	ldi	r24, 0x20	; 32
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	3c db       	rcall	.-2440   	; 0x464 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     dec:	65 ea       	ldi	r22, 0xA5	; 165
     dee:	8f e3       	ldi	r24, 0x3F	; 63
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	38 db       	rcall	.-2448   	; 0x464 <gb_flash_write_bus_cycle>
     df4:	8d e0       	ldi	r24, 0x0D	; 13
     df6:	8a 95       	dec	r24
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <main+0x6cc>
     dfa:	00 00       	nop
     dfc:	02 e7       	ldi	r16, 0x72	; 114
     dfe:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(5);
			
			
			// Write data
			for (uint8_t x = 0; x < 128; x++) {
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	02 3f       	cpi	r16, 0xF2	; 242
     e04:	18 07       	cpc	r17, r24
     e06:	79 f0       	breq	.+30     	; 0xe26 <main+0x6fc>
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     e08:	f8 01       	movw	r30, r16
     e0a:	61 91       	ld	r22, Z+
     e0c:	8f 01       	movw	r16, r30
     e0e:	c6 01       	movw	r24, r12
     e10:	29 db       	rcall	.-2478   	; 0x464 <gb_flash_write_bus_cycle>
     e12:	fd e0       	ldi	r31, 0x0D	; 13
     e14:	fa 95       	dec	r31
     e16:	f1 f7       	brne	.-4      	; 0xe14 <main+0x6ea>
     e18:	00 00       	nop
				_delay_us(5);
				address++;
     e1a:	2f ef       	ldi	r18, 0xFF	; 255
     e1c:	c2 1a       	sub	r12, r18
     e1e:	d2 0a       	sbc	r13, r18
     e20:	e2 0a       	sbc	r14, r18
     e22:	f2 0a       	sbc	r15, r18
     e24:	ed cf       	rjmp	.-38     	; 0xe00 <main+0x6d6>
			}
			
			// Write buffer to flash
			address--;
			gb_flash_write_bus_cycle(address, 0xFF);
     e26:	6f ef       	ldi	r22, 0xFF	; 255
     e28:	d7 01       	movw	r26, r14
     e2a:	c6 01       	movw	r24, r12
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	a1 09       	sbc	r26, r1
     e30:	b1 09       	sbc	r27, r1
     e32:	18 db       	rcall	.-2512   	; 0x464 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e34:	ef e1       	ldi	r30, 0x1F	; 31
     e36:	fe e4       	ldi	r31, 0x4E	; 78
     e38:	31 97       	sbiw	r30, 0x01	; 1
     e3a:	f1 f7       	brne	.-4      	; 0xe38 <main+0x70e>
     e3c:	00 c0       	rjmp	.+0      	; 0xe3e <main+0x714>
     e3e:	00 00       	nop
     e40:	fb c0       	rjmp	.+502    	; 0x1038 <main+0x90e>
		}
		
		
		// ---------- GBA FLASH CARTS ----------
		// Write 24 bit address, 16 bit data and pulse a pin
		else if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
     e42:	8e 36       	cpi	r24, 0x6E	; 110
     e44:	19 f5       	brne	.+70     	; 0xe8c <main+0x762>
			usart_read_chars(); // Read address
     e46:	26 d9       	rcall	.-3508   	; 0x94 <usart_read_chars>
			uint32_t flashAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     e48:	40 e1       	ldi	r20, 0x10	; 16
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	82 e7       	ldi	r24, 0x72	; 114
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	ec d1       	rcall	.+984    	; 0x122e <strtol>
     e56:	4b 01       	movw	r8, r22
     e58:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for byte
     e5a:	ff d8       	rcall	.-3586   	; 0x5a <USART_Receive>
     e5c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <receivedChar>
			if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
     e60:	8e 36       	cpi	r24, 0x6E	; 110
     e62:	09 f0       	breq	.+2      	; 0xe66 <main+0x73c>
     e64:	6c cc       	rjmp	.-1832   	; 0x73e <main+0x14>
				usart_read_chars(); // Read data
     e66:	16 d9       	rcall	.-3540   	; 0x94 <usart_read_chars>
				uint16_t flashByte = strtol(receivedBuffer, NULL, 16); // Convert data byte in hex to dec
     e68:	40 e1       	ldi	r20, 0x10	; 16
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	82 e7       	ldi	r24, 0x72	; 114
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	dc d1       	rcall	.+952    	; 0x122e <strtol>
				
				PORTD |= (1<<ACTIVITY_LED);
     e76:	93 9a       	sbi	0x12, 3	; 18
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
     e78:	c4 bb       	out	0x14, r28	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
     e7a:	ca bb       	out	0x1a, r28	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
     e7c:	c7 bb       	out	0x17, r28	; 23
				gba_flash_write_bus_cycle(flashAddress, flashByte);
     e7e:	ab 01       	movw	r20, r22
     e80:	c5 01       	movw	r24, r10
     e82:	b4 01       	movw	r22, r8
     e84:	84 db       	rcall	.-2296   	; 0x58e <gba_flash_write_bus_cycle>
				PORTD &= ~(1<<ACTIVITY_LED);
     e86:	93 98       	cbi	0x12, 3	; 18
				
				USART_Transmit(SEND_ACK); // Send back acknowledgement
     e88:	81 e3       	ldi	r24, 0x31	; 49
     e8a:	b2 c1       	rjmp	.+868    	; 0x11f0 <main+0xac6>
			}
		}
		
		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
     e8c:	81 37       	cpi	r24, 0x71	; 113
     e8e:	11 f0       	breq	.+4      	; 0xe94 <main+0x76a>
     e90:	84 37       	cpi	r24, 0x74	; 116
     e92:	c9 f5       	brne	.+114    	; 0xf06 <main+0x7dc>
			PORTD |= (1<<ACTIVITY_LED);
     e94:	93 9a       	sbi	0x12, 3	; 18
			
			int readLength = 64;
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
     e96:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <receivedChar>
     e9a:	84 37       	cpi	r24, 0x74	; 116
     e9c:	19 f4       	brne	.+6      	; 0xea4 <main+0x77a>
				readLength = 256;
     e9e:	00 e0       	ldi	r16, 0x00	; 0
     ea0:	11 e0       	ldi	r17, 0x01	; 1
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <main+0x77e>
		
		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
			PORTD |= (1<<ACTIVITY_LED);
			
			int readLength = 64;
     ea4:	00 e4       	ldi	r16, 0x40	; 64
     ea6:	10 e0       	ldi	r17, 0x00	; 0
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
				readLength = 256;
			}
			usart_read_bytes(readLength);
     ea8:	c8 01       	movw	r24, r16
     eaa:	df d8       	rcall	.-3650   	; 0x6a <usart_read_bytes>
     eac:	42 e7       	ldi	r20, 0x72	; 114
     eae:	a4 2e       	mov	r10, r20
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	b4 2e       	mov	r11, r20
     eb4:	16 01       	movw	r2, r12
     eb6:	27 01       	movw	r4, r14
			
			for (int x = 0; x < readLength; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_byte(address, combinedBytes, D0D1_SWAPPED);
     eb8:	f5 01       	movw	r30, r10
     eba:	41 81       	ldd	r20, Z+1	; 0x01
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	54 2f       	mov	r21, r20
     ec0:	44 27       	eor	r20, r20
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2b       	or	r20, r24
     ec6:	21 e0       	ldi	r18, 0x01	; 1
     ec8:	c2 01       	movw	r24, r4
     eca:	b1 01       	movw	r22, r2
     ecc:	d6 db       	rcall	.-2132   	; 0x67a <gba_flash_write_byte>
				address++;
     ece:	ff ef       	ldi	r31, 0xFF	; 255
     ed0:	2f 1a       	sub	r2, r31
     ed2:	3f 0a       	sbc	r3, r31
     ed4:	4f 0a       	sbc	r4, r31
     ed6:	5f 0a       	sbc	r5, r31
     ed8:	22 e0       	ldi	r18, 0x02	; 2
     eda:	a2 0e       	add	r10, r18
     edc:	b1 1c       	adc	r11, r1
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
				readLength = 256;
			}
			usart_read_bytes(readLength);
			
			for (int x = 0; x < readLength; x += 2) {
     ede:	c5 01       	movw	r24, r10
     ee0:	82 57       	subi	r24, 0x72	; 114
     ee2:	90 40       	sbci	r25, 0x00	; 0
     ee4:	80 17       	cp	r24, r16
     ee6:	91 07       	cpc	r25, r17
     ee8:	3c f3       	brlt	.-50     	; 0xeb8 <main+0x78e>
     eea:	8f ef       	ldi	r24, 0xFF	; 255
     eec:	c8 1a       	sub	r12, r24
     eee:	d8 0a       	sbc	r13, r24
     ef0:	e8 0a       	sbc	r14, r24
     ef2:	f8 0a       	sbc	r15, r24
     ef4:	01 50       	subi	r16, 0x01	; 1
     ef6:	11 09       	sbc	r17, r1
     ef8:	16 95       	lsr	r17
     efa:	07 95       	ror	r16
     efc:	c0 0e       	add	r12, r16
     efe:	d1 1e       	adc	r13, r17
     f00:	e1 1c       	adc	r14, r1
     f02:	f1 1c       	adc	r15, r1
     f04:	99 c0       	rjmp	.+306    	; 0x1038 <main+0x90e>
			
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Write 256 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_256BYTE) {
     f06:	86 36       	cpi	r24, 0x66	; 102
     f08:	21 f5       	brne	.+72     	; 0xf52 <main+0x828>
			PORTD |= (1<<ACTIVITY_LED);
     f0a:	93 9a       	sbi	0x12, 3	; 18
			
			int readLength = 256;
			usart_read_bytes(readLength);
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	ac d8       	rcall	.-3752   	; 0x6a <usart_read_bytes>
     f12:	02 e7       	ldi	r16, 0x72	; 114
     f14:	10 e0       	ldi	r17, 0x00	; 0
     f16:	46 01       	movw	r8, r12
     f18:	57 01       	movw	r10, r14
			
			for (int x = 0; x < readLength; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_byte(address, combinedBytes, D0D1_NOT_SWAPPED);
     f1a:	f8 01       	movw	r30, r16
     f1c:	41 81       	ldd	r20, Z+1	; 0x01
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	54 2f       	mov	r21, r20
     f22:	44 27       	eor	r20, r20
     f24:	80 81       	ld	r24, Z
     f26:	48 2b       	or	r20, r24
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	c5 01       	movw	r24, r10
     f2c:	b4 01       	movw	r22, r8
     f2e:	a5 db       	rcall	.-2230   	; 0x67a <gba_flash_write_byte>
				address++;
     f30:	ff ef       	ldi	r31, 0xFF	; 255
     f32:	8f 1a       	sub	r8, r31
     f34:	9f 0a       	sbc	r9, r31
     f36:	af 0a       	sbc	r10, r31
     f38:	bf 0a       	sbc	r11, r31
     f3a:	0e 5f       	subi	r16, 0xFE	; 254
     f3c:	1f 4f       	sbci	r17, 0xFF	; 255
			PORTD |= (1<<ACTIVITY_LED);
			
			int readLength = 256;
			usart_read_bytes(readLength);
			
			for (int x = 0; x < readLength; x += 2) {
     f3e:	21 e0       	ldi	r18, 0x01	; 1
     f40:	02 37       	cpi	r16, 0x72	; 114
     f42:	12 07       	cpc	r17, r18
     f44:	51 f7       	brne	.-44     	; 0xf1a <main+0x7f0>
     f46:	80 e8       	ldi	r24, 0x80	; 128
     f48:	c8 0e       	add	r12, r24
     f4a:	d1 1c       	adc	r13, r1
     f4c:	e1 1c       	adc	r14, r1
     f4e:	f1 1c       	adc	r15, r1
     f50:	73 c0       	rjmp	.+230    	; 0x1038 <main+0x90e>
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Intel flash command based chips
		// Write 64 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE) {
     f52:	8c 36       	cpi	r24, 0x6C	; 108
     f54:	09 f0       	breq	.+2      	; 0xf58 <main+0x82e>
     f56:	72 c0       	rjmp	.+228    	; 0x103c <main+0x912>
			PORTD |= (1<<ACTIVITY_LED);
     f58:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(64);
     f5a:	80 e4       	ldi	r24, 0x40	; 64
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	85 d8       	rcall	.-3830   	; 0x6a <usart_read_bytes>
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
     f60:	c4 bb       	out	0x14, r28	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
     f62:	ca bb       	out	0x1a, r28	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
     f64:	c7 bb       	out	0x17, r28	; 23
			
			// Unlock
			gba_flash_write_bus_cycle(address, 0x60);
     f66:	40 e6       	ldi	r20, 0x60	; 96
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	c7 01       	movw	r24, r14
     f6c:	b6 01       	movw	r22, r12
     f6e:	0f db       	rcall	.-2530   	; 0x58e <gba_flash_write_bus_cycle>
			gba_flash_write_bus_cycle(address, 0xD0);
     f70:	40 ed       	ldi	r20, 0xD0	; 208
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	c7 01       	movw	r24, r14
     f76:	b6 01       	movw	r22, r12
     f78:	0a db       	rcall	.-2540   	; 0x58e <gba_flash_write_bus_cycle>
			
			// Buffered write command
			gba_flash_write_bus_cycle(address, 0xE8);
     f7a:	48 ee       	ldi	r20, 0xE8	; 232
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	c7 01       	movw	r24, r14
     f80:	b6 01       	movw	r22, r12
     f82:	05 db       	rcall	.-2550   	; 0x58e <gba_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f84:	95 e8       	ldi	r25, 0x85	; 133
     f86:	9a 95       	dec	r25
     f88:	f1 f7       	brne	.-4      	; 0xf86 <main+0x85c>
     f8a:	00 00       	nop
			_delay_us(50);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			uint16_t dataVerify = gba_read_16bit_data(address);
     f8c:	c7 01       	movw	r24, r14
     f8e:	b6 01       	movw	r22, r12
     f90:	d9 d8       	rcall	.-3662   	; 0x144 <gba_read_16bit_data>
			while (dataVerify != 0x0080) {
     f92:	80 38       	cpi	r24, 0x80	; 128
     f94:	91 05       	cpc	r25, r1
     f96:	41 f0       	breq	.+16     	; 0xfa8 <main+0x87e>
				dataVerify = gba_read_16bit_data(address);
     f98:	c7 01       	movw	r24, r14
     f9a:	b6 01       	movw	r22, r12
     f9c:	d3 d8       	rcall	.-3674   	; 0x144 <gba_read_16bit_data>
     f9e:	e5 e8       	ldi	r30, 0x85	; 133
     fa0:	ea 95       	dec	r30
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <main+0x876>
     fa4:	00 00       	nop
     fa6:	f5 cf       	rjmp	.-22     	; 0xf92 <main+0x868>
				_delay_us(50);
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
     fa8:	c4 bb       	out	0x14, r28	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
     faa:	ca bb       	out	0x1a, r28	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
     fac:	c7 bb       	out	0x17, r28	; 23
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
     fae:	4f e1       	ldi	r20, 0x1F	; 31
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	c7 01       	movw	r24, r14
     fb4:	b6 01       	movw	r22, r12
     fb6:	eb da       	rcall	.-2602   	; 0x58e <gba_flash_write_bus_cycle>
     fb8:	02 e7       	ldi	r16, 0x72	; 114
     fba:	10 e0       	ldi	r17, 0x00	; 0
     fbc:	46 01       	movw	r8, r12
     fbe:	57 01       	movw	r10, r14
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_bus_cycle(address, combinedBytes);
     fc0:	f8 01       	movw	r30, r16
     fc2:	41 81       	ldd	r20, Z+1	; 0x01
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	54 2f       	mov	r21, r20
     fc8:	44 27       	eor	r20, r20
     fca:	80 81       	ld	r24, Z
     fcc:	48 2b       	or	r20, r24
     fce:	c5 01       	movw	r24, r10
     fd0:	b4 01       	movw	r22, r8
     fd2:	dd da       	rcall	.-2630   	; 0x58e <gba_flash_write_bus_cycle>
				address++;
     fd4:	ff ef       	ldi	r31, 0xFF	; 255
     fd6:	8f 1a       	sub	r8, r31
     fd8:	9f 0a       	sbc	r9, r31
     fda:	af 0a       	sbc	r10, r31
     fdc:	bf 0a       	sbc	r11, r31
     fde:	0e 5f       	subi	r16, 0xFE	; 254
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
     fe2:	82 eb       	ldi	r24, 0xB2	; 178
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	80 17       	cp	r24, r16
     fe8:	91 07       	cpc	r25, r17
     fea:	51 f7       	brne	.-44     	; 0xfc0 <main+0x896>
     fec:	90 e2       	ldi	r25, 0x20	; 32
     fee:	c9 0e       	add	r12, r25
     ff0:	d1 1c       	adc	r13, r1
     ff2:	e1 1c       	adc	r14, r1
     ff4:	f1 1c       	adc	r15, r1
				gba_flash_write_bus_cycle(address, combinedBytes);
				address++;
			}
			
			// Write buffer to flash
			gba_flash_write_bus_cycle(address, 0xD0);
     ff6:	40 ed       	ldi	r20, 0xD0	; 208
     ff8:	50 e0       	ldi	r21, 0x00	; 0
     ffa:	c7 01       	movw	r24, r14
     ffc:	b6 01       	movw	r22, r12
     ffe:	c7 da       	rcall	.-2674   	; 0x58e <gba_flash_write_bus_cycle>
    1000:	ef e6       	ldi	r30, 0x6F	; 111
    1002:	f3 e0       	ldi	r31, 0x03	; 3
    1004:	31 97       	sbiw	r30, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <main+0x8da>
    1008:	00 c0       	rjmp	.+0      	; 0x100a <main+0x8e0>
    100a:	00 00       	nop
			_delay_us(440);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			dataVerify = gba_read_16bit_data(address);
    100c:	c7 01       	movw	r24, r14
    100e:	b6 01       	movw	r22, r12
    1010:	99 d8       	rcall	.-3790   	; 0x144 <gba_read_16bit_data>
			while (dataVerify != 0x0080) {
    1012:	80 38       	cpi	r24, 0x80	; 128
    1014:	91 05       	cpc	r25, r1
    1016:	41 f0       	breq	.+16     	; 0x1028 <main+0x8fe>
				dataVerify = gba_read_16bit_data(address);
    1018:	c7 01       	movw	r24, r14
    101a:	b6 01       	movw	r22, r12
    101c:	93 d8       	rcall	.-3802   	; 0x144 <gba_read_16bit_data>
    101e:	f5 e8       	ldi	r31, 0x85	; 133
    1020:	fa 95       	dec	r31
    1022:	f1 f7       	brne	.-4      	; 0x1020 <main+0x8f6>
    1024:	00 00       	nop
    1026:	f5 cf       	rjmp	.-22     	; 0x1012 <main+0x8e8>
				_delay_us(50);
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    1028:	c4 bb       	out	0x14, r28	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    102a:	ca bb       	out	0x1a, r28	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    102c:	c7 bb       	out	0x17, r28	; 23
			
			// Back to reading mode
			gba_flash_write_bus_cycle(address, 0xFF);
    102e:	4f ef       	ldi	r20, 0xFF	; 255
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	c7 01       	movw	r24, r14
    1034:	b6 01       	movw	r22, r12
    1036:	ab da       	rcall	.-2730   	; 0x58e <gba_flash_write_bus_cycle>
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
    1038:	81 e3       	ldi	r24, 0x31	; 49
    103a:	c3 c0       	rjmp	.+390    	; 0x11c2 <main+0xa98>
		
		
		// ---------- General commands ----------
		// Set any pin as input/output
		// Reads the DDR/PORT (e.g. DDRB/PORTB is 'B') and the hex value that represents pins to set to an input (e.g. PB7 is 0x80)
		else if (receivedChar == SET_INPUT || receivedChar == SET_OUTPUT) {
    103c:	89 34       	cpi	r24, 0x49	; 73
    103e:	19 f0       	breq	.+6      	; 0x1046 <main+0x91c>
    1040:	8f 34       	cpi	r24, 0x4F	; 79
    1042:	09 f0       	breq	.+2      	; 0x1046 <main+0x91c>
    1044:	50 c0       	rjmp	.+160    	; 0x10e6 <main+0x9bc>
			char portChar = USART_Receive();
    1046:	09 d8       	rcall	.-4078   	; 0x5a <USART_Receive>
    1048:	18 2f       	mov	r17, r24
			usart_read_chars();
    104a:	24 d8       	rcall	.-4024   	; 0x94 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
    104c:	40 e1       	ldi	r20, 0x10	; 16
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	82 e7       	ldi	r24, 0x72	; 114
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	ea d0       	rcall	.+468    	; 0x122e <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
    105a:	93 9a       	sbi	0x12, 3	; 18
			if (receivedChar == SET_INPUT) {
    105c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <receivedChar>
    1060:	89 34       	cpi	r24, 0x49	; 73
    1062:	f9 f4       	brne	.+62     	; 0x10a2 <main+0x978>
				if (portChar == 'A') {
    1064:	11 34       	cpi	r17, 0x41	; 65
    1066:	21 f4       	brne	.+8      	; 0x1070 <main+0x946>
					DDRA &= ~(setValue);
    1068:	8a b3       	in	r24, 0x1a	; 26
    106a:	60 95       	com	r22
    106c:	68 23       	and	r22, r24
    106e:	20 c0       	rjmp	.+64     	; 0x10b0 <main+0x986>
				}
				else if (portChar == 'B') {
    1070:	12 34       	cpi	r17, 0x42	; 66
    1072:	21 f4       	brne	.+8      	; 0x107c <main+0x952>
					DDRB &= ~(setValue);
    1074:	87 b3       	in	r24, 0x17	; 23
    1076:	60 95       	com	r22
    1078:	68 23       	and	r22, r24
    107a:	20 c0       	rjmp	.+64     	; 0x10bc <main+0x992>
				}
				else if (portChar == 'C') {
    107c:	13 34       	cpi	r17, 0x43	; 67
    107e:	21 f4       	brne	.+8      	; 0x1088 <main+0x95e>
					DDRC &= ~(setValue);
    1080:	84 b3       	in	r24, 0x14	; 20
    1082:	60 95       	com	r22
    1084:	68 23       	and	r22, r24
    1086:	20 c0       	rjmp	.+64     	; 0x10c8 <main+0x99e>
				}
				else if (portChar == 'D') {
    1088:	14 34       	cpi	r17, 0x44	; 68
    108a:	21 f4       	brne	.+8      	; 0x1094 <main+0x96a>
					DDRD &= ~(setValue);
    108c:	81 b3       	in	r24, 0x11	; 17
    108e:	60 95       	com	r22
    1090:	68 23       	and	r22, r24
    1092:	20 c0       	rjmp	.+64     	; 0x10d4 <main+0x9aa>
				}
				else if (portChar == 'E') {
    1094:	15 34       	cpi	r17, 0x45	; 69
    1096:	09 f0       	breq	.+2      	; 0x109a <main+0x970>
    1098:	95 c0       	rjmp	.+298    	; 0x11c4 <main+0xa9a>
					DDRE &= ~(setValue);
    109a:	86 b1       	in	r24, 0x06	; 6
    109c:	60 95       	com	r22
    109e:	68 23       	and	r22, r24
    10a0:	20 c0       	rjmp	.+64     	; 0x10e2 <main+0x9b8>
				}
			}
			else if (receivedChar == SET_OUTPUT) {
    10a2:	8f 34       	cpi	r24, 0x4F	; 79
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <main+0x97e>
    10a6:	8e c0       	rjmp	.+284    	; 0x11c4 <main+0xa9a>
				if (portChar == 'A') {
    10a8:	11 34       	cpi	r17, 0x41	; 65
    10aa:	21 f4       	brne	.+8      	; 0x10b4 <main+0x98a>
					DDRA |= (setValue);
    10ac:	8a b3       	in	r24, 0x1a	; 26
    10ae:	68 2b       	or	r22, r24
    10b0:	6a bb       	out	0x1a, r22	; 26
    10b2:	88 c0       	rjmp	.+272    	; 0x11c4 <main+0xa9a>
				}
				else if (portChar == 'B') {
    10b4:	12 34       	cpi	r17, 0x42	; 66
    10b6:	21 f4       	brne	.+8      	; 0x10c0 <main+0x996>
					DDRB |= (setValue);
    10b8:	87 b3       	in	r24, 0x17	; 23
    10ba:	68 2b       	or	r22, r24
    10bc:	67 bb       	out	0x17, r22	; 23
    10be:	82 c0       	rjmp	.+260    	; 0x11c4 <main+0xa9a>
				}
				else if (portChar == 'C') {
    10c0:	13 34       	cpi	r17, 0x43	; 67
    10c2:	21 f4       	brne	.+8      	; 0x10cc <main+0x9a2>
					DDRC |= (setValue);
    10c4:	84 b3       	in	r24, 0x14	; 20
    10c6:	68 2b       	or	r22, r24
    10c8:	64 bb       	out	0x14, r22	; 20
    10ca:	7c c0       	rjmp	.+248    	; 0x11c4 <main+0xa9a>
				}
				else if (portChar == 'D') {
    10cc:	14 34       	cpi	r17, 0x44	; 68
    10ce:	21 f4       	brne	.+8      	; 0x10d8 <main+0x9ae>
					DDRD |= (setValue);
    10d0:	81 b3       	in	r24, 0x11	; 17
    10d2:	68 2b       	or	r22, r24
    10d4:	61 bb       	out	0x11, r22	; 17
    10d6:	76 c0       	rjmp	.+236    	; 0x11c4 <main+0xa9a>
				}
				else if (portChar == 'E') {
    10d8:	15 34       	cpi	r17, 0x45	; 69
    10da:	09 f0       	breq	.+2      	; 0x10de <main+0x9b4>
    10dc:	73 c0       	rjmp	.+230    	; 0x11c4 <main+0xa9a>
					DDRE |= (setValue);
    10de:	86 b1       	in	r24, 0x06	; 6
    10e0:	68 2b       	or	r22, r24
    10e2:	66 b9       	out	0x06, r22	; 6
    10e4:	6f c0       	rjmp	.+222    	; 0x11c4 <main+0xa9a>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as low
		else if (receivedChar == SET_OUTPUT_LOW) {
    10e6:	8c 34       	cpi	r24, 0x4C	; 76
    10e8:	51 f5       	brne	.+84     	; 0x113e <main+0xa14>
			char portChar = USART_Receive();			
    10ea:	b7 d7       	rcall	.+3950   	; 0x205a <__TEXT_REGION_LENGTH__+0x5a>
    10ec:	18 2f       	mov	r17, r24
			usart_read_chars();
    10ee:	d2 d7       	rcall	.+4004   	; 0x2094 <__TEXT_REGION_LENGTH__+0x94>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
    10f0:	40 e1       	ldi	r20, 0x10	; 16
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	82 e7       	ldi	r24, 0x72	; 114
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	98 d0       	rcall	.+304    	; 0x122e <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
    10fe:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
    1100:	11 34       	cpi	r17, 0x41	; 65
    1102:	21 f4       	brne	.+8      	; 0x110c <main+0x9e2>
				PORTA &= ~(setValue);
    1104:	8b b3       	in	r24, 0x1b	; 27
    1106:	60 95       	com	r22
    1108:	68 23       	and	r22, r24
    110a:	2a c0       	rjmp	.+84     	; 0x1160 <main+0xa36>
			}
			else if (portChar == 'B') {
    110c:	12 34       	cpi	r17, 0x42	; 66
    110e:	21 f4       	brne	.+8      	; 0x1118 <main+0x9ee>
				PORTB &= ~(setValue);
    1110:	88 b3       	in	r24, 0x18	; 24
    1112:	60 95       	com	r22
    1114:	68 23       	and	r22, r24
    1116:	2a c0       	rjmp	.+84     	; 0x116c <main+0xa42>
			}
			else if (portChar == 'C') {
    1118:	13 34       	cpi	r17, 0x43	; 67
    111a:	21 f4       	brne	.+8      	; 0x1124 <main+0x9fa>
				PORTC &= ~(setValue);
    111c:	85 b3       	in	r24, 0x15	; 21
    111e:	60 95       	com	r22
    1120:	68 23       	and	r22, r24
    1122:	2a c0       	rjmp	.+84     	; 0x1178 <main+0xa4e>
			}
			else if (portChar == 'D') {
    1124:	14 34       	cpi	r17, 0x44	; 68
    1126:	21 f4       	brne	.+8      	; 0x1130 <main+0xa06>
				PORTD &= ~(setValue);
    1128:	82 b3       	in	r24, 0x12	; 18
    112a:	60 95       	com	r22
    112c:	68 23       	and	r22, r24
    112e:	2a c0       	rjmp	.+84     	; 0x1184 <main+0xa5a>
			}
			else if (portChar == 'E') {
    1130:	15 34       	cpi	r17, 0x45	; 69
    1132:	09 f0       	breq	.+2      	; 0x1136 <main+0xa0c>
    1134:	47 c0       	rjmp	.+142    	; 0x11c4 <main+0xa9a>
				PORTE &= ~(setValue);
    1136:	87 b1       	in	r24, 0x07	; 7
    1138:	60 95       	com	r22
    113a:	68 23       	and	r22, r24
    113c:	29 c0       	rjmp	.+82     	; 0x1190 <main+0xa66>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as high
		else if (receivedChar == SET_OUTPUT_HIGH) {
    113e:	88 34       	cpi	r24, 0x48	; 72
    1140:	49 f5       	brne	.+82     	; 0x1194 <main+0xa6a>
			char portChar = USART_Receive();			
    1142:	8b d7       	rcall	.+3862   	; 0x205a <__TEXT_REGION_LENGTH__+0x5a>
    1144:	18 2f       	mov	r17, r24
			usart_read_chars();
    1146:	a6 d7       	rcall	.+3916   	; 0x2094 <__TEXT_REGION_LENGTH__+0x94>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
    1148:	40 e1       	ldi	r20, 0x10	; 16
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	82 e7       	ldi	r24, 0x72	; 114
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	6c d0       	rcall	.+216    	; 0x122e <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
    1156:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
    1158:	11 34       	cpi	r17, 0x41	; 65
    115a:	21 f4       	brne	.+8      	; 0x1164 <main+0xa3a>
				PORTA |= (setValue);
    115c:	8b b3       	in	r24, 0x1b	; 27
    115e:	68 2b       	or	r22, r24
    1160:	6b bb       	out	0x1b, r22	; 27
    1162:	30 c0       	rjmp	.+96     	; 0x11c4 <main+0xa9a>
			}
			else if (portChar == 'B') {
    1164:	12 34       	cpi	r17, 0x42	; 66
    1166:	21 f4       	brne	.+8      	; 0x1170 <main+0xa46>
				PORTB |= (setValue);
    1168:	88 b3       	in	r24, 0x18	; 24
    116a:	68 2b       	or	r22, r24
    116c:	68 bb       	out	0x18, r22	; 24
    116e:	2a c0       	rjmp	.+84     	; 0x11c4 <main+0xa9a>
			}
			else if (portChar == 'C') {
    1170:	13 34       	cpi	r17, 0x43	; 67
    1172:	21 f4       	brne	.+8      	; 0x117c <main+0xa52>
				PORTC |= (setValue);
    1174:	85 b3       	in	r24, 0x15	; 21
    1176:	68 2b       	or	r22, r24
    1178:	65 bb       	out	0x15, r22	; 21
    117a:	24 c0       	rjmp	.+72     	; 0x11c4 <main+0xa9a>
			}
			else if (portChar == 'D') {
    117c:	14 34       	cpi	r17, 0x44	; 68
    117e:	21 f4       	brne	.+8      	; 0x1188 <main+0xa5e>
				PORTD |= (setValue);
    1180:	82 b3       	in	r24, 0x12	; 18
    1182:	68 2b       	or	r22, r24
    1184:	62 bb       	out	0x12, r22	; 18
    1186:	1e c0       	rjmp	.+60     	; 0x11c4 <main+0xa9a>
			}
			else if (portChar == 'E') {
    1188:	15 34       	cpi	r17, 0x45	; 69
    118a:	e1 f4       	brne	.+56     	; 0x11c4 <main+0xa9a>
				PORTE |= (setValue);
    118c:	87 b1       	in	r24, 0x07	; 7
    118e:	68 2b       	or	r22, r24
    1190:	67 b9       	out	0x07, r22	; 7
    1192:	18 c0       	rjmp	.+48     	; 0x11c4 <main+0xa9a>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Read all pins of a PORT and return the value
		else if (receivedChar == READ_INPUT) {
    1194:	84 34       	cpi	r24, 0x44	; 68
    1196:	c1 f4       	brne	.+48     	; 0x11c8 <main+0xa9e>
			char portChar = USART_Receive();			
    1198:	60 d7       	rcall	.+3776   	; 0x205a <__TEXT_REGION_LENGTH__+0x5a>
			
			PORTD |= (1<<ACTIVITY_LED);
    119a:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
    119c:	81 34       	cpi	r24, 0x41	; 65
    119e:	11 f4       	brne	.+4      	; 0x11a4 <main+0xa7a>
				USART_Transmit(PINA);
    11a0:	89 b3       	in	r24, 0x19	; 25
    11a2:	0f c0       	rjmp	.+30     	; 0x11c2 <main+0xa98>
			}
			else if (portChar == 'B') {
    11a4:	82 34       	cpi	r24, 0x42	; 66
    11a6:	11 f4       	brne	.+4      	; 0x11ac <main+0xa82>
				USART_Transmit(PINB);
    11a8:	86 b3       	in	r24, 0x16	; 22
    11aa:	0b c0       	rjmp	.+22     	; 0x11c2 <main+0xa98>
			}
			else if (portChar == 'C') {
    11ac:	83 34       	cpi	r24, 0x43	; 67
    11ae:	11 f4       	brne	.+4      	; 0x11b4 <main+0xa8a>
				USART_Transmit(PINC);
    11b0:	83 b3       	in	r24, 0x13	; 19
    11b2:	07 c0       	rjmp	.+14     	; 0x11c2 <main+0xa98>
			}
			else if (portChar == 'D') {
    11b4:	84 34       	cpi	r24, 0x44	; 68
    11b6:	11 f4       	brne	.+4      	; 0x11bc <main+0xa92>
				USART_Transmit(PIND);
    11b8:	80 b3       	in	r24, 0x10	; 16
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <main+0xa98>
			}
			else if (portChar == 'E') {
    11bc:	85 34       	cpi	r24, 0x45	; 69
    11be:	11 f4       	brne	.+4      	; 0x11c4 <main+0xa9a>
				USART_Transmit(PINE);
    11c0:	85 b1       	in	r24, 0x05	; 5
    11c2:	4f d7       	rcall	.+3742   	; 0x2062 <__TEXT_REGION_LENGTH__+0x62>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
    11c4:	93 98       	cbi	0x12, 3	; 18
    11c6:	bb ca       	rjmp	.-2698   	; 0x73e <main+0x14>
		}
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
    11c8:	8d 34       	cpi	r24, 0x4D	; 77
    11ca:	59 f4       	brne	.+22     	; 0x11e2 <main+0xab8>
			char commonChar = USART_Receive();
    11cc:	46 d7       	rcall	.+3724   	; 0x205a <__TEXT_REGION_LENGTH__+0x5a>
			if (commonChar == '1') {
    11ce:	81 33       	cpi	r24, 0x31	; 49
    11d0:	19 f4       	brne	.+6      	; 0x11d8 <main+0xaae>
				resetCommonLines = 1;
    11d2:	66 24       	eor	r6, r6
    11d4:	63 94       	inc	r6
    11d6:	b6 ca       	rjmp	.-2708   	; 0x744 <main+0x1a>
			}
			else if (commonChar == '0') {
    11d8:	80 33       	cpi	r24, 0x30	; 48
    11da:	09 f0       	breq	.+2      	; 0x11de <main+0xab4>
    11dc:	b0 ca       	rjmp	.-2720   	; 0x73e <main+0x14>
				resetCommonLines = 0;
    11de:	61 2c       	mov	r6, r1
    11e0:	b2 ca       	rjmp	.-2716   	; 0x746 <main+0x1c>
			}
		}
		
		// Send back the PCB version number
		else if (receivedChar == READ_PCB_VERSION) {
    11e2:	88 36       	cpi	r24, 0x68	; 104
    11e4:	11 f4       	brne	.+4      	; 0x11ea <main+0xac0>
			USART_Transmit(PCB_VERSION);
    11e6:	84 e0       	ldi	r24, 0x04	; 4
    11e8:	03 c0       	rjmp	.+6      	; 0x11f0 <main+0xac6>
		}
		
		// Send back the firmware version number
		else if (receivedChar == READ_FIRMWARE_VERSION) {
    11ea:	86 35       	cpi	r24, 0x56	; 86
    11ec:	19 f4       	brne	.+6      	; 0x11f4 <main+0xaca>
			USART_Transmit(FIRMWARE_VERSION);
    11ee:	8e e0       	ldi	r24, 0x0E	; 14
    11f0:	38 d7       	rcall	.+3696   	; 0x2062 <__TEXT_REGION_LENGTH__+0x62>
    11f2:	a5 ca       	rjmp	.-2742   	; 0x73e <main+0x14>
		}
		
		// Reset the AVR if it matches the number
		else if (receivedChar == RESET_AVR) {
    11f4:	8a 32       	cpi	r24, 0x2A	; 42
    11f6:	09 f0       	breq	.+2      	; 0x11fa <main+0xad0>
    11f8:	a2 ca       	rjmp	.-2748   	; 0x73e <main+0x14>
			usart_read_chars();
    11fa:	4c d7       	rcall	.+3736   	; 0x2094 <__TEXT_REGION_LENGTH__+0x94>
			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
    11fc:	40 e1       	ldi	r20, 0x10	; 16
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	82 e7       	ldi	r24, 0x72	; 114
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	12 d0       	rcall	.+36     	; 0x122e <strtol>
			if (resetValue == RESET_VALUE) {
    120a:	61 3e       	cpi	r22, 0xE1	; 225
    120c:	75 4e       	sbci	r23, 0xE5	; 229
    120e:	87 40       	sbci	r24, 0x07	; 7
    1210:	91 05       	cpc	r25, r1
    1212:	09 f0       	breq	.+2      	; 0x1216 <main+0xaec>
    1214:	94 ca       	rjmp	.-2776   	; 0x73e <main+0x14>
				// Clear watchdog flag
				MCUCSR &= ~(1<<WDRF);
    1216:	84 b7       	in	r24, 0x34	; 52
    1218:	87 7f       	andi	r24, 0xF7	; 247
    121a:	84 bf       	out	0x34, r24	; 52
				
				// Start timed sequence
				WDTCR = (1<<WDCE) | (1<<WDE);
    121c:	88 e1       	ldi	r24, 0x18	; 24
    121e:	81 bd       	out	0x21, r24	; 33
				
				// Reset in 250 ms
				WDTCR = (1<<WDP2) | (1<<WDE);
    1220:	9c e0       	ldi	r25, 0x0C	; 12
    1222:	91 bd       	out	0x21, r25	; 33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	9f ef       	ldi	r25, 0xFF	; 255
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	f1 f7       	brne	.-4      	; 0x1228 <main+0xafe>
    122c:	88 ca       	rjmp	.-2800   	; 0x73e <main+0x14>

0000122e <strtol>:
    122e:	a0 e0       	ldi	r26, 0x00	; 0
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	ec e1       	ldi	r30, 0x1C	; 28
    1234:	f9 e0       	ldi	r31, 0x09	; 9
    1236:	78 c1       	rjmp	.+752    	; 0x1528 <__prologue_saves__+0x2>
    1238:	5c 01       	movw	r10, r24
    123a:	6b 01       	movw	r12, r22
    123c:	7a 01       	movw	r14, r20
    123e:	61 15       	cp	r22, r1
    1240:	71 05       	cpc	r23, r1
    1242:	19 f0       	breq	.+6      	; 0x124a <strtol+0x1c>
    1244:	fb 01       	movw	r30, r22
    1246:	91 83       	std	Z+1, r25	; 0x01
    1248:	80 83       	st	Z, r24
    124a:	e1 14       	cp	r14, r1
    124c:	f1 04       	cpc	r15, r1
    124e:	29 f0       	breq	.+10     	; 0x125a <strtol+0x2c>
    1250:	c7 01       	movw	r24, r14
    1252:	02 97       	sbiw	r24, 0x02	; 2
    1254:	83 97       	sbiw	r24, 0x23	; 35
    1256:	08 f0       	brcs	.+2      	; 0x125a <strtol+0x2c>
    1258:	e2 c0       	rjmp	.+452    	; 0x141e <strtol+0x1f0>
    125a:	e5 01       	movw	r28, r10
    125c:	21 96       	adiw	r28, 0x01	; 1
    125e:	f5 01       	movw	r30, r10
    1260:	10 81       	ld	r17, Z
    1262:	81 2f       	mov	r24, r17
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	11 d1       	rcall	.+546    	; 0x148a <isspace>
    1268:	89 2b       	or	r24, r25
    126a:	11 f0       	breq	.+4      	; 0x1270 <strtol+0x42>
    126c:	5e 01       	movw	r10, r28
    126e:	f5 cf       	rjmp	.-22     	; 0x125a <strtol+0x2c>
    1270:	1d 32       	cpi	r17, 0x2D	; 45
    1272:	29 f4       	brne	.+10     	; 0x127e <strtol+0x50>
    1274:	21 96       	adiw	r28, 0x01	; 1
    1276:	f5 01       	movw	r30, r10
    1278:	11 81       	ldd	r17, Z+1	; 0x01
    127a:	01 e0       	ldi	r16, 0x01	; 1
    127c:	07 c0       	rjmp	.+14     	; 0x128c <strtol+0x5e>
    127e:	1b 32       	cpi	r17, 0x2B	; 43
    1280:	21 f4       	brne	.+8      	; 0x128a <strtol+0x5c>
    1282:	e5 01       	movw	r28, r10
    1284:	22 96       	adiw	r28, 0x02	; 2
    1286:	f5 01       	movw	r30, r10
    1288:	11 81       	ldd	r17, Z+1	; 0x01
    128a:	00 e0       	ldi	r16, 0x00	; 0
    128c:	e1 14       	cp	r14, r1
    128e:	f1 04       	cpc	r15, r1
    1290:	09 f1       	breq	.+66     	; 0x12d4 <strtol+0xa6>
    1292:	f0 e1       	ldi	r31, 0x10	; 16
    1294:	ef 16       	cp	r14, r31
    1296:	f1 04       	cpc	r15, r1
    1298:	29 f4       	brne	.+10     	; 0x12a4 <strtol+0x76>
    129a:	3e c0       	rjmp	.+124    	; 0x1318 <strtol+0xea>
    129c:	10 e3       	ldi	r17, 0x30	; 48
    129e:	e1 14       	cp	r14, r1
    12a0:	f1 04       	cpc	r15, r1
    12a2:	21 f1       	breq	.+72     	; 0x12ec <strtol+0xbe>
    12a4:	28 e0       	ldi	r18, 0x08	; 8
    12a6:	e2 16       	cp	r14, r18
    12a8:	f1 04       	cpc	r15, r1
    12aa:	01 f1       	breq	.+64     	; 0x12ec <strtol+0xbe>
    12ac:	54 f4       	brge	.+20     	; 0x12c2 <strtol+0x94>
    12ae:	e2 e0       	ldi	r30, 0x02	; 2
    12b0:	ee 16       	cp	r14, r30
    12b2:	f1 04       	cpc	r15, r1
    12b4:	21 f5       	brne	.+72     	; 0x12fe <strtol+0xd0>
    12b6:	81 2c       	mov	r8, r1
    12b8:	91 2c       	mov	r9, r1
    12ba:	a1 2c       	mov	r10, r1
    12bc:	b0 e4       	ldi	r27, 0x40	; 64
    12be:	bb 2e       	mov	r11, r27
    12c0:	3d c0       	rjmp	.+122    	; 0x133c <strtol+0x10e>
    12c2:	fa e0       	ldi	r31, 0x0A	; 10
    12c4:	ef 16       	cp	r14, r31
    12c6:	f1 04       	cpc	r15, r1
    12c8:	39 f0       	breq	.+14     	; 0x12d8 <strtol+0xaa>
    12ca:	20 e1       	ldi	r18, 0x10	; 16
    12cc:	e2 16       	cp	r14, r18
    12ce:	f1 04       	cpc	r15, r1
    12d0:	b1 f4       	brne	.+44     	; 0x12fe <strtol+0xd0>
    12d2:	2f c0       	rjmp	.+94     	; 0x1332 <strtol+0x104>
    12d4:	10 33       	cpi	r17, 0x30	; 48
    12d6:	11 f1       	breq	.+68     	; 0x131c <strtol+0xee>
    12d8:	fa e0       	ldi	r31, 0x0A	; 10
    12da:	ef 2e       	mov	r14, r31
    12dc:	f1 2c       	mov	r15, r1
    12de:	ac ec       	ldi	r26, 0xCC	; 204
    12e0:	8a 2e       	mov	r8, r26
    12e2:	98 2c       	mov	r9, r8
    12e4:	a8 2c       	mov	r10, r8
    12e6:	ac e0       	ldi	r26, 0x0C	; 12
    12e8:	ba 2e       	mov	r11, r26
    12ea:	28 c0       	rjmp	.+80     	; 0x133c <strtol+0x10e>
    12ec:	78 e0       	ldi	r23, 0x08	; 8
    12ee:	e7 2e       	mov	r14, r23
    12f0:	f1 2c       	mov	r15, r1
    12f2:	81 2c       	mov	r8, r1
    12f4:	91 2c       	mov	r9, r1
    12f6:	a1 2c       	mov	r10, r1
    12f8:	e0 e1       	ldi	r30, 0x10	; 16
    12fa:	be 2e       	mov	r11, r30
    12fc:	1f c0       	rjmp	.+62     	; 0x133c <strtol+0x10e>
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e8       	ldi	r25, 0x80	; 128
    1306:	97 01       	movw	r18, r14
    1308:	0f 2c       	mov	r0, r15
    130a:	00 0c       	add	r0, r0
    130c:	44 0b       	sbc	r20, r20
    130e:	55 0b       	sbc	r21, r21
    1310:	de d0       	rcall	.+444    	; 0x14ce <__udivmodsi4>
    1312:	49 01       	movw	r8, r18
    1314:	5a 01       	movw	r10, r20
    1316:	12 c0       	rjmp	.+36     	; 0x133c <strtol+0x10e>
    1318:	10 33       	cpi	r17, 0x30	; 48
    131a:	59 f4       	brne	.+22     	; 0x1332 <strtol+0x104>
    131c:	88 81       	ld	r24, Y
    131e:	8f 7d       	andi	r24, 0xDF	; 223
    1320:	88 35       	cpi	r24, 0x58	; 88
    1322:	09 f0       	breq	.+2      	; 0x1326 <strtol+0xf8>
    1324:	bb cf       	rjmp	.-138    	; 0x129c <strtol+0x6e>
    1326:	19 81       	ldd	r17, Y+1	; 0x01
    1328:	22 96       	adiw	r28, 0x02	; 2
    132a:	02 60       	ori	r16, 0x02	; 2
    132c:	80 e1       	ldi	r24, 0x10	; 16
    132e:	e8 2e       	mov	r14, r24
    1330:	f1 2c       	mov	r15, r1
    1332:	81 2c       	mov	r8, r1
    1334:	91 2c       	mov	r9, r1
    1336:	a1 2c       	mov	r10, r1
    1338:	68 e0       	ldi	r22, 0x08	; 8
    133a:	b6 2e       	mov	r11, r22
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	cb 01       	movw	r24, r22
    1344:	27 01       	movw	r4, r14
    1346:	0f 2c       	mov	r0, r15
    1348:	00 0c       	add	r0, r0
    134a:	66 08       	sbc	r6, r6
    134c:	77 08       	sbc	r7, r7
    134e:	fe 01       	movw	r30, r28
    1350:	50 ed       	ldi	r21, 0xD0	; 208
    1352:	35 2e       	mov	r3, r21
    1354:	31 0e       	add	r3, r17
    1356:	29 e0       	ldi	r18, 0x09	; 9
    1358:	23 15       	cp	r18, r3
    135a:	70 f4       	brcc	.+28     	; 0x1378 <strtol+0x14a>
    135c:	2f eb       	ldi	r18, 0xBF	; 191
    135e:	21 0f       	add	r18, r17
    1360:	2a 31       	cpi	r18, 0x1A	; 26
    1362:	18 f4       	brcc	.+6      	; 0x136a <strtol+0x13c>
    1364:	39 ec       	ldi	r19, 0xC9	; 201
    1366:	33 2e       	mov	r3, r19
    1368:	06 c0       	rjmp	.+12     	; 0x1376 <strtol+0x148>
    136a:	2f e9       	ldi	r18, 0x9F	; 159
    136c:	21 0f       	add	r18, r17
    136e:	2a 31       	cpi	r18, 0x1A	; 26
    1370:	10 f5       	brcc	.+68     	; 0x13b6 <strtol+0x188>
    1372:	29 ea       	ldi	r18, 0xA9	; 169
    1374:	32 2e       	mov	r3, r18
    1376:	31 0e       	add	r3, r17
    1378:	23 2d       	mov	r18, r3
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	2e 15       	cp	r18, r14
    137e:	3f 05       	cpc	r19, r15
    1380:	d4 f4       	brge	.+52     	; 0x13b6 <strtol+0x188>
    1382:	47 fd       	sbrc	r20, 7
    1384:	15 c0       	rjmp	.+42     	; 0x13b0 <strtol+0x182>
    1386:	86 16       	cp	r8, r22
    1388:	97 06       	cpc	r9, r23
    138a:	a8 06       	cpc	r10, r24
    138c:	b9 06       	cpc	r11, r25
    138e:	68 f0       	brcs	.+26     	; 0x13aa <strtol+0x17c>
    1390:	a3 01       	movw	r20, r6
    1392:	92 01       	movw	r18, r4
    1394:	8d d0       	rcall	.+282    	; 0x14b0 <__mulsi3>
    1396:	63 0d       	add	r22, r3
    1398:	71 1d       	adc	r23, r1
    139a:	81 1d       	adc	r24, r1
    139c:	91 1d       	adc	r25, r1
    139e:	61 30       	cpi	r22, 0x01	; 1
    13a0:	71 05       	cpc	r23, r1
    13a2:	81 05       	cpc	r24, r1
    13a4:	20 e8       	ldi	r18, 0x80	; 128
    13a6:	92 07       	cpc	r25, r18
    13a8:	10 f0       	brcs	.+4      	; 0x13ae <strtol+0x180>
    13aa:	4f ef       	ldi	r20, 0xFF	; 255
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <strtol+0x182>
    13ae:	41 e0       	ldi	r20, 0x01	; 1
    13b0:	21 96       	adiw	r28, 0x01	; 1
    13b2:	10 81       	ld	r17, Z
    13b4:	cc cf       	rjmp	.-104    	; 0x134e <strtol+0x120>
    13b6:	20 2f       	mov	r18, r16
    13b8:	21 70       	andi	r18, 0x01	; 1
    13ba:	c1 14       	cp	r12, r1
    13bc:	d1 04       	cpc	r13, r1
    13be:	71 f0       	breq	.+28     	; 0x13dc <strtol+0x1ae>
    13c0:	44 23       	and	r20, r20
    13c2:	29 f0       	breq	.+10     	; 0x13ce <strtol+0x1a0>
    13c4:	21 97       	sbiw	r28, 0x01	; 1
    13c6:	f6 01       	movw	r30, r12
    13c8:	d1 83       	std	Z+1, r29	; 0x01
    13ca:	c0 83       	st	Z, r28
    13cc:	07 c0       	rjmp	.+14     	; 0x13dc <strtol+0x1ae>
    13ce:	01 ff       	sbrs	r16, 1
    13d0:	19 c0       	rjmp	.+50     	; 0x1404 <strtol+0x1d6>
    13d2:	22 97       	sbiw	r28, 0x02	; 2
    13d4:	f6 01       	movw	r30, r12
    13d6:	d1 83       	std	Z+1, r29	; 0x01
    13d8:	c0 83       	st	Z, r28
    13da:	14 c0       	rjmp	.+40     	; 0x1404 <strtol+0x1d6>
    13dc:	47 ff       	sbrs	r20, 7
    13de:	12 c0       	rjmp	.+36     	; 0x1404 <strtol+0x1d6>
    13e0:	22 23       	and	r18, r18
    13e2:	29 f0       	breq	.+10     	; 0x13ee <strtol+0x1c0>
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e8       	ldi	r25, 0x80	; 128
    13ec:	04 c0       	rjmp	.+8      	; 0x13f6 <strtol+0x1c8>
    13ee:	6f ef       	ldi	r22, 0xFF	; 255
    13f0:	7f ef       	ldi	r23, 0xFF	; 255
    13f2:	8f ef       	ldi	r24, 0xFF	; 255
    13f4:	9f e7       	ldi	r25, 0x7F	; 127
    13f6:	22 e2       	ldi	r18, 0x22	; 34
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <errno+0x1>
    13fe:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <errno>
    1402:	09 c0       	rjmp	.+18     	; 0x1416 <strtol+0x1e8>
    1404:	22 23       	and	r18, r18
    1406:	81 f0       	breq	.+32     	; 0x1428 <strtol+0x1fa>
    1408:	90 95       	com	r25
    140a:	80 95       	com	r24
    140c:	70 95       	com	r23
    140e:	61 95       	neg	r22
    1410:	7f 4f       	sbci	r23, 0xFF	; 255
    1412:	8f 4f       	sbci	r24, 0xFF	; 255
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	46 2f       	mov	r20, r22
    1418:	37 2f       	mov	r19, r23
    141a:	28 2f       	mov	r18, r24
    141c:	12 c0       	rjmp	.+36     	; 0x1442 <strtol+0x214>
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0d c0       	rjmp	.+26     	; 0x1442 <strtol+0x214>
    1428:	97 ff       	sbrs	r25, 7
    142a:	f5 cf       	rjmp	.-22     	; 0x1416 <strtol+0x1e8>
    142c:	82 e2       	ldi	r24, 0x22	; 34
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <errno+0x1>
    1434:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <errno>
    1438:	6f ef       	ldi	r22, 0xFF	; 255
    143a:	7f ef       	ldi	r23, 0xFF	; 255
    143c:	8f ef       	ldi	r24, 0xFF	; 255
    143e:	9f e7       	ldi	r25, 0x7F	; 127
    1440:	ea cf       	rjmp	.-44     	; 0x1416 <strtol+0x1e8>
    1442:	64 2f       	mov	r22, r20
    1444:	73 2f       	mov	r23, r19
    1446:	82 2f       	mov	r24, r18
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	e1 e1       	ldi	r30, 0x11	; 17
    144e:	88 c0       	rjmp	.+272    	; 0x1560 <__epilogue_restores__+0x2>

00001450 <atoi>:
    1450:	fc 01       	movw	r30, r24
    1452:	88 27       	eor	r24, r24
    1454:	99 27       	eor	r25, r25
    1456:	e8 94       	clt
    1458:	21 91       	ld	r18, Z+
    145a:	20 32       	cpi	r18, 0x20	; 32
    145c:	e9 f3       	breq	.-6      	; 0x1458 <atoi+0x8>
    145e:	29 30       	cpi	r18, 0x09	; 9
    1460:	10 f0       	brcs	.+4      	; 0x1466 <atoi+0x16>
    1462:	2e 30       	cpi	r18, 0x0E	; 14
    1464:	c8 f3       	brcs	.-14     	; 0x1458 <atoi+0x8>
    1466:	2b 32       	cpi	r18, 0x2B	; 43
    1468:	39 f0       	breq	.+14     	; 0x1478 <atoi+0x28>
    146a:	2d 32       	cpi	r18, 0x2D	; 45
    146c:	31 f4       	brne	.+12     	; 0x147a <atoi+0x2a>
    146e:	68 94       	set
    1470:	03 c0       	rjmp	.+6      	; 0x1478 <atoi+0x28>
    1472:	13 d0       	rcall	.+38     	; 0x149a <__mulhi_const_10>
    1474:	82 0f       	add	r24, r18
    1476:	91 1d       	adc	r25, r1
    1478:	21 91       	ld	r18, Z+
    147a:	20 53       	subi	r18, 0x30	; 48
    147c:	2a 30       	cpi	r18, 0x0A	; 10
    147e:	c8 f3       	brcs	.-14     	; 0x1472 <atoi+0x22>
    1480:	1e f4       	brtc	.+6      	; 0x1488 <atoi+0x38>
    1482:	90 95       	com	r25
    1484:	81 95       	neg	r24
    1486:	9f 4f       	sbci	r25, 0xFF	; 255
    1488:	08 95       	ret

0000148a <isspace>:
    148a:	91 11       	cpse	r25, r1
    148c:	0e c0       	rjmp	.+28     	; 0x14aa <__ctype_isfalse>
    148e:	80 32       	cpi	r24, 0x20	; 32
    1490:	19 f0       	breq	.+6      	; 0x1498 <isspace+0xe>
    1492:	89 50       	subi	r24, 0x09	; 9
    1494:	85 50       	subi	r24, 0x05	; 5
    1496:	d0 f7       	brcc	.-12     	; 0x148c <isspace+0x2>
    1498:	08 95       	ret

0000149a <__mulhi_const_10>:
    149a:	7a e0       	ldi	r23, 0x0A	; 10
    149c:	97 9f       	mul	r25, r23
    149e:	90 2d       	mov	r25, r0
    14a0:	87 9f       	mul	r24, r23
    14a2:	80 2d       	mov	r24, r0
    14a4:	91 0d       	add	r25, r1
    14a6:	11 24       	eor	r1, r1
    14a8:	08 95       	ret

000014aa <__ctype_isfalse>:
    14aa:	99 27       	eor	r25, r25
    14ac:	88 27       	eor	r24, r24

000014ae <__ctype_istrue>:
    14ae:	08 95       	ret

000014b0 <__mulsi3>:
    14b0:	db 01       	movw	r26, r22
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	2d d0       	rcall	.+90     	; 0x1512 <__muluhisi3>
    14b8:	bf 91       	pop	r27
    14ba:	af 91       	pop	r26
    14bc:	a2 9f       	mul	r26, r18
    14be:	80 0d       	add	r24, r0
    14c0:	91 1d       	adc	r25, r1
    14c2:	a3 9f       	mul	r26, r19
    14c4:	90 0d       	add	r25, r0
    14c6:	b2 9f       	mul	r27, r18
    14c8:	90 0d       	add	r25, r0
    14ca:	11 24       	eor	r1, r1
    14cc:	08 95       	ret

000014ce <__udivmodsi4>:
    14ce:	a1 e2       	ldi	r26, 0x21	; 33
    14d0:	1a 2e       	mov	r1, r26
    14d2:	aa 1b       	sub	r26, r26
    14d4:	bb 1b       	sub	r27, r27
    14d6:	fd 01       	movw	r30, r26
    14d8:	0d c0       	rjmp	.+26     	; 0x14f4 <__udivmodsi4_ep>

000014da <__udivmodsi4_loop>:
    14da:	aa 1f       	adc	r26, r26
    14dc:	bb 1f       	adc	r27, r27
    14de:	ee 1f       	adc	r30, r30
    14e0:	ff 1f       	adc	r31, r31
    14e2:	a2 17       	cp	r26, r18
    14e4:	b3 07       	cpc	r27, r19
    14e6:	e4 07       	cpc	r30, r20
    14e8:	f5 07       	cpc	r31, r21
    14ea:	20 f0       	brcs	.+8      	; 0x14f4 <__udivmodsi4_ep>
    14ec:	a2 1b       	sub	r26, r18
    14ee:	b3 0b       	sbc	r27, r19
    14f0:	e4 0b       	sbc	r30, r20
    14f2:	f5 0b       	sbc	r31, r21

000014f4 <__udivmodsi4_ep>:
    14f4:	66 1f       	adc	r22, r22
    14f6:	77 1f       	adc	r23, r23
    14f8:	88 1f       	adc	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	1a 94       	dec	r1
    14fe:	69 f7       	brne	.-38     	; 0x14da <__udivmodsi4_loop>
    1500:	60 95       	com	r22
    1502:	70 95       	com	r23
    1504:	80 95       	com	r24
    1506:	90 95       	com	r25
    1508:	9b 01       	movw	r18, r22
    150a:	ac 01       	movw	r20, r24
    150c:	bd 01       	movw	r22, r26
    150e:	cf 01       	movw	r24, r30
    1510:	08 95       	ret

00001512 <__muluhisi3>:
    1512:	40 d0       	rcall	.+128    	; 0x1594 <__umulhisi3>
    1514:	a5 9f       	mul	r26, r21
    1516:	90 0d       	add	r25, r0
    1518:	b4 9f       	mul	r27, r20
    151a:	90 0d       	add	r25, r0
    151c:	a4 9f       	mul	r26, r20
    151e:	80 0d       	add	r24, r0
    1520:	91 1d       	adc	r25, r1
    1522:	11 24       	eor	r1, r1
    1524:	08 95       	ret

00001526 <__prologue_saves__>:
    1526:	2f 92       	push	r2
    1528:	3f 92       	push	r3
    152a:	4f 92       	push	r4
    152c:	5f 92       	push	r5
    152e:	6f 92       	push	r6
    1530:	7f 92       	push	r7
    1532:	8f 92       	push	r8
    1534:	9f 92       	push	r9
    1536:	af 92       	push	r10
    1538:	bf 92       	push	r11
    153a:	cf 92       	push	r12
    153c:	df 92       	push	r13
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	ca 1b       	sub	r28, r26
    1550:	db 0b       	sbc	r29, r27
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	09 94       	ijmp

0000155e <__epilogue_restores__>:
    155e:	2a 88       	ldd	r2, Y+18	; 0x12
    1560:	39 88       	ldd	r3, Y+17	; 0x11
    1562:	48 88       	ldd	r4, Y+16	; 0x10
    1564:	5f 84       	ldd	r5, Y+15	; 0x0f
    1566:	6e 84       	ldd	r6, Y+14	; 0x0e
    1568:	7d 84       	ldd	r7, Y+13	; 0x0d
    156a:	8c 84       	ldd	r8, Y+12	; 0x0c
    156c:	9b 84       	ldd	r9, Y+11	; 0x0b
    156e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1570:	b9 84       	ldd	r11, Y+9	; 0x09
    1572:	c8 84       	ldd	r12, Y+8	; 0x08
    1574:	df 80       	ldd	r13, Y+7	; 0x07
    1576:	ee 80       	ldd	r14, Y+6	; 0x06
    1578:	fd 80       	ldd	r15, Y+5	; 0x05
    157a:	0c 81       	ldd	r16, Y+4	; 0x04
    157c:	1b 81       	ldd	r17, Y+3	; 0x03
    157e:	aa 81       	ldd	r26, Y+2	; 0x02
    1580:	b9 81       	ldd	r27, Y+1	; 0x01
    1582:	ce 0f       	add	r28, r30
    1584:	d1 1d       	adc	r29, r1
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	ed 01       	movw	r28, r26
    1592:	08 95       	ret

00001594 <__umulhisi3>:
    1594:	a2 9f       	mul	r26, r18
    1596:	b0 01       	movw	r22, r0
    1598:	b3 9f       	mul	r27, r19
    159a:	c0 01       	movw	r24, r0
    159c:	a3 9f       	mul	r26, r19
    159e:	01 d0       	rcall	.+2      	; 0x15a2 <__umulhisi3+0xe>
    15a0:	b2 9f       	mul	r27, r18
    15a2:	70 0d       	add	r23, r0
    15a4:	81 1d       	adc	r24, r1
    15a6:	11 24       	eor	r1, r1
    15a8:	91 1d       	adc	r25, r1
    15aa:	08 95       	ret

000015ac <_exit>:
    15ac:	f8 94       	cli

000015ae <__stop_program>:
    15ae:	ff cf       	rjmp	.-2      	; 0x15ae <__stop_program>
