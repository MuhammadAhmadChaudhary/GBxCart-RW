
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000cbe  00000d52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000112  00800062  00800062  00000d54  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b62  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b7  00000000  00000000  0000297a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3b  00000000  00000000  00003031  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00003b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a0  00000000  00000000  00003cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000109f  00000000  00000000  0000417c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000521b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ee eb       	ldi	r30, 0xBE	; 190
  36:	fc e0       	ldi	r31, 0x0C	; 12
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	21 e0       	ldi	r18, 0x01	; 1
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a4 37       	cpi	r26, 0x74	; 116
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	34 d1       	rcall	.+616    	; 0x2be <main>
  56:	31 c6       	rjmp	.+3170   	; 0xcba <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <USART_Receive>:

uint8_t cartMode = GB_MODE;

// Receive USART data
uint8_t USART_Receive(void) {
	while ( !(UCSRA & (1<<RXC)) ); // Wait for data to be received
  5a:	5f 9b       	sbis	0x0b, 7	; 11
  5c:	fe cf       	rjmp	.-4      	; 0x5a <USART_Receive>
	return UDR; // Get and return received data from buffer
  5e:	8c b1       	in	r24, 0x0c	; 12
}
  60:	08 95       	ret

00000062 <USART_Transmit>:

// Transmit USART data
void USART_Transmit(unsigned char data) {
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer
  62:	5d 9b       	sbis	0x0b, 5	; 11
  64:	fe cf       	rjmp	.-4      	; 0x62 <USART_Transmit>
	UDR = data;
  66:	8c b9       	out	0x0c, r24	; 12
  68:	08 95       	ret

0000006a <usart_read_bytes>:
}

// Read 1-256 bytes from the USART 
void usart_read_bytes(int count) {
  6a:	0f 93       	push	r16
  6c:	1f 93       	push	r17
  6e:	cf 93       	push	r28
  70:	df 93       	push	r29
  72:	8c 01       	movw	r16, r24
	for (int x = 0; x < count; x++) {
  74:	c0 e7       	ldi	r28, 0x70	; 112
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	ce 01       	movw	r24, r28
  7a:	80 57       	subi	r24, 0x70	; 112
  7c:	90 40       	sbci	r25, 0x00	; 0
  7e:	80 17       	cp	r24, r16
  80:	91 07       	cpc	r25, r17
  82:	1c f4       	brge	.+6      	; 0x8a <usart_read_bytes+0x20>
		receivedBuffer[x] = USART_Receive();
  84:	ea df       	rcall	.-44     	; 0x5a <USART_Receive>
  86:	89 93       	st	Y+, r24
  88:	f7 cf       	rjmp	.-18     	; 0x78 <usart_read_bytes+0xe>
	}
}
  8a:	df 91       	pop	r29
  8c:	cf 91       	pop	r28
  8e:	1f 91       	pop	r17
  90:	0f 91       	pop	r16
  92:	08 95       	ret

00000094 <usart_read_chars>:

// Read the USART until a 0 (string terminator byte) is received
void usart_read_chars(void) {
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	c0 e7       	ldi	r28, 0x70	; 112
  9a:	d0 e0       	ldi	r29, 0x00	; 0
	int x = 0;
	while (1) {
		receivedBuffer[x] = USART_Receive();
  9c:	de df       	rcall	.-68     	; 0x5a <USART_Receive>
  9e:	89 93       	st	Y+, r24
		if (receivedBuffer[x] == 0) {
  a0:	81 11       	cpse	r24, r1
  a2:	fc cf       	rjmp	.-8      	; 0x9c <usart_read_chars+0x8>
			break;
		}
		x++;
	}
}
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	08 95       	ret

000000aa <rd_wr_csmreq_cs2_reset>:

// Turn RD, WR, CS/MREQ and CS2 to high so they are deselected (reset state)
void rd_wr_csmreq_cs2_reset(void) {
	cs2Pin_high; // CS2 off
  aa:	3a 9a       	sbi	0x07, 2	; 7
	cs_mreqPin_high; // CS/MREQ off
  ac:	94 9a       	sbi	0x12, 4	; 18
	rdPin_high; // RD off
  ae:	95 9a       	sbi	0x12, 5	; 18
	wrPin_high; // WR off
  b0:	96 9a       	sbi	0x12, 6	; 18
  b2:	08 95       	ret

000000b4 <gb_mode>:
// ****** Gameboy / Gameboy Colour functions ******

// Set Gameboy mode
void gb_mode(void) {
	// Set inputs
	PORT_DATA7_0 = 0;
  b4:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
  b6:	14 ba       	out	0x14, r1	; 20
	
	// Set outputs
	PORT_ADDR7_0 = 0;
  b8:	18 ba       	out	0x18, r1	; 24
	PORT_ADDR15_8 = 0;
  ba:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR7_0 = 0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bb       	out	0x17, r24	; 23
	DDR_ADDR15_8 = 0xFF;
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret

000000c4 <set_16bit_address>:
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
  c4:	9b bb       	out	0x1b, r25	; 27
	PORT_ADDR7_0 = (address & 0xFF);
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	08 95       	ret

000000ca <read_8bit_data>:
}

// Set the address and read a byte from the 8 bit data line
uint8_t read_8bit_data(uint16_t address) {
	set_16bit_address(address);
  ca:	fc df       	rcall	.-8      	; 0xc4 <set_16bit_address>
	
	cs_mreqPin_low;
  cc:	94 98       	cbi	0x12, 4	; 18
	rdPin_low;
  ce:	95 98       	cbi	0x12, 5	; 18
	
	asm volatile("nop"); // Delay a little (At 8MHz - minimum needed is 1 nops, 2 nops for GB camera)
  d0:	00 00       	nop
	asm volatile("nop");
  d2:	00 00       	nop
	asm volatile("nop");
  d4:	00 00       	nop
	asm volatile("nop");
  d6:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
  d8:	83 b3       	in	r24, 0x13	; 19
	
	rdPin_high;
  da:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
  dc:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
}
  de:	08 95       	ret

000000e0 <write_8bit_data>:

// Set the address and write a byte to the 8 bit data line and pulse cs/mREQ if writing to RAM
void write_8bit_data(uint16_t address, uint8_t data, uint8_t type) {
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	d6 2f       	mov	r29, r22
  e6:	c4 2f       	mov	r28, r20
	set_16bit_address(address);
  e8:	ed df       	rcall	.-38     	; 0xc4 <set_16bit_address>
	
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	84 bb       	out	0x14, r24	; 20
	PORT_DATA7_0 = data; // Set data
  ee:	d5 bb       	out	0x15, r29	; 21
	
	// Pulse WR and mREQ if the type matches
	wrPin_low;
  f0:	96 98       	cbi	0x12, 6	; 18
	if (type == MEMORY_WRITE) {
  f2:	c1 30       	cpi	r28, 0x01	; 1
  f4:	09 f4       	brne	.+2      	; 0xf8 <write_8bit_data+0x18>
		cs_mreqPin_low;
  f6:	94 98       	cbi	0x12, 4	; 18
	}
	
	asm volatile("nop");
  f8:	00 00       	nop
	asm volatile("nop");
  fa:	00 00       	nop
	
	if (type == MEMORY_WRITE) {
  fc:	c1 30       	cpi	r28, 0x01	; 1
  fe:	09 f4       	brne	.+2      	; 0x102 <write_8bit_data+0x22>
		cs_mreqPin_high;
 100:	94 9a       	sbi	0x12, 4	; 18
	}
	wrPin_high;
 102:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
 104:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 106:	14 ba       	out	0x14, r1	; 20
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <gb_flash_read_byte>:

// ---------- GB FLASH CARTS ----------

// Read a byte from the flash (No CS pin pulse)
uint8_t gb_flash_read_byte(uint16_t address) {
	PORT_DATA7_0 = 0;
 10e:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 110:	14 ba       	out	0x14, r1	; 20
	
	set_16bit_address(address);
 112:	d8 df       	rcall	.-80     	; 0xc4 <set_16bit_address>
	
	rdPin_low;
 114:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop"); // Delay a little
 116:	00 00       	nop
	asm volatile("nop");
 118:	00 00       	nop
	asm volatile("nop");
 11a:	00 00       	nop
	asm volatile("nop");
 11c:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
 11e:	83 b3       	in	r24, 0x13	; 19
	rdPin_high;
 120:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
 122:	08 95       	ret

00000124 <gb_flash_write_bus_cycle>:

// Set the address and data for the write byte cycle to the flash
void gb_flash_write_bus_cycle(uint16_t address, uint8_t data) {
 124:	cf 93       	push	r28
 126:	c6 2f       	mov	r28, r22
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
 12c:	cb df       	rcall	.-106    	; 0xc4 <set_16bit_address>
	PORT_DATA7_0 = data;
 12e:	c5 bb       	out	0x15, r28	; 21
	
	if (flashWriteWePin == WE_AS_AUDIO_PIN) { // Audio pin
 130:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <flashWriteWePin>
 134:	81 34       	cpi	r24, 0x41	; 65
 136:	49 f4       	brne	.+18     	; 0x14a <gb_flash_write_bus_cycle+0x26>
		audioPin_low; // WE low
 138:	39 98       	cbi	0x07, 1	; 7
		asm volatile("nop");
 13a:	00 00       	nop
		asm volatile("nop");
 13c:	00 00       	nop
		asm volatile("nop");
 13e:	00 00       	nop
		asm volatile("nop");
 140:	00 00       	nop
		asm volatile("nop");
 142:	00 00       	nop
		asm volatile("nop");
 144:	00 00       	nop
		audioPin_high; // WE high
 146:	39 9a       	sbi	0x07, 1	; 7
 148:	08 c0       	rjmp	.+16     	; 0x15a <gb_flash_write_bus_cycle+0x36>
	}
	else { // WR pin
		wrPin_low; // WE low
 14a:	96 98       	cbi	0x12, 6	; 18
		asm volatile("nop");
 14c:	00 00       	nop
		asm volatile("nop");
 14e:	00 00       	nop
		asm volatile("nop");
 150:	00 00       	nop
		asm volatile("nop");
 152:	00 00       	nop
		asm volatile("nop");
 154:	00 00       	nop
		asm volatile("nop");
 156:	00 00       	nop
		wrPin_high; // WE high
 158:	96 9a       	sbi	0x12, 6	; 18
	}
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
 15a:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 15c:	14 ba       	out	0x14, r1	; 20
}
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <gb_flash_write_byte>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte.
void gb_flash_write_byte(uint16_t address, uint8_t data) {
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
 16a:	16 2f       	mov	r17, r22
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
 16c:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <flashWriteCycle+0x2>
 170:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashWriteCycle>
 174:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <flashWriteCycle+0x1>
 178:	d5 df       	rcall	.-86     	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
 17a:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <flashWriteCycle+0x6>
 17e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flashWriteCycle+0x4>
 182:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <flashWriteCycle+0x5>
 186:	ce df       	rcall	.-100    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
 188:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <flashWriteCycle+0xa>
 18c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flashWriteCycle+0x8>
 190:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <flashWriteCycle+0x9>
 194:	c7 df       	rcall	.-114    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
 196:	61 2f       	mov	r22, r17
 198:	ce 01       	movw	r24, r28
 19a:	c4 df       	rcall	.-120    	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	85 e3       	ldi	r24, 0x35	; 53
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <gb_flash_write_byte+0x3c>
 1a2:	00 00       	nop
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
 1a4:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 1a6:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
 1a8:	ce 01       	movw	r24, r28
 1aa:	b1 df       	rcall	.-158    	; 0x10e <gb_flash_read_byte>
	while (data != dataVerify) {
 1ac:	81 17       	cp	r24, r17
 1ae:	39 f0       	breq	.+14     	; 0x1be <gb_flash_write_byte+0x5c>
		dataVerify = gb_flash_read_byte(address);
 1b0:	ce 01       	movw	r24, r28
 1b2:	ad df       	rcall	.-166    	; 0x10e <gb_flash_read_byte>
 1b4:	9a e1       	ldi	r25, 0x1A	; 26
 1b6:	9a 95       	dec	r25
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <gb_flash_write_byte+0x54>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <gb_flash_write_byte+0x5a>
 1bc:	f7 cf       	rjmp	.-18     	; 0x1ac <gb_flash_write_byte+0x4a>
		_delay_us(5);
	}
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	08 95       	ret

000001c6 <gb_flash_write_byte_bank1_commands>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte. 
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
 1c6:	ff 92       	push	r15
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24
 1d2:	16 2f       	mov	r17, r22
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
 1d4:	ff 24       	eor	r15, r15
 1d6:	fa 94       	dec	r15
 1d8:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
 1da:	01 e2       	ldi	r16, 0x21	; 33
 1dc:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
 1de:	18 ba       	out	0x18, r1	; 24
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
 1e4:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
 1e6:	00 00       	nop
	asm volatile("nop");
 1e8:	00 00       	nop
	wrPin_high;
 1ea:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
 1ec:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <flashWriteCycle+0x2>
 1f0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flashWriteCycle>
 1f4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <flashWriteCycle+0x1>
 1f8:	95 df       	rcall	.-214    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
 1fa:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <flashWriteCycle+0x6>
 1fe:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flashWriteCycle+0x4>
 202:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <flashWriteCycle+0x5>
 206:	8e df       	rcall	.-228    	; 0x124 <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
 208:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <flashWriteCycle+0xa>
 20c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flashWriteCycle+0x8>
 210:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <flashWriteCycle+0x9>
 214:	87 df       	rcall	.-242    	; 0x124 <gb_flash_write_bus_cycle>
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
 216:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
 218:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
 21a:	18 ba       	out	0x18, r1	; 24
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = lastBankAccessed;
 21c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 220:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
 222:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
 224:	00 00       	nop
	asm volatile("nop");
 226:	00 00       	nop
	wrPin_high;
 228:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(address, data);
 22a:	61 2f       	mov	r22, r17
 22c:	ce 01       	movw	r24, r28
 22e:	7a df       	rcall	.-268    	; 0x124 <gb_flash_write_bus_cycle>
 230:	85 e3       	ldi	r24, 0x35	; 53
 232:	8a 95       	dec	r24
 234:	f1 f7       	brne	.-4      	; 0x232 <gb_flash_write_byte_bank1_commands+0x6c>
 236:	00 00       	nop
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
 238:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 23a:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
 23c:	ce 01       	movw	r24, r28
 23e:	67 df       	rcall	.-306    	; 0x10e <gb_flash_read_byte>
	while (data != dataVerify) {
 240:	81 17       	cp	r24, r17
 242:	39 f0       	breq	.+14     	; 0x252 <gb_flash_write_byte_bank1_commands+0x8c>
		dataVerify = gb_flash_read_byte(address);
 244:	ce 01       	movw	r24, r28
 246:	63 df       	rcall	.-314    	; 0x10e <gb_flash_read_byte>
 248:	9a e1       	ldi	r25, 0x1A	; 26
 24a:	9a 95       	dec	r25
 24c:	f1 f7       	brne	.-4      	; 0x24a <gb_flash_write_byte_bank1_commands+0x84>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <gb_flash_write_byte_bank1_commands+0x8a>
 250:	f7 cf       	rjmp	.-18     	; 0x240 <gb_flash_write_byte_bank1_commands+0x7a>
		_delay_us(5);
	}
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	ff 90       	pop	r15
 25c:	08 95       	ret

0000025e <setup>:


// Setup
void setup(void) {
	// Turn off watchdog
	MCUCSR &= ~(1<<WDRF);
 25e:	84 b7       	in	r24, 0x34	; 52
 260:	87 7f       	andi	r24, 0xF7	; 247
 262:	84 bf       	out	0x34, r24	; 52
	WDTCR = (1<<WDCE) | (1<<WDE);
 264:	88 e1       	ldi	r24, 0x18	; 24
 266:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
 268:	11 bc       	out	0x21, r1	; 33
	
	// Reset common lines
	rd_wr_csmreq_cs2_reset();
 26a:	1f df       	rcall	.-450    	; 0xaa <rd_wr_csmreq_cs2_reset>
	
	// Set outputs
	DDRD |= (1<<ACTIVITY_LED) | (1<<WR_PIN) | (1<<RD_PIN) | (1<<CS_MREQ_PIN);
 26c:	81 b3       	in	r24, 0x11	; 17
 26e:	88 67       	ori	r24, 0x78	; 120
 270:	81 bb       	out	0x11, r24	; 17
	DDRE |= (1<<CS2_PIN);
 272:	32 9a       	sbi	0x06, 2	; 6
	
	// Pull ups
	PORTE |= (1<<PE0);
 274:	38 9a       	sbi	0x07, 0	; 7
	PORTD |= (1<<PD7) | (1<<PD2);
 276:	82 b3       	in	r24, 0x12	; 18
 278:	84 68       	ori	r24, 0x84	; 132
 27a:	82 bb       	out	0x12, r24	; 18
	
	// Set all pins as inputs
	PORT_DATA7_0 = 0;
 27c:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
 27e:	14 ba       	out	0x14, r1	; 20
	PORT_ADDR7_0 = 0;
 280:	18 ba       	out	0x18, r1	; 24
	DDR_ADDR7_0 = 0;
 282:	17 ba       	out	0x17, r1	; 23
	PORT_ADDR15_8 = 0;
 284:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR15_8 = 0;
 286:	1a ba       	out	0x1a, r1	; 26
	
	// Set Reset low for 50ms to reset the cart (also for CPLD carts to initialise properly)
	cs2Pin_low;
 288:	3a 98       	cbi	0x07, 2	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	80 e7       	ldi	r24, 0x70	; 112
 28e:	92 e0       	ldi	r25, 0x02	; 2
 290:	21 50       	subi	r18, 0x01	; 1
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <__stack+0x31>
 298:	00 c0       	rjmp	.+0      	; 0x29a <__stack+0x3b>
 29a:	00 00       	nop
	_delay_ms(50);
	cs2Pin_high;
 29c:	3a 9a       	sbi	0x07, 2	; 7
	
	// Light LED
	PORTD |= (1<<ACTIVITY_LED);
 29e:	93 9a       	sbi	0x12, 3	; 18
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	89 e6       	ldi	r24, 0x69	; 105
 2a4:	98 e1       	ldi	r25, 0x18	; 24
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <__stack+0x47>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <__stack+0x51>
 2b0:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1<<ACTIVITY_LED);
 2b2:	93 98       	cbi	0x12, 3	; 18
	
	// Setup USART
	UBRRL = 0; // 1Mbps Baud rate
 2b4:	19 b8       	out	0x09, r1	; 9
	sbi(UCSRB, TXEN); // Transmitter enable
 2b6:	53 9a       	sbi	0x0a, 3	; 10
	sbi(UCSRB, RXEN); // Receiver enable
 2b8:	54 9a       	sbi	0x0a, 4	; 10
	
	// Turn on interrupts
	sei();
 2ba:	78 94       	sei
 2bc:	08 95       	ret

000002be <main>:
#include <string.h>
#include "setup.c" // See defines, variables, constants, functions here


int main(void) {
	setup();
 2be:	cf df       	rcall	.-98     	; 0x25e <setup>
	
	uint32_t address = 0;
	uint8_t resetCommonLines = 1;
 2c0:	55 24       	eor	r5, r5
 2c2:	53 94       	inc	r5


int main(void) {
	setup();
	
	uint32_t address = 0;
 2c4:	c1 2c       	mov	r12, r1
 2c6:	d1 2c       	mov	r13, r1
 2c8:	76 01       	movw	r14, r12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2ca:	22 24       	eor	r2, r2
 2cc:	2a 94       	dec	r2
 2ce:	32 2c       	mov	r3, r2
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
			char commonChar = USART_Receive();
			if (commonChar == '1') {
				resetCommonLines = 1;
 2d0:	44 24       	eor	r4, r4
 2d2:	43 94       	inc	r4
 2d4:	20 ef       	ldi	r18, 0xF0	; 240
 2d6:	62 2e       	mov	r6, r18
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	72 2e       	mov	r7, r18
	
	uint32_t address = 0;
	uint8_t resetCommonLines = 1;
	
	while(1) {
		if (resetCommonLines == 1) {
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	52 12       	cpse	r5, r18
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <main+0x26>
			rd_wr_csmreq_cs2_reset();
 2e2:	e3 de       	rcall	.-570    	; 0xaa <rd_wr_csmreq_cs2_reset>
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
 2e4:	ba de       	rcall	.-652    	; 0x5a <USART_Receive>
 2e6:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
		
		
		// Return the cart mode in use
		if (receivedChar == CART_MODE) {
 2ea:	83 34       	cpi	r24, 0x43	; 67
 2ec:	19 f4       	brne	.+6      	; 0x2f4 <main+0x36>
			USART_Transmit(cartMode);
 2ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 2f2:	06 c3       	rjmp	.+1548   	; 0x900 <__LOCK_REGION_LENGTH__+0x500>
		}
		
		// Change to GB mode or GBA mode if requested
		else if (receivedChar == GB_CART_MODE) {
 2f4:	87 34       	cpi	r24, 0x47	; 71
 2f6:	11 f4       	brne	.+4      	; 0x2fc <main+0x3e>
			gb_mode();
 2f8:	dd de       	rcall	.-582    	; 0xb4 <gb_mode>
 2fa:	f0 cf       	rjmp	.-32     	; 0x2dc <main+0x1e>
		}
		
		// Set address
		else if (receivedChar == SET_START_ADDRESS) {
 2fc:	81 34       	cpi	r24, 0x41	; 65
 2fe:	59 f4       	brne	.+22     	; 0x316 <main+0x58>
			usart_read_chars(); // Read start address
 300:	c9 de       	rcall	.-622    	; 0x94 <usart_read_chars>
			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 302:	40 e1       	ldi	r20, 0x10	; 16
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	80 e7       	ldi	r24, 0x70	; 112
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	16 d3       	rcall	.+1580   	; 0x93c <strtol>
 310:	6b 01       	movw	r12, r22
 312:	7c 01       	movw	r14, r24
 314:	e3 cf       	rjmp	.-58     	; 0x2dc <main+0x1e>
		
		
		// ****** Gameboy / Gameboy Colour ******
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
 316:	82 35       	cpi	r24, 0x52	; 82
 318:	e1 f4       	brne	.+56     	; 0x352 <main+0x94>
			gb_mode();
 31a:	cc de       	rcall	.-616    	; 0xb4 <gb_mode>
			receivedChar = '1';
 31c:	81 e3       	ldi	r24, 0x31	; 49
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
 31e:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
 322:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
 326:	81 33       	cpi	r24, 0x31	; 49
 328:	c9 f6       	brne	.-78     	; 0x2dc <main+0x1e>
				PORTD |= (1<<ACTIVITY_LED);
 32a:	93 9a       	sbi	0x12, 3	; 18
 32c:	c0 e0       	ldi	r28, 0x00	; 0
 32e:	d0 e0       	ldi	r29, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(read_8bit_data(address));
 330:	ce 01       	movw	r24, r28
 332:	8c 0d       	add	r24, r12
 334:	9d 1d       	adc	r25, r13
 336:	c9 de       	rcall	.-622    	; 0xca <read_8bit_data>
 338:	94 de       	rcall	.-728    	; 0x62 <USART_Transmit>
 33a:	21 96       	adiw	r28, 0x01	; 1
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
 33c:	c0 34       	cpi	r28, 0x40	; 64
 33e:	d1 05       	cpc	r29, r1
 340:	b9 f7       	brne	.-18     	; 0x330 <main+0x72>
 342:	80 e4       	ldi	r24, 0x40	; 64
 344:	c8 0e       	add	r12, r24
 346:	d1 1c       	adc	r13, r1
 348:	e1 1c       	adc	r14, r1
 34a:	f1 1c       	adc	r15, r1
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
 34c:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
 34e:	85 de       	rcall	.-758    	; 0x5a <USART_Receive>
 350:	e6 cf       	rjmp	.-52     	; 0x31e <main+0x60>
			}
		}
		
		// Write 64 bytes to RAM on address (and increment)
		else if (receivedChar == WRITE_RAM) {
 352:	87 35       	cpi	r24, 0x57	; 87
 354:	d9 f4       	brne	.+54     	; 0x38c <main+0xce>
			gb_mode();
 356:	ae de       	rcall	.-676    	; 0xb4 <gb_mode>
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
 358:	80 e4       	ldi	r24, 0x40	; 64
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	86 de       	rcall	.-756    	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 35e:	93 9a       	sbi	0x12, 3	; 18
 360:	00 e7       	ldi	r16, 0x70	; 112
 362:	10 e0       	ldi	r17, 0x00	; 0
 364:	c0 e0       	ldi	r28, 0x00	; 0
 366:	d0 e0       	ldi	r29, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
 368:	f8 01       	movw	r30, r16
 36a:	61 91       	ld	r22, Z+
 36c:	8f 01       	movw	r16, r30
 36e:	ce 01       	movw	r24, r28
 370:	8c 0d       	add	r24, r12
 372:	9d 1d       	adc	r25, r13
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	b4 de       	rcall	.-664    	; 0xe0 <write_8bit_data>
 378:	21 96       	adiw	r28, 0x01	; 1
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 37a:	c0 34       	cpi	r28, 0x40	; 64
 37c:	d1 05       	cpc	r29, r1
 37e:	a1 f7       	brne	.-24     	; 0x368 <main+0xaa>
 380:	f0 e4       	ldi	r31, 0x40	; 64
 382:	cf 0e       	add	r12, r31
 384:	d1 1c       	adc	r13, r1
 386:	e1 1c       	adc	r14, r1
 388:	f1 1c       	adc	r15, r1
 38a:	68 c0       	rjmp	.+208    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			PORTD &= ~(1<<ACTIVITY_LED);
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Set bank address and write a byte
		else if (receivedChar == SET_BANK) {
 38c:	82 34       	cpi	r24, 0x42	; 66
 38e:	e1 f4       	brne	.+56     	; 0x3c8 <main+0x10a>
			gb_mode();
 390:	91 de       	rcall	.-734    	; 0xb4 <gb_mode>
			
			usart_read_chars(); // Read start address
 392:	80 de       	rcall	.-768    	; 0x94 <usart_read_chars>
			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 394:	40 e1       	ldi	r20, 0x10	; 16
 396:	50 e0       	ldi	r21, 0x00	; 0
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	80 e7       	ldi	r24, 0x70	; 112
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	cd d2       	rcall	.+1434   	; 0x93c <strtol>
 3a2:	4b 01       	movw	r8, r22
 3a4:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for bank number
 3a6:	59 de       	rcall	.-846    	; 0x5a <USART_Receive>
 3a8:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
			if (receivedChar == 'B') {
 3ac:	82 34       	cpi	r24, 0x42	; 66
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <main+0xf4>
 3b0:	95 cf       	rjmp	.-214    	; 0x2dc <main+0x1e>
				usart_read_chars(); // Read data
 3b2:	70 de       	rcall	.-800    	; 0x94 <usart_read_chars>
				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
 3b4:	80 e7       	ldi	r24, 0x70	; 112
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	d2 d3       	rcall	.+1956   	; 0xb5e <atoi>
				lastBankAccessed = data; // Store the last bank accessed (used for flash carts that need it)
 3ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
				
				write_8bit_data(bankaddress, data, BANK_WRITE);
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	68 2f       	mov	r22, r24
 3c2:	c4 01       	movw	r24, r8
 3c4:	8d de       	rcall	.-742    	; 0xe0 <write_8bit_data>
 3c6:	8a cf       	rjmp	.-236    	; 0x2dc <main+0x1e>
		}
		
		
		// ---------- GB FLASH CARTS ----------
		// Select which pin need to pulse as WE (Audio or WR)
		else if (receivedChar == GB_FLASH_WE_PIN) {
 3c8:	80 35       	cpi	r24, 0x50	; 80
 3ca:	49 f4       	brne	.+18     	; 0x3de <main+0x120>
			flashWriteWePin = USART_Receive();
 3cc:	46 de       	rcall	.-884    	; 0x5a <USART_Receive>
 3ce:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <flashWriteWePin>
			
			if (flashWriteWePin == WE_AS_AUDIO_PIN) {
 3d2:	81 34       	cpi	r24, 0x41	; 65
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <main+0x11a>
 3d6:	82 cf       	rjmp	.-252    	; 0x2dc <main+0x1e>
				DDRE |= (1<<AUDIO_PIN);
 3d8:	31 9a       	sbi	0x06, 1	; 6
				audioPin_high;
 3da:	39 9a       	sbi	0x07, 1	; 7
 3dc:	7f cf       	rjmp	.-258    	; 0x2dc <main+0x1e>
			}
		}
		
		// Some flash carts may require changing the bank back to 1 in order to accept flash chip commands
		else if (receivedChar == GB_FLASH_BANK_1_COMMAND_WRITES) {
 3de:	8e 34       	cpi	r24, 0x4E	; 78
 3e0:	19 f4       	brne	.+6      	; 0x3e8 <main+0x12a>
			flashBank1CommandWrites = 1;
 3e2:	40 92 63 00 	sts	0x0063, r4	; 0x800063 <flashBank1CommandWrites>
 3e6:	7a cf       	rjmp	.-268    	; 0x2dc <main+0x1e>
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
 3e8:	85 34       	cpi	r24, 0x45	; 69
 3ea:	09 f5       	brne	.+66     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3ec:	c4 e6       	ldi	r28, 0x64	; 100
 3ee:	d0 e0       	ldi	r29, 0x00	; 0
			for (uint8_t x = 0; x < 3; x++) {
				usart_read_chars(); // Address
 3f0:	51 de       	rcall	.-862    	; 0x94 <usart_read_chars>
				flashWriteCycle[x][0] = strtol(receivedBuffer, NULL, 16);
 3f2:	40 e1       	ldi	r20, 0x10	; 16
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	80 e7       	ldi	r24, 0x70	; 112
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	9e d2       	rcall	.+1340   	; 0x93c <strtol>
 400:	79 83       	std	Y+1, r23	; 0x01
 402:	68 83       	st	Y, r22
				USART_Transmit(SEND_ACK);
 404:	81 e3       	ldi	r24, 0x31	; 49
 406:	2d de       	rcall	.-934    	; 0x62 <USART_Transmit>
				
				usart_read_chars(); // Data
 408:	45 de       	rcall	.-886    	; 0x94 <usart_read_chars>
				flashWriteCycle[x][1] = strtol(receivedBuffer, NULL, 16);
 40a:	40 e1       	ldi	r20, 0x10	; 16
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	80 e7       	ldi	r24, 0x70	; 112
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	92 d2       	rcall	.+1316   	; 0x93c <strtol>
 418:	7b 83       	std	Y+3, r23	; 0x03
 41a:	6a 83       	std	Y+2, r22	; 0x02
				USART_Transmit(SEND_ACK);
 41c:	81 e3       	ldi	r24, 0x31	; 49
 41e:	21 de       	rcall	.-958    	; 0x62 <USART_Transmit>
 420:	24 96       	adiw	r28, 0x04	; 4
			flashBank1CommandWrites = 1;
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
			for (uint8_t x = 0; x < 3; x++) {
 422:	80 e7       	ldi	r24, 0x70	; 112
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	8c 17       	cp	r24, r28
 428:	9d 07       	cpc	r25, r29
 42a:	11 f7       	brne	.-60     	; 0x3f0 <main+0x132>
 42c:	57 cf       	rjmp	.-338    	; 0x2dc <main+0x1e>
				USART_Transmit(SEND_ACK);
			}
		}
		
		// Write address and one byte to Flash, pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
 42e:	86 34       	cpi	r24, 0x46	; 70
 430:	c1 f4       	brne	.+48     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			usart_read_chars(); // Read address
 432:	30 de       	rcall	.-928    	; 0x94 <usart_read_chars>
			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16);
 434:	40 e1       	ldi	r20, 0x10	; 16
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	80 e7       	ldi	r24, 0x70	; 112
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	7d d2       	rcall	.+1274   	; 0x93c <strtol>
 442:	4b 01       	movw	r8, r22
 444:	5c 01       	movw	r10, r24
			
			usart_read_chars(); // Read data byte
 446:	26 de       	rcall	.-948    	; 0x94 <usart_read_chars>
			uint8_t flashByte = strtol(receivedBuffer, NULL, 16);
 448:	40 e1       	ldi	r20, 0x10	; 16
 44a:	50 e0       	ldi	r21, 0x00	; 0
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	80 e7       	ldi	r24, 0x70	; 112
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	73 d2       	rcall	.+1254   	; 0x93c <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 456:	93 9a       	sbi	0x12, 3	; 18
			gb_flash_write_bus_cycle(flashAddress, flashByte);
 458:	c4 01       	movw	r24, r8
 45a:	64 de       	rcall	.-824    	; 0x124 <gb_flash_write_bus_cycle>
			PORTD &= ~(1<<ACTIVITY_LED);
 45c:	93 98       	cbi	0x12, 3	; 18
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
 45e:	81 e3       	ldi	r24, 0x31	; 49
 460:	4f c2       	rjmp	.+1182   	; 0x900 <__LOCK_REGION_LENGTH__+0x500>
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
 462:	84 35       	cpi	r24, 0x54	; 84
 464:	19 f5       	brne	.+70     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
			usart_read_bytes(64);
 466:	80 e4       	ldi	r24, 0x40	; 64
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	ff dd       	rcall	.-1026   	; 0x6a <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
 46c:	93 9a       	sbi	0x12, 3	; 18
 46e:	c0 e7       	ldi	r28, 0x70	; 112
 470:	d0 e0       	ldi	r29, 0x00	; 0
 472:	80 e4       	ldi	r24, 0x40	; 64
 474:	b8 2e       	mov	r11, r24
 476:	86 01       	movw	r16, r12
 478:	00 57       	subi	r16, 0x70	; 112
 47a:	10 40       	sbci	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				if (flashBank1CommandWrites == 0) {
 47c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flashBank1CommandWrites>
					gb_flash_write_byte(address, receivedBuffer[x]);
 480:	68 81       	ld	r22, Y
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
				if (flashBank1CommandWrites == 0) {
 482:	81 11       	cpse	r24, r1
 484:	05 c0       	rjmp	.+10     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
					gb_flash_write_byte(address, receivedBuffer[x]);
 486:	c8 01       	movw	r24, r16
 488:	8c 0f       	add	r24, r28
 48a:	9d 1f       	adc	r25, r29
 48c:	6a de       	rcall	.-812    	; 0x162 <gb_flash_write_byte>
 48e:	04 c0       	rjmp	.+8      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
				}
				else { // Some flash carts need to change to bank 1 to issue flash commands
					gb_flash_write_byte_bank1_commands(address, receivedBuffer[x]);
 490:	c8 01       	movw	r24, r16
 492:	8c 0f       	add	r24, r28
 494:	9d 1f       	adc	r25, r29
 496:	97 de       	rcall	.-722    	; 0x1c6 <gb_flash_write_byte_bank1_commands>
 498:	ba 94       	dec	r11
 49a:	21 96       	adiw	r28, 0x01	; 1
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
 49c:	b1 10       	cpse	r11, r1
 49e:	ee cf       	rjmp	.-36     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 4a0:	90 e4       	ldi	r25, 0x40	; 64
 4a2:	c9 0e       	add	r12, r25
 4a4:	d1 1c       	adc	r13, r1
 4a6:	e1 1c       	adc	r14, r1
 4a8:	f1 1c       	adc	r15, r1
 4aa:	4e c1       	rjmp	.+668    	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
			
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 32 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_BUFFERED_32BYTE) {
 4ac:	89 35       	cpi	r24, 0x59	; 89
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b0:	4f c0       	rjmp	.+158    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
			usart_read_bytes(32);
 4b2:	80 e2       	ldi	r24, 0x20	; 32
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	d9 dd       	rcall	.-1102   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
 4b8:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xAA);
 4ba:	6a ea       	ldi	r22, 0xAA	; 170
 4bc:	8a ea       	ldi	r24, 0xAA	; 170
 4be:	9a e0       	ldi	r25, 0x0A	; 10
 4c0:	31 de       	rcall	.-926    	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x55);
 4c2:	65 e5       	ldi	r22, 0x55	; 85
 4c4:	85 e5       	ldi	r24, 0x55	; 85
 4c6:	95 e0       	ldi	r25, 0x05	; 5
 4c8:	2d de       	rcall	.-934    	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x25);
 4ca:	56 01       	movw	r10, r12
 4cc:	65 e2       	ldi	r22, 0x25	; 37
 4ce:	c6 01       	movw	r24, r12
 4d0:	29 de       	rcall	.-942    	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x1F); // Length
 4d2:	6f e1       	ldi	r22, 0x1F	; 31
 4d4:	c6 01       	movw	r24, r12
 4d6:	26 de       	rcall	.-948    	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d8:	e5 e0       	ldi	r30, 0x05	; 5
 4da:	ea 95       	dec	r30
 4dc:	f1 f7       	brne	.-4      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4de:	00 00       	nop
 4e0:	00 e7       	ldi	r16, 0x70	; 112
 4e2:	10 e0       	ldi	r17, 0x00	; 0
 4e4:	c0 e0       	ldi	r28, 0x00	; 0
 4e6:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 4e8:	f8 01       	movw	r30, r16
 4ea:	61 91       	ld	r22, Z+
 4ec:	8f 01       	movw	r16, r30
 4ee:	ce 01       	movw	r24, r28
 4f0:	8a 0d       	add	r24, r10
 4f2:	9b 1d       	adc	r25, r11
 4f4:	17 de       	rcall	.-978    	; 0x124 <gb_flash_write_bus_cycle>
 4f6:	21 96       	adiw	r28, 0x01	; 1
			gb_flash_write_bus_cycle(address, 0x25);
			gb_flash_write_bus_cycle(address, 0x1F); // Length
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
 4f8:	c0 32       	cpi	r28, 0x20	; 32
 4fa:	d1 05       	cpc	r29, r1
 4fc:	a9 f7       	brne	.-22     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4fe:	f0 e2       	ldi	r31, 0x20	; 32
 500:	cf 0e       	add	r12, r31
 502:	d1 1c       	adc	r13, r1
 504:	e1 1c       	adc	r14, r1
 506:	f1 1c       	adc	r15, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-32, 0x29);
 508:	c6 01       	movw	r24, r12
 50a:	80 97       	sbiw	r24, 0x20	; 32
 50c:	69 e2       	ldi	r22, 0x29	; 41
 50e:	0a de       	rcall	.-1004   	; 0x124 <gb_flash_write_bus_cycle>
 510:	8f e1       	ldi	r24, 0x1F	; 31
 512:	93 e0       	ldi	r25, 0x03	; 3
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 518:	00 c0       	rjmp	.+0      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 51a:	00 00       	nop
			_delay_us(200);
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
 51c:	e6 01       	movw	r28, r12
 51e:	21 97       	sbiw	r28, 0x01	; 1
 520:	ce 01       	movw	r24, r28
 522:	f5 dd       	rcall	.-1046   	; 0x10e <gb_flash_read_byte>
			uint8_t verifyCount = 0;
			while (dataVerify != receivedBuffer[31]) {
 524:	18 ec       	ldi	r17, 0xC8	; 200
 526:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <receivedBuffer+0x1f>
 52a:	89 17       	cp	r24, r25
 52c:	09 f4       	brne	.+2      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 52e:	0c c1       	rjmp	.+536    	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
				dataVerify = gb_flash_read_byte(address-1);
 530:	ce 01       	movw	r24, r28
 532:	ed dd       	rcall	.-1062   	; 0x10e <gb_flash_read_byte>
 534:	9a e1       	ldi	r25, 0x1A	; 26
 536:	9a 95       	dec	r25
 538:	f1 f7       	brne	.-4      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 53c:	11 50       	subi	r17, 0x01	; 1
				_delay_us(5);
				verifyCount++;
				if (verifyCount >= 200) {
 53e:	99 f7       	brne	.-26     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 540:	ef ef       	ldi	r30, 0xFF	; 255
 542:	f9 e6       	ldi	r31, 0x69	; 105
 544:	28 e1       	ldi	r18, 0x18	; 24
 546:	e1 50       	subi	r30, 0x01	; 1
 548:	f0 40       	sbci	r31, 0x00	; 0
 54a:	20 40       	sbci	r18, 0x00	; 0
 54c:	e1 f7       	brne	.-8      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 54e:	fa c0       	rjmp	.+500    	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 256 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_256BYTE) {
 550:	88 35       	cpi	r24, 0x58	; 88
 552:	09 f0       	breq	.+2      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 554:	41 c0       	rjmp	.+130    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
			usart_read_bytes(256);
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	87 dd       	rcall	.-1266   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
 55c:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xA9);
 55e:	69 ea       	ldi	r22, 0xA9	; 169
 560:	8a ea       	ldi	r24, 0xAA	; 170
 562:	9a e0       	ldi	r25, 0x0A	; 10
 564:	df dd       	rcall	.-1090   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x56);
 566:	66 e5       	ldi	r22, 0x56	; 86
 568:	85 e5       	ldi	r24, 0x55	; 85
 56a:	95 e0       	ldi	r25, 0x05	; 5
 56c:	db dd       	rcall	.-1098   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
 56e:	56 01       	movw	r10, r12
 570:	66 e2       	ldi	r22, 0x26	; 38
 572:	c6 01       	movw	r24, r12
 574:	d7 dd       	rcall	.-1106   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0xFF); // Length
 576:	6f ef       	ldi	r22, 0xFF	; 255
 578:	c6 01       	movw	r24, r12
 57a:	d4 dd       	rcall	.-1112   	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 57c:	87 ec       	ldi	r24, 0xC7	; 199
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 584:	00 c0       	rjmp	.+0      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 586:	00 00       	nop
 588:	00 e7       	ldi	r16, 0x70	; 112
 58a:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
 58c:	c0 e0       	ldi	r28, 0x00	; 0
 58e:	d0 e0       	ldi	r29, 0x00	; 0
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 590:	f8 01       	movw	r30, r16
 592:	61 91       	ld	r22, Z+
 594:	8f 01       	movw	r16, r30
 596:	ce 01       	movw	r24, r28
 598:	8a 0d       	add	r24, r10
 59a:	9b 1d       	adc	r25, r11
 59c:	c3 dd       	rcall	.-1146   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
			gb_flash_write_bus_cycle(address, 0xFF); // Length
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
 59e:	21 96       	adiw	r28, 0x01	; 1
 5a0:	c1 15       	cp	r28, r1
 5a2:	f1 e0       	ldi	r31, 0x01	; 1
 5a4:	df 07       	cpc	r29, r31
 5a6:	a1 f7       	brne	.-24     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 5a8:	2f ef       	ldi	r18, 0xFF	; 255
 5aa:	d2 1a       	sub	r13, r18
 5ac:	e2 0a       	sbc	r14, r18
 5ae:	f2 0a       	sbc	r15, r18
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-256, 0x2A);
 5b0:	c6 01       	movw	r24, r12
 5b2:	9a 95       	dec	r25
 5b4:	6a e2       	ldi	r22, 0x2A	; 42
 5b6:	b6 dd       	rcall	.-1172   	; 0x124 <gb_flash_write_bus_cycle>
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
 5b8:	e6 01       	movw	r28, r12
 5ba:	21 97       	sbiw	r28, 0x01	; 1
 5bc:	ce 01       	movw	r24, r28
 5be:	a7 dd       	rcall	.-1202   	; 0x10e <gb_flash_read_byte>
			while (dataVerify != receivedBuffer[255]) {
 5c0:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <receivedBuffer+0xff>
 5c4:	89 17       	cp	r24, r25
 5c6:	09 f4       	brne	.+2      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5c8:	bf c0       	rjmp	.+382    	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
				dataVerify = gb_flash_read_byte(address-1);
 5ca:	ce 01       	movw	r24, r28
 5cc:	a0 dd       	rcall	.-1216   	; 0x10e <gb_flash_read_byte>
 5ce:	9a e1       	ldi	r25, 0x1A	; 26
 5d0:	9a 95       	dec	r25
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d6:	f4 cf       	rjmp	.-24     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Nintendo Power 1MB Cart, Write 128 bytes to flash
		else if (receivedChar == GB_FLASH_WRITE_NP_128BYTE) {
 5d8:	8a 35       	cpi	r24, 0x5A	; 90
 5da:	09 f0       	breq	.+2      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 5dc:	b7 c0       	rjmp	.+366    	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
			usart_read_bytes(128);
 5de:	80 e8       	ldi	r24, 0x80	; 128
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	43 dd       	rcall	.-1402   	; 0x6a <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
 5e4:	93 9a       	sbi	0x12, 3	; 18
			
			// Enable flash chip access
			gb_flash_write_bus_cycle(0x120, 0x09);
 5e6:	69 e0       	ldi	r22, 0x09	; 9
 5e8:	80 e2       	ldi	r24, 0x20	; 32
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	9b dd       	rcall	.-1226   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x121, 0xaa);
 5ee:	6a ea       	ldi	r22, 0xAA	; 170
 5f0:	81 e2       	ldi	r24, 0x21	; 33
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	97 dd       	rcall	.-1234   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x122, 0x55);
 5f6:	65 e5       	ldi	r22, 0x55	; 85
 5f8:	82 e2       	ldi	r24, 0x22	; 34
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	93 dd       	rcall	.-1242   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 5fe:	65 ea       	ldi	r22, 0xA5	; 165
 600:	8f e3       	ldi	r24, 0x3F	; 63
 602:	91 e0       	ldi	r25, 0x01	; 1
 604:	8f dd       	rcall	.-1250   	; 0x124 <gb_flash_write_bus_cycle>
 606:	ea e1       	ldi	r30, 0x1A	; 26
 608:	ea 95       	dec	r30
 60a:	f1 f7       	brne	.-4      	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
			_delay_us(5);
			
			// Re-Enable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x11);
 60e:	61 e1       	ldi	r22, 0x11	; 17
 610:	80 e2       	ldi	r24, 0x20	; 32
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	87 dd       	rcall	.-1266   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 616:	65 ea       	ldi	r22, 0xA5	; 165
 618:	8f e3       	ldi	r24, 0x3F	; 63
 61a:	91 e0       	ldi	r25, 0x01	; 1
 61c:	83 dd       	rcall	.-1274   	; 0x124 <gb_flash_write_bus_cycle>
 61e:	fa e1       	ldi	r31, 0x1A	; 26
 620:	fa 95       	dec	r31
 622:	f1 f7       	brne	.-4      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 624:	00 c0       	rjmp	.+0      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
			_delay_us(5);
			
			// Bank 1 for commands
			gb_flash_write_bus_cycle(0x2100, 0x01);
 626:	61 e0       	ldi	r22, 0x01	; 1
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	91 e2       	ldi	r25, 0x21	; 33
 62c:	7b dd       	rcall	.-1290   	; 0x124 <gb_flash_write_bus_cycle>
 62e:	2a e1       	ldi	r18, 0x1A	; 26
 630:	2a 95       	dec	r18
 632:	f1 f7       	brne	.-4      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 634:	00 c0       	rjmp	.+0      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
			_delay_us(5);
			
			
			// Write setup
			gb_flash_write_bus_cycle(0x120, 0x0F);
 636:	6f e0       	ldi	r22, 0x0F	; 15
 638:	80 e2       	ldi	r24, 0x20	; 32
 63a:	91 e0       	ldi	r25, 0x01	; 1
 63c:	73 dd       	rcall	.-1306   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
 63e:	65 e5       	ldi	r22, 0x55	; 85
 640:	85 e2       	ldi	r24, 0x25	; 37
 642:	91 e0       	ldi	r25, 0x01	; 1
 644:	6f dd       	rcall	.-1314   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
 646:	65 e5       	ldi	r22, 0x55	; 85
 648:	86 e2       	ldi	r24, 0x26	; 38
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	6b dd       	rcall	.-1322   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xAA);
 64e:	6a ea       	ldi	r22, 0xAA	; 170
 650:	87 e2       	ldi	r24, 0x27	; 39
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	67 dd       	rcall	.-1330   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
 656:	65 ea       	ldi	r22, 0xA5	; 165
 658:	8f e3       	ldi	r24, 0x3F	; 63
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	63 dd       	rcall	.-1338   	; 0x124 <gb_flash_write_bus_cycle>
 65e:	8a e1       	ldi	r24, 0x1A	; 26
 660:	8a 95       	dec	r24
 662:	f1 f7       	brne	.-4      	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 664:	00 c0       	rjmp	.+0      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
 666:	6f e0       	ldi	r22, 0x0F	; 15
 668:	80 e2       	ldi	r24, 0x20	; 32
 66a:	91 e0       	ldi	r25, 0x01	; 1
 66c:	5b dd       	rcall	.-1354   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x2A);
 66e:	6a e2       	ldi	r22, 0x2A	; 42
 670:	85 e2       	ldi	r24, 0x25	; 37
 672:	91 e0       	ldi	r25, 0x01	; 1
 674:	57 dd       	rcall	.-1362   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0xAA);
 676:	6a ea       	ldi	r22, 0xAA	; 170
 678:	86 e2       	ldi	r24, 0x26	; 38
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	53 dd       	rcall	.-1370   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0x55);
 67e:	65 e5       	ldi	r22, 0x55	; 85
 680:	87 e2       	ldi	r24, 0x27	; 39
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	4f dd       	rcall	.-1378   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
 686:	65 ea       	ldi	r22, 0xA5	; 165
 688:	8f e3       	ldi	r24, 0x3F	; 63
 68a:	91 e0       	ldi	r25, 0x01	; 1
 68c:	4b dd       	rcall	.-1386   	; 0x124 <gb_flash_write_bus_cycle>
 68e:	9a e1       	ldi	r25, 0x1A	; 26
 690:	9a 95       	dec	r25
 692:	f1 f7       	brne	.-4      	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 694:	00 c0       	rjmp	.+0      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
 696:	6f e0       	ldi	r22, 0x0F	; 15
 698:	80 e2       	ldi	r24, 0x20	; 32
 69a:	91 e0       	ldi	r25, 0x01	; 1
 69c:	43 dd       	rcall	.-1402   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
 69e:	65 e5       	ldi	r22, 0x55	; 85
 6a0:	85 e2       	ldi	r24, 0x25	; 37
 6a2:	91 e0       	ldi	r25, 0x01	; 1
 6a4:	3f dd       	rcall	.-1410   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
 6a6:	65 e5       	ldi	r22, 0x55	; 85
 6a8:	86 e2       	ldi	r24, 0x26	; 38
 6aa:	91 e0       	ldi	r25, 0x01	; 1
 6ac:	3b dd       	rcall	.-1418   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xA0);
 6ae:	60 ea       	ldi	r22, 0xA0	; 160
 6b0:	87 e2       	ldi	r24, 0x27	; 39
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	37 dd       	rcall	.-1426   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
 6b6:	65 ea       	ldi	r22, 0xA5	; 165
 6b8:	8f e3       	ldi	r24, 0x3F	; 63
 6ba:	91 e0       	ldi	r25, 0x01	; 1
 6bc:	33 dd       	rcall	.-1434   	; 0x124 <gb_flash_write_bus_cycle>
 6be:	ea e1       	ldi	r30, 0x1A	; 26
 6c0:	ea 95       	dec	r30
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
			_delay_us(5);
			
			// Set bank back
			write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
 6c6:	40 e0       	ldi	r20, 0x00	; 0
 6c8:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	91 e2       	ldi	r25, 0x21	; 33
 6d0:	07 dd       	rcall	.-1522   	; 0xe0 <write_8bit_data>
 6d2:	fa e1       	ldi	r31, 0x1A	; 26
 6d4:	fa 95       	dec	r31
 6d6:	f1 f7       	brne	.-4      	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
			_delay_us(5);
			
			// Disable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x10);
 6da:	60 e1       	ldi	r22, 0x10	; 16
 6dc:	80 e2       	ldi	r24, 0x20	; 32
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	21 dd       	rcall	.-1470   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 6e2:	65 ea       	ldi	r22, 0xA5	; 165
 6e4:	8f e3       	ldi	r24, 0x3F	; 63
 6e6:	91 e0       	ldi	r25, 0x01	; 1
 6e8:	1d dd       	rcall	.-1478   	; 0x124 <gb_flash_write_bus_cycle>
 6ea:	2a e1       	ldi	r18, 0x1A	; 26
 6ec:	2a 95       	dec	r18
 6ee:	f1 f7       	brne	.-4      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
 6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
			_delay_us(5);
			
			// Undo Wakeup
			gb_flash_write_bus_cycle(0x120, 0x08);
 6f2:	68 e0       	ldi	r22, 0x08	; 8
 6f4:	80 e2       	ldi	r24, 0x20	; 32
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	15 dd       	rcall	.-1494   	; 0x124 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
 6fa:	65 ea       	ldi	r22, 0xA5	; 165
 6fc:	8f e3       	ldi	r24, 0x3F	; 63
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	11 dd       	rcall	.-1502   	; 0x124 <gb_flash_write_bus_cycle>
 702:	8a e1       	ldi	r24, 0x1A	; 26
 704:	8a 95       	dec	r24
 706:	f1 f7       	brne	.-4      	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 708:	00 c0       	rjmp	.+0      	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
 70a:	c0 e7       	ldi	r28, 0x70	; 112
 70c:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_us(5);
			
			
			// Write data
			for (uint8_t x = 0; x < 128; x++) {
 70e:	6c 16       	cp	r6, r28
 710:	7d 06       	cpc	r7, r29
 712:	69 f0       	breq	.+26     	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 714:	69 91       	ld	r22, Y+
 716:	c6 01       	movw	r24, r12
 718:	05 dd       	rcall	.-1526   	; 0x124 <gb_flash_write_bus_cycle>
 71a:	9a e1       	ldi	r25, 0x1A	; 26
 71c:	9a 95       	dec	r25
 71e:	f1 f7       	brne	.-4      	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
 720:	00 c0       	rjmp	.+0      	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
				_delay_us(5);
				address++;
 722:	ef ef       	ldi	r30, 0xFF	; 255
 724:	ce 1a       	sub	r12, r30
 726:	de 0a       	sbc	r13, r30
 728:	ee 0a       	sbc	r14, r30
 72a:	fe 0a       	sbc	r15, r30
 72c:	f0 cf       	rjmp	.-32     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
			}
			
			// Write buffer to flash
			address--;
			gb_flash_write_bus_cycle(address, 0xFF);
 72e:	6f ef       	ldi	r22, 0xFF	; 255
 730:	d7 01       	movw	r26, r14
 732:	c6 01       	movw	r24, r12
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	a1 09       	sbc	r26, r1
 738:	b1 09       	sbc	r27, r1
 73a:	f4 dc       	rcall	.-1560   	; 0x124 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 73c:	8f e3       	ldi	r24, 0x3F	; 63
 73e:	9c e9       	ldi	r25, 0x9C	; 156
 740:	01 97       	sbiw	r24, 0x01	; 1
 742:	f1 f7       	brne	.-4      	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
 744:	00 c0       	rjmp	.+0      	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 746:	00 00       	nop
			address++;
			_delay_ms(10);
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
 748:	81 e3       	ldi	r24, 0x31	; 49
 74a:	c3 c0       	rjmp	.+390    	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
		
		
		// ---------- General commands ----------
		// Set any pin as input/output
		// Reads the DDR/PORT (e.g. DDRB/PORTB is 'B') and the hex value that represents pins to set to an input (e.g. PB7 is 0x80)
		else if (receivedChar == SET_INPUT || receivedChar == SET_OUTPUT) {
 74c:	89 34       	cpi	r24, 0x49	; 73
 74e:	19 f0       	breq	.+6      	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
 750:	8f 34       	cpi	r24, 0x4F	; 79
 752:	09 f0       	breq	.+2      	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
 754:	50 c0       	rjmp	.+160    	; 0x7f6 <__LOCK_REGION_LENGTH__+0x3f6>
			char portChar = USART_Receive();
 756:	81 dc       	rcall	.-1790   	; 0x5a <USART_Receive>
 758:	c8 2f       	mov	r28, r24
			usart_read_chars();
 75a:	9c dc       	rcall	.-1736   	; 0x94 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 75c:	40 e1       	ldi	r20, 0x10	; 16
 75e:	50 e0       	ldi	r21, 0x00	; 0
 760:	60 e0       	ldi	r22, 0x00	; 0
 762:	70 e0       	ldi	r23, 0x00	; 0
 764:	80 e7       	ldi	r24, 0x70	; 112
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	e9 d0       	rcall	.+466    	; 0x93c <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 76a:	93 9a       	sbi	0x12, 3	; 18
			if (receivedChar == SET_INPUT) {
 76c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
 770:	89 34       	cpi	r24, 0x49	; 73
 772:	f9 f4       	brne	.+62     	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
				if (portChar == 'A') {
 774:	c1 34       	cpi	r28, 0x41	; 65
 776:	21 f4       	brne	.+8      	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
					DDRA &= ~(setValue);
 778:	8a b3       	in	r24, 0x1a	; 26
 77a:	60 95       	com	r22
 77c:	68 23       	and	r22, r24
 77e:	20 c0       	rjmp	.+64     	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
				}
				else if (portChar == 'B') {
 780:	c2 34       	cpi	r28, 0x42	; 66
 782:	21 f4       	brne	.+8      	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
					DDRB &= ~(setValue);
 784:	87 b3       	in	r24, 0x17	; 23
 786:	60 95       	com	r22
 788:	68 23       	and	r22, r24
 78a:	20 c0       	rjmp	.+64     	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
				}
				else if (portChar == 'C') {
 78c:	c3 34       	cpi	r28, 0x43	; 67
 78e:	21 f4       	brne	.+8      	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
					DDRC &= ~(setValue);
 790:	84 b3       	in	r24, 0x14	; 20
 792:	60 95       	com	r22
 794:	68 23       	and	r22, r24
 796:	20 c0       	rjmp	.+64     	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
				}
				else if (portChar == 'D') {
 798:	c4 34       	cpi	r28, 0x44	; 68
 79a:	21 f4       	brne	.+8      	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
					DDRD &= ~(setValue);
 79c:	81 b3       	in	r24, 0x11	; 17
 79e:	60 95       	com	r22
 7a0:	68 23       	and	r22, r24
 7a2:	20 c0       	rjmp	.+64     	; 0x7e4 <__LOCK_REGION_LENGTH__+0x3e4>
				}
				else if (portChar == 'E') {
 7a4:	c5 34       	cpi	r28, 0x45	; 69
 7a6:	09 f0       	breq	.+2      	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
 7a8:	95 c0       	rjmp	.+298    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
					DDRE &= ~(setValue);
 7aa:	86 b1       	in	r24, 0x06	; 6
 7ac:	60 95       	com	r22
 7ae:	68 23       	and	r22, r24
 7b0:	20 c0       	rjmp	.+64     	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
				}
			}
			else if (receivedChar == SET_OUTPUT) {
 7b2:	8f 34       	cpi	r24, 0x4F	; 79
 7b4:	09 f0       	breq	.+2      	; 0x7b8 <__LOCK_REGION_LENGTH__+0x3b8>
 7b6:	8e c0       	rjmp	.+284    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
				if (portChar == 'A') {
 7b8:	c1 34       	cpi	r28, 0x41	; 65
 7ba:	21 f4       	brne	.+8      	; 0x7c4 <__LOCK_REGION_LENGTH__+0x3c4>
					DDRA |= (setValue);
 7bc:	8a b3       	in	r24, 0x1a	; 26
 7be:	68 2b       	or	r22, r24
 7c0:	6a bb       	out	0x1a, r22	; 26
 7c2:	88 c0       	rjmp	.+272    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
				}
				else if (portChar == 'B') {
 7c4:	c2 34       	cpi	r28, 0x42	; 66
 7c6:	21 f4       	brne	.+8      	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
					DDRB |= (setValue);
 7c8:	87 b3       	in	r24, 0x17	; 23
 7ca:	68 2b       	or	r22, r24
 7cc:	67 bb       	out	0x17, r22	; 23
 7ce:	82 c0       	rjmp	.+260    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
				}
				else if (portChar == 'C') {
 7d0:	c3 34       	cpi	r28, 0x43	; 67
 7d2:	21 f4       	brne	.+8      	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
					DDRC |= (setValue);
 7d4:	84 b3       	in	r24, 0x14	; 20
 7d6:	68 2b       	or	r22, r24
 7d8:	64 bb       	out	0x14, r22	; 20
 7da:	7c c0       	rjmp	.+248    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
				}
				else if (portChar == 'D') {
 7dc:	c4 34       	cpi	r28, 0x44	; 68
 7de:	21 f4       	brne	.+8      	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
					DDRD |= (setValue);
 7e0:	81 b3       	in	r24, 0x11	; 17
 7e2:	68 2b       	or	r22, r24
 7e4:	61 bb       	out	0x11, r22	; 17
 7e6:	76 c0       	rjmp	.+236    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
				}
				else if (portChar == 'E') {
 7e8:	c5 34       	cpi	r28, 0x45	; 69
 7ea:	09 f0       	breq	.+2      	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
 7ec:	73 c0       	rjmp	.+230    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
					DDRE |= (setValue);
 7ee:	86 b1       	in	r24, 0x06	; 6
 7f0:	68 2b       	or	r22, r24
 7f2:	66 b9       	out	0x06, r22	; 6
 7f4:	6f c0       	rjmp	.+222    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as low
		else if (receivedChar == SET_OUTPUT_LOW) {
 7f6:	8c 34       	cpi	r24, 0x4C	; 76
 7f8:	51 f5       	brne	.+84     	; 0x84e <__LOCK_REGION_LENGTH__+0x44e>
			char portChar = USART_Receive();			
 7fa:	2f dc       	rcall	.-1954   	; 0x5a <USART_Receive>
 7fc:	c8 2f       	mov	r28, r24
			usart_read_chars();
 7fe:	4a dc       	rcall	.-1900   	; 0x94 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 800:	40 e1       	ldi	r20, 0x10	; 16
 802:	50 e0       	ldi	r21, 0x00	; 0
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	80 e7       	ldi	r24, 0x70	; 112
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	97 d0       	rcall	.+302    	; 0x93c <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 80e:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 810:	c1 34       	cpi	r28, 0x41	; 65
 812:	21 f4       	brne	.+8      	; 0x81c <__LOCK_REGION_LENGTH__+0x41c>
				PORTA &= ~(setValue);
 814:	8b b3       	in	r24, 0x1b	; 27
 816:	60 95       	com	r22
 818:	68 23       	and	r22, r24
 81a:	2a c0       	rjmp	.+84     	; 0x870 <__LOCK_REGION_LENGTH__+0x470>
			}
			else if (portChar == 'B') {
 81c:	c2 34       	cpi	r28, 0x42	; 66
 81e:	21 f4       	brne	.+8      	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
				PORTB &= ~(setValue);
 820:	88 b3       	in	r24, 0x18	; 24
 822:	60 95       	com	r22
 824:	68 23       	and	r22, r24
 826:	2a c0       	rjmp	.+84     	; 0x87c <__LOCK_REGION_LENGTH__+0x47c>
			}
			else if (portChar == 'C') {
 828:	c3 34       	cpi	r28, 0x43	; 67
 82a:	21 f4       	brne	.+8      	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
				PORTC &= ~(setValue);
 82c:	85 b3       	in	r24, 0x15	; 21
 82e:	60 95       	com	r22
 830:	68 23       	and	r22, r24
 832:	2a c0       	rjmp	.+84     	; 0x888 <__LOCK_REGION_LENGTH__+0x488>
			}
			else if (portChar == 'D') {
 834:	c4 34       	cpi	r28, 0x44	; 68
 836:	21 f4       	brne	.+8      	; 0x840 <__LOCK_REGION_LENGTH__+0x440>
				PORTD &= ~(setValue);
 838:	82 b3       	in	r24, 0x12	; 18
 83a:	60 95       	com	r22
 83c:	68 23       	and	r22, r24
 83e:	2a c0       	rjmp	.+84     	; 0x894 <__LOCK_REGION_LENGTH__+0x494>
			}
			else if (portChar == 'E') {
 840:	c5 34       	cpi	r28, 0x45	; 69
 842:	09 f0       	breq	.+2      	; 0x846 <__LOCK_REGION_LENGTH__+0x446>
 844:	47 c0       	rjmp	.+142    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
				PORTE &= ~(setValue);
 846:	87 b1       	in	r24, 0x07	; 7
 848:	60 95       	com	r22
 84a:	68 23       	and	r22, r24
 84c:	29 c0       	rjmp	.+82     	; 0x8a0 <__LOCK_REGION_LENGTH__+0x4a0>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as high
		else if (receivedChar == SET_OUTPUT_HIGH) {
 84e:	88 34       	cpi	r24, 0x48	; 72
 850:	49 f5       	brne	.+82     	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
			char portChar = USART_Receive();			
 852:	03 dc       	rcall	.-2042   	; 0x5a <USART_Receive>
 854:	c8 2f       	mov	r28, r24
			usart_read_chars();
 856:	1e dc       	rcall	.-1988   	; 0x94 <usart_read_chars>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 858:	40 e1       	ldi	r20, 0x10	; 16
 85a:	50 e0       	ldi	r21, 0x00	; 0
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	80 e7       	ldi	r24, 0x70	; 112
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	6b d0       	rcall	.+214    	; 0x93c <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
 866:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 868:	c1 34       	cpi	r28, 0x41	; 65
 86a:	21 f4       	brne	.+8      	; 0x874 <__LOCK_REGION_LENGTH__+0x474>
				PORTA |= (setValue);
 86c:	8b b3       	in	r24, 0x1b	; 27
 86e:	68 2b       	or	r22, r24
 870:	6b bb       	out	0x1b, r22	; 27
 872:	30 c0       	rjmp	.+96     	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
			}
			else if (portChar == 'B') {
 874:	c2 34       	cpi	r28, 0x42	; 66
 876:	21 f4       	brne	.+8      	; 0x880 <__LOCK_REGION_LENGTH__+0x480>
				PORTB |= (setValue);
 878:	88 b3       	in	r24, 0x18	; 24
 87a:	68 2b       	or	r22, r24
 87c:	68 bb       	out	0x18, r22	; 24
 87e:	2a c0       	rjmp	.+84     	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
			}
			else if (portChar == 'C') {
 880:	c3 34       	cpi	r28, 0x43	; 67
 882:	21 f4       	brne	.+8      	; 0x88c <__LOCK_REGION_LENGTH__+0x48c>
				PORTC |= (setValue);
 884:	85 b3       	in	r24, 0x15	; 21
 886:	68 2b       	or	r22, r24
 888:	65 bb       	out	0x15, r22	; 21
 88a:	24 c0       	rjmp	.+72     	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
			}
			else if (portChar == 'D') {
 88c:	c4 34       	cpi	r28, 0x44	; 68
 88e:	21 f4       	brne	.+8      	; 0x898 <__LOCK_REGION_LENGTH__+0x498>
				PORTD |= (setValue);
 890:	82 b3       	in	r24, 0x12	; 18
 892:	68 2b       	or	r22, r24
 894:	62 bb       	out	0x12, r22	; 18
 896:	1e c0       	rjmp	.+60     	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
			}
			else if (portChar == 'E') {
 898:	c5 34       	cpi	r28, 0x45	; 69
 89a:	e1 f4       	brne	.+56     	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
				PORTE |= (setValue);
 89c:	87 b1       	in	r24, 0x07	; 7
 89e:	68 2b       	or	r22, r24
 8a0:	67 b9       	out	0x07, r22	; 7
 8a2:	18 c0       	rjmp	.+48     	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Read all pins of a PORT and return the value
		else if (receivedChar == READ_INPUT) {
 8a4:	84 34       	cpi	r24, 0x44	; 68
 8a6:	c1 f4       	brne	.+48     	; 0x8d8 <__LOCK_REGION_LENGTH__+0x4d8>
			char portChar = USART_Receive();			
 8a8:	d8 db       	rcall	.-2128   	; 0x5a <USART_Receive>
			
			PORTD |= (1<<ACTIVITY_LED);
 8aa:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
 8ac:	81 34       	cpi	r24, 0x41	; 65
 8ae:	11 f4       	brne	.+4      	; 0x8b4 <__LOCK_REGION_LENGTH__+0x4b4>
				USART_Transmit(PINA);
 8b0:	89 b3       	in	r24, 0x19	; 25
 8b2:	0f c0       	rjmp	.+30     	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
			}
			else if (portChar == 'B') {
 8b4:	82 34       	cpi	r24, 0x42	; 66
 8b6:	11 f4       	brne	.+4      	; 0x8bc <__LOCK_REGION_LENGTH__+0x4bc>
				USART_Transmit(PINB);
 8b8:	86 b3       	in	r24, 0x16	; 22
 8ba:	0b c0       	rjmp	.+22     	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
			}
			else if (portChar == 'C') {
 8bc:	83 34       	cpi	r24, 0x43	; 67
 8be:	11 f4       	brne	.+4      	; 0x8c4 <__LOCK_REGION_LENGTH__+0x4c4>
				USART_Transmit(PINC);
 8c0:	83 b3       	in	r24, 0x13	; 19
 8c2:	07 c0       	rjmp	.+14     	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
			}
			else if (portChar == 'D') {
 8c4:	84 34       	cpi	r24, 0x44	; 68
 8c6:	11 f4       	brne	.+4      	; 0x8cc <__LOCK_REGION_LENGTH__+0x4cc>
				USART_Transmit(PIND);
 8c8:	80 b3       	in	r24, 0x10	; 16
 8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
			}
			else if (portChar == 'E') {
 8cc:	85 34       	cpi	r24, 0x45	; 69
 8ce:	11 f4       	brne	.+4      	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
				USART_Transmit(PINE);
 8d0:	85 b1       	in	r24, 0x05	; 5
 8d2:	c7 db       	rcall	.-2162   	; 0x62 <USART_Transmit>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
 8d4:	93 98       	cbi	0x12, 3	; 18
 8d6:	02 cd       	rjmp	.-1532   	; 0x2dc <main+0x1e>
		}
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
 8d8:	8d 34       	cpi	r24, 0x4D	; 77
 8da:	59 f4       	brne	.+22     	; 0x8f2 <__LOCK_REGION_LENGTH__+0x4f2>
			char commonChar = USART_Receive();
 8dc:	be db       	rcall	.-2180   	; 0x5a <USART_Receive>
			if (commonChar == '1') {
 8de:	81 33       	cpi	r24, 0x31	; 49
 8e0:	19 f4       	brne	.+6      	; 0x8e8 <__LOCK_REGION_LENGTH__+0x4e8>
				resetCommonLines = 1;
 8e2:	55 24       	eor	r5, r5
 8e4:	53 94       	inc	r5
 8e6:	fd cc       	rjmp	.-1542   	; 0x2e2 <main+0x24>
			}
			else if (commonChar == '0') {
 8e8:	80 33       	cpi	r24, 0x30	; 48
 8ea:	09 f0       	breq	.+2      	; 0x8ee <__LOCK_REGION_LENGTH__+0x4ee>
 8ec:	f7 cc       	rjmp	.-1554   	; 0x2dc <main+0x1e>
				resetCommonLines = 0;
 8ee:	51 2c       	mov	r5, r1
 8f0:	f9 cc       	rjmp	.-1550   	; 0x2e4 <main+0x26>
			}
		}
		
		// Send back the PCB version number
		else if (receivedChar == READ_PCB_VERSION) {
 8f2:	88 36       	cpi	r24, 0x68	; 104
 8f4:	11 f4       	brne	.+4      	; 0x8fa <__LOCK_REGION_LENGTH__+0x4fa>
			USART_Transmit(PCB_VERSION);
 8f6:	84 e6       	ldi	r24, 0x64	; 100
 8f8:	03 c0       	rjmp	.+6      	; 0x900 <__LOCK_REGION_LENGTH__+0x500>
		}
		
		// Send back the firmware version number
		else if (receivedChar == READ_FIRMWARE_VERSION) {
 8fa:	86 35       	cpi	r24, 0x56	; 86
 8fc:	19 f4       	brne	.+6      	; 0x904 <__LOCK_REGION_LENGTH__+0x504>
			USART_Transmit(FIRMWARE_VERSION);
 8fe:	8e e0       	ldi	r24, 0x0E	; 14
 900:	b0 db       	rcall	.-2208   	; 0x62 <USART_Transmit>
 902:	ec cc       	rjmp	.-1576   	; 0x2dc <main+0x1e>
		}
		
		// Reset the AVR if it matches the number
		else if (receivedChar == RESET_AVR) {
 904:	8a 32       	cpi	r24, 0x2A	; 42
 906:	09 f0       	breq	.+2      	; 0x90a <__LOCK_REGION_LENGTH__+0x50a>
 908:	e9 cc       	rjmp	.-1582   	; 0x2dc <main+0x1e>
			usart_read_chars();
 90a:	c4 db       	rcall	.-2168   	; 0x94 <usart_read_chars>
			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
 90c:	40 e1       	ldi	r20, 0x10	; 16
 90e:	50 e0       	ldi	r21, 0x00	; 0
 910:	60 e0       	ldi	r22, 0x00	; 0
 912:	70 e0       	ldi	r23, 0x00	; 0
 914:	80 e7       	ldi	r24, 0x70	; 112
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	11 d0       	rcall	.+34     	; 0x93c <strtol>
			if (resetValue == RESET_VALUE) {
 91a:	61 3e       	cpi	r22, 0xE1	; 225
 91c:	75 4e       	sbci	r23, 0xE5	; 229
 91e:	87 40       	sbci	r24, 0x07	; 7
 920:	91 05       	cpc	r25, r1
 922:	09 f0       	breq	.+2      	; 0x926 <__LOCK_REGION_LENGTH__+0x526>
 924:	db cc       	rjmp	.-1610   	; 0x2dc <main+0x1e>
				// Clear watchdog flag
				MCUCSR &= ~(1<<WDRF);
 926:	84 b7       	in	r24, 0x34	; 52
 928:	87 7f       	andi	r24, 0xF7	; 247
 92a:	84 bf       	out	0x34, r24	; 52
				
				// Start timed sequence
				WDTCR = (1<<WDCE) | (1<<WDE);
 92c:	f8 e1       	ldi	r31, 0x18	; 24
 92e:	f1 bd       	out	0x21, r31	; 33
				
				// Reset in 250 ms
				WDTCR = (1<<WDP2) | (1<<WDE);
 930:	2c e0       	ldi	r18, 0x0C	; 12
 932:	21 bd       	out	0x21, r18	; 33
 934:	c1 01       	movw	r24, r2
 936:	01 97       	sbiw	r24, 0x01	; 1
 938:	f1 f7       	brne	.-4      	; 0x936 <__LOCK_REGION_LENGTH__+0x536>
 93a:	d0 cc       	rjmp	.-1632   	; 0x2dc <main+0x1e>

0000093c <strtol>:
 93c:	a0 e0       	ldi	r26, 0x00	; 0
 93e:	b0 e0       	ldi	r27, 0x00	; 0
 940:	e3 ea       	ldi	r30, 0xA3	; 163
 942:	f4 e0       	ldi	r31, 0x04	; 4
 944:	78 c1       	rjmp	.+752    	; 0xc36 <__prologue_saves__+0x2>
 946:	5c 01       	movw	r10, r24
 948:	6b 01       	movw	r12, r22
 94a:	7a 01       	movw	r14, r20
 94c:	61 15       	cp	r22, r1
 94e:	71 05       	cpc	r23, r1
 950:	19 f0       	breq	.+6      	; 0x958 <strtol+0x1c>
 952:	fb 01       	movw	r30, r22
 954:	91 83       	std	Z+1, r25	; 0x01
 956:	80 83       	st	Z, r24
 958:	e1 14       	cp	r14, r1
 95a:	f1 04       	cpc	r15, r1
 95c:	29 f0       	breq	.+10     	; 0x968 <strtol+0x2c>
 95e:	c7 01       	movw	r24, r14
 960:	02 97       	sbiw	r24, 0x02	; 2
 962:	83 97       	sbiw	r24, 0x23	; 35
 964:	08 f0       	brcs	.+2      	; 0x968 <strtol+0x2c>
 966:	e2 c0       	rjmp	.+452    	; 0xb2c <strtol+0x1f0>
 968:	e5 01       	movw	r28, r10
 96a:	21 96       	adiw	r28, 0x01	; 1
 96c:	f5 01       	movw	r30, r10
 96e:	10 81       	ld	r17, Z
 970:	81 2f       	mov	r24, r17
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	11 d1       	rcall	.+546    	; 0xb98 <isspace>
 976:	89 2b       	or	r24, r25
 978:	11 f0       	breq	.+4      	; 0x97e <strtol+0x42>
 97a:	5e 01       	movw	r10, r28
 97c:	f5 cf       	rjmp	.-22     	; 0x968 <strtol+0x2c>
 97e:	1d 32       	cpi	r17, 0x2D	; 45
 980:	29 f4       	brne	.+10     	; 0x98c <strtol+0x50>
 982:	21 96       	adiw	r28, 0x01	; 1
 984:	f5 01       	movw	r30, r10
 986:	11 81       	ldd	r17, Z+1	; 0x01
 988:	01 e0       	ldi	r16, 0x01	; 1
 98a:	07 c0       	rjmp	.+14     	; 0x99a <strtol+0x5e>
 98c:	1b 32       	cpi	r17, 0x2B	; 43
 98e:	21 f4       	brne	.+8      	; 0x998 <strtol+0x5c>
 990:	e5 01       	movw	r28, r10
 992:	22 96       	adiw	r28, 0x02	; 2
 994:	f5 01       	movw	r30, r10
 996:	11 81       	ldd	r17, Z+1	; 0x01
 998:	00 e0       	ldi	r16, 0x00	; 0
 99a:	e1 14       	cp	r14, r1
 99c:	f1 04       	cpc	r15, r1
 99e:	09 f1       	breq	.+66     	; 0x9e2 <strtol+0xa6>
 9a0:	f0 e1       	ldi	r31, 0x10	; 16
 9a2:	ef 16       	cp	r14, r31
 9a4:	f1 04       	cpc	r15, r1
 9a6:	29 f4       	brne	.+10     	; 0x9b2 <strtol+0x76>
 9a8:	3e c0       	rjmp	.+124    	; 0xa26 <strtol+0xea>
 9aa:	10 e3       	ldi	r17, 0x30	; 48
 9ac:	e1 14       	cp	r14, r1
 9ae:	f1 04       	cpc	r15, r1
 9b0:	21 f1       	breq	.+72     	; 0x9fa <strtol+0xbe>
 9b2:	28 e0       	ldi	r18, 0x08	; 8
 9b4:	e2 16       	cp	r14, r18
 9b6:	f1 04       	cpc	r15, r1
 9b8:	01 f1       	breq	.+64     	; 0x9fa <strtol+0xbe>
 9ba:	54 f4       	brge	.+20     	; 0x9d0 <strtol+0x94>
 9bc:	e2 e0       	ldi	r30, 0x02	; 2
 9be:	ee 16       	cp	r14, r30
 9c0:	f1 04       	cpc	r15, r1
 9c2:	21 f5       	brne	.+72     	; 0xa0c <strtol+0xd0>
 9c4:	81 2c       	mov	r8, r1
 9c6:	91 2c       	mov	r9, r1
 9c8:	a1 2c       	mov	r10, r1
 9ca:	b0 e4       	ldi	r27, 0x40	; 64
 9cc:	bb 2e       	mov	r11, r27
 9ce:	3d c0       	rjmp	.+122    	; 0xa4a <strtol+0x10e>
 9d0:	fa e0       	ldi	r31, 0x0A	; 10
 9d2:	ef 16       	cp	r14, r31
 9d4:	f1 04       	cpc	r15, r1
 9d6:	39 f0       	breq	.+14     	; 0x9e6 <strtol+0xaa>
 9d8:	20 e1       	ldi	r18, 0x10	; 16
 9da:	e2 16       	cp	r14, r18
 9dc:	f1 04       	cpc	r15, r1
 9de:	b1 f4       	brne	.+44     	; 0xa0c <strtol+0xd0>
 9e0:	2f c0       	rjmp	.+94     	; 0xa40 <strtol+0x104>
 9e2:	10 33       	cpi	r17, 0x30	; 48
 9e4:	11 f1       	breq	.+68     	; 0xa2a <strtol+0xee>
 9e6:	fa e0       	ldi	r31, 0x0A	; 10
 9e8:	ef 2e       	mov	r14, r31
 9ea:	f1 2c       	mov	r15, r1
 9ec:	ac ec       	ldi	r26, 0xCC	; 204
 9ee:	8a 2e       	mov	r8, r26
 9f0:	98 2c       	mov	r9, r8
 9f2:	a8 2c       	mov	r10, r8
 9f4:	ac e0       	ldi	r26, 0x0C	; 12
 9f6:	ba 2e       	mov	r11, r26
 9f8:	28 c0       	rjmp	.+80     	; 0xa4a <strtol+0x10e>
 9fa:	78 e0       	ldi	r23, 0x08	; 8
 9fc:	e7 2e       	mov	r14, r23
 9fe:	f1 2c       	mov	r15, r1
 a00:	81 2c       	mov	r8, r1
 a02:	91 2c       	mov	r9, r1
 a04:	a1 2c       	mov	r10, r1
 a06:	e0 e1       	ldi	r30, 0x10	; 16
 a08:	be 2e       	mov	r11, r30
 a0a:	1f c0       	rjmp	.+62     	; 0xa4a <strtol+0x10e>
 a0c:	60 e0       	ldi	r22, 0x00	; 0
 a0e:	70 e0       	ldi	r23, 0x00	; 0
 a10:	80 e0       	ldi	r24, 0x00	; 0
 a12:	90 e8       	ldi	r25, 0x80	; 128
 a14:	97 01       	movw	r18, r14
 a16:	0f 2c       	mov	r0, r15
 a18:	00 0c       	add	r0, r0
 a1a:	44 0b       	sbc	r20, r20
 a1c:	55 0b       	sbc	r21, r21
 a1e:	de d0       	rcall	.+444    	; 0xbdc <__udivmodsi4>
 a20:	49 01       	movw	r8, r18
 a22:	5a 01       	movw	r10, r20
 a24:	12 c0       	rjmp	.+36     	; 0xa4a <strtol+0x10e>
 a26:	10 33       	cpi	r17, 0x30	; 48
 a28:	59 f4       	brne	.+22     	; 0xa40 <strtol+0x104>
 a2a:	88 81       	ld	r24, Y
 a2c:	8f 7d       	andi	r24, 0xDF	; 223
 a2e:	88 35       	cpi	r24, 0x58	; 88
 a30:	09 f0       	breq	.+2      	; 0xa34 <strtol+0xf8>
 a32:	bb cf       	rjmp	.-138    	; 0x9aa <strtol+0x6e>
 a34:	19 81       	ldd	r17, Y+1	; 0x01
 a36:	22 96       	adiw	r28, 0x02	; 2
 a38:	02 60       	ori	r16, 0x02	; 2
 a3a:	80 e1       	ldi	r24, 0x10	; 16
 a3c:	e8 2e       	mov	r14, r24
 a3e:	f1 2c       	mov	r15, r1
 a40:	81 2c       	mov	r8, r1
 a42:	91 2c       	mov	r9, r1
 a44:	a1 2c       	mov	r10, r1
 a46:	68 e0       	ldi	r22, 0x08	; 8
 a48:	b6 2e       	mov	r11, r22
 a4a:	40 e0       	ldi	r20, 0x00	; 0
 a4c:	60 e0       	ldi	r22, 0x00	; 0
 a4e:	70 e0       	ldi	r23, 0x00	; 0
 a50:	cb 01       	movw	r24, r22
 a52:	27 01       	movw	r4, r14
 a54:	0f 2c       	mov	r0, r15
 a56:	00 0c       	add	r0, r0
 a58:	66 08       	sbc	r6, r6
 a5a:	77 08       	sbc	r7, r7
 a5c:	fe 01       	movw	r30, r28
 a5e:	50 ed       	ldi	r21, 0xD0	; 208
 a60:	35 2e       	mov	r3, r21
 a62:	31 0e       	add	r3, r17
 a64:	29 e0       	ldi	r18, 0x09	; 9
 a66:	23 15       	cp	r18, r3
 a68:	70 f4       	brcc	.+28     	; 0xa86 <strtol+0x14a>
 a6a:	2f eb       	ldi	r18, 0xBF	; 191
 a6c:	21 0f       	add	r18, r17
 a6e:	2a 31       	cpi	r18, 0x1A	; 26
 a70:	18 f4       	brcc	.+6      	; 0xa78 <strtol+0x13c>
 a72:	39 ec       	ldi	r19, 0xC9	; 201
 a74:	33 2e       	mov	r3, r19
 a76:	06 c0       	rjmp	.+12     	; 0xa84 <strtol+0x148>
 a78:	2f e9       	ldi	r18, 0x9F	; 159
 a7a:	21 0f       	add	r18, r17
 a7c:	2a 31       	cpi	r18, 0x1A	; 26
 a7e:	10 f5       	brcc	.+68     	; 0xac4 <strtol+0x188>
 a80:	29 ea       	ldi	r18, 0xA9	; 169
 a82:	32 2e       	mov	r3, r18
 a84:	31 0e       	add	r3, r17
 a86:	23 2d       	mov	r18, r3
 a88:	30 e0       	ldi	r19, 0x00	; 0
 a8a:	2e 15       	cp	r18, r14
 a8c:	3f 05       	cpc	r19, r15
 a8e:	d4 f4       	brge	.+52     	; 0xac4 <strtol+0x188>
 a90:	47 fd       	sbrc	r20, 7
 a92:	15 c0       	rjmp	.+42     	; 0xabe <strtol+0x182>
 a94:	86 16       	cp	r8, r22
 a96:	97 06       	cpc	r9, r23
 a98:	a8 06       	cpc	r10, r24
 a9a:	b9 06       	cpc	r11, r25
 a9c:	68 f0       	brcs	.+26     	; 0xab8 <strtol+0x17c>
 a9e:	a3 01       	movw	r20, r6
 aa0:	92 01       	movw	r18, r4
 aa2:	8d d0       	rcall	.+282    	; 0xbbe <__mulsi3>
 aa4:	63 0d       	add	r22, r3
 aa6:	71 1d       	adc	r23, r1
 aa8:	81 1d       	adc	r24, r1
 aaa:	91 1d       	adc	r25, r1
 aac:	61 30       	cpi	r22, 0x01	; 1
 aae:	71 05       	cpc	r23, r1
 ab0:	81 05       	cpc	r24, r1
 ab2:	20 e8       	ldi	r18, 0x80	; 128
 ab4:	92 07       	cpc	r25, r18
 ab6:	10 f0       	brcs	.+4      	; 0xabc <strtol+0x180>
 ab8:	4f ef       	ldi	r20, 0xFF	; 255
 aba:	01 c0       	rjmp	.+2      	; 0xabe <strtol+0x182>
 abc:	41 e0       	ldi	r20, 0x01	; 1
 abe:	21 96       	adiw	r28, 0x01	; 1
 ac0:	10 81       	ld	r17, Z
 ac2:	cc cf       	rjmp	.-104    	; 0xa5c <strtol+0x120>
 ac4:	20 2f       	mov	r18, r16
 ac6:	21 70       	andi	r18, 0x01	; 1
 ac8:	c1 14       	cp	r12, r1
 aca:	d1 04       	cpc	r13, r1
 acc:	71 f0       	breq	.+28     	; 0xaea <strtol+0x1ae>
 ace:	44 23       	and	r20, r20
 ad0:	29 f0       	breq	.+10     	; 0xadc <strtol+0x1a0>
 ad2:	21 97       	sbiw	r28, 0x01	; 1
 ad4:	f6 01       	movw	r30, r12
 ad6:	d1 83       	std	Z+1, r29	; 0x01
 ad8:	c0 83       	st	Z, r28
 ada:	07 c0       	rjmp	.+14     	; 0xaea <strtol+0x1ae>
 adc:	01 ff       	sbrs	r16, 1
 ade:	19 c0       	rjmp	.+50     	; 0xb12 <strtol+0x1d6>
 ae0:	22 97       	sbiw	r28, 0x02	; 2
 ae2:	f6 01       	movw	r30, r12
 ae4:	d1 83       	std	Z+1, r29	; 0x01
 ae6:	c0 83       	st	Z, r28
 ae8:	14 c0       	rjmp	.+40     	; 0xb12 <strtol+0x1d6>
 aea:	47 ff       	sbrs	r20, 7
 aec:	12 c0       	rjmp	.+36     	; 0xb12 <strtol+0x1d6>
 aee:	22 23       	and	r18, r18
 af0:	29 f0       	breq	.+10     	; 0xafc <strtol+0x1c0>
 af2:	60 e0       	ldi	r22, 0x00	; 0
 af4:	70 e0       	ldi	r23, 0x00	; 0
 af6:	80 e0       	ldi	r24, 0x00	; 0
 af8:	90 e8       	ldi	r25, 0x80	; 128
 afa:	04 c0       	rjmp	.+8      	; 0xb04 <strtol+0x1c8>
 afc:	6f ef       	ldi	r22, 0xFF	; 255
 afe:	7f ef       	ldi	r23, 0xFF	; 255
 b00:	8f ef       	ldi	r24, 0xFF	; 255
 b02:	9f e7       	ldi	r25, 0x7F	; 127
 b04:	22 e2       	ldi	r18, 0x22	; 34
 b06:	30 e0       	ldi	r19, 0x00	; 0
 b08:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <errno+0x1>
 b0c:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <errno>
 b10:	09 c0       	rjmp	.+18     	; 0xb24 <strtol+0x1e8>
 b12:	22 23       	and	r18, r18
 b14:	81 f0       	breq	.+32     	; 0xb36 <strtol+0x1fa>
 b16:	90 95       	com	r25
 b18:	80 95       	com	r24
 b1a:	70 95       	com	r23
 b1c:	61 95       	neg	r22
 b1e:	7f 4f       	sbci	r23, 0xFF	; 255
 b20:	8f 4f       	sbci	r24, 0xFF	; 255
 b22:	9f 4f       	sbci	r25, 0xFF	; 255
 b24:	46 2f       	mov	r20, r22
 b26:	37 2f       	mov	r19, r23
 b28:	28 2f       	mov	r18, r24
 b2a:	12 c0       	rjmp	.+36     	; 0xb50 <strtol+0x214>
 b2c:	40 e0       	ldi	r20, 0x00	; 0
 b2e:	30 e0       	ldi	r19, 0x00	; 0
 b30:	20 e0       	ldi	r18, 0x00	; 0
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	0d c0       	rjmp	.+26     	; 0xb50 <strtol+0x214>
 b36:	97 ff       	sbrs	r25, 7
 b38:	f5 cf       	rjmp	.-22     	; 0xb24 <strtol+0x1e8>
 b3a:	82 e2       	ldi	r24, 0x22	; 34
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <errno+0x1>
 b42:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <errno>
 b46:	6f ef       	ldi	r22, 0xFF	; 255
 b48:	7f ef       	ldi	r23, 0xFF	; 255
 b4a:	8f ef       	ldi	r24, 0xFF	; 255
 b4c:	9f e7       	ldi	r25, 0x7F	; 127
 b4e:	ea cf       	rjmp	.-44     	; 0xb24 <strtol+0x1e8>
 b50:	64 2f       	mov	r22, r20
 b52:	73 2f       	mov	r23, r19
 b54:	82 2f       	mov	r24, r18
 b56:	cd b7       	in	r28, 0x3d	; 61
 b58:	de b7       	in	r29, 0x3e	; 62
 b5a:	e1 e1       	ldi	r30, 0x11	; 17
 b5c:	88 c0       	rjmp	.+272    	; 0xc6e <__epilogue_restores__+0x2>

00000b5e <atoi>:
 b5e:	fc 01       	movw	r30, r24
 b60:	88 27       	eor	r24, r24
 b62:	99 27       	eor	r25, r25
 b64:	e8 94       	clt
 b66:	21 91       	ld	r18, Z+
 b68:	20 32       	cpi	r18, 0x20	; 32
 b6a:	e9 f3       	breq	.-6      	; 0xb66 <atoi+0x8>
 b6c:	29 30       	cpi	r18, 0x09	; 9
 b6e:	10 f0       	brcs	.+4      	; 0xb74 <atoi+0x16>
 b70:	2e 30       	cpi	r18, 0x0E	; 14
 b72:	c8 f3       	brcs	.-14     	; 0xb66 <atoi+0x8>
 b74:	2b 32       	cpi	r18, 0x2B	; 43
 b76:	39 f0       	breq	.+14     	; 0xb86 <atoi+0x28>
 b78:	2d 32       	cpi	r18, 0x2D	; 45
 b7a:	31 f4       	brne	.+12     	; 0xb88 <atoi+0x2a>
 b7c:	68 94       	set
 b7e:	03 c0       	rjmp	.+6      	; 0xb86 <atoi+0x28>
 b80:	13 d0       	rcall	.+38     	; 0xba8 <__mulhi_const_10>
 b82:	82 0f       	add	r24, r18
 b84:	91 1d       	adc	r25, r1
 b86:	21 91       	ld	r18, Z+
 b88:	20 53       	subi	r18, 0x30	; 48
 b8a:	2a 30       	cpi	r18, 0x0A	; 10
 b8c:	c8 f3       	brcs	.-14     	; 0xb80 <atoi+0x22>
 b8e:	1e f4       	brtc	.+6      	; 0xb96 <atoi+0x38>
 b90:	90 95       	com	r25
 b92:	81 95       	neg	r24
 b94:	9f 4f       	sbci	r25, 0xFF	; 255
 b96:	08 95       	ret

00000b98 <isspace>:
 b98:	91 11       	cpse	r25, r1
 b9a:	0e c0       	rjmp	.+28     	; 0xbb8 <__ctype_isfalse>
 b9c:	80 32       	cpi	r24, 0x20	; 32
 b9e:	19 f0       	breq	.+6      	; 0xba6 <isspace+0xe>
 ba0:	89 50       	subi	r24, 0x09	; 9
 ba2:	85 50       	subi	r24, 0x05	; 5
 ba4:	d0 f7       	brcc	.-12     	; 0xb9a <isspace+0x2>
 ba6:	08 95       	ret

00000ba8 <__mulhi_const_10>:
 ba8:	7a e0       	ldi	r23, 0x0A	; 10
 baa:	97 9f       	mul	r25, r23
 bac:	90 2d       	mov	r25, r0
 bae:	87 9f       	mul	r24, r23
 bb0:	80 2d       	mov	r24, r0
 bb2:	91 0d       	add	r25, r1
 bb4:	11 24       	eor	r1, r1
 bb6:	08 95       	ret

00000bb8 <__ctype_isfalse>:
 bb8:	99 27       	eor	r25, r25
 bba:	88 27       	eor	r24, r24

00000bbc <__ctype_istrue>:
 bbc:	08 95       	ret

00000bbe <__mulsi3>:
 bbe:	db 01       	movw	r26, r22
 bc0:	8f 93       	push	r24
 bc2:	9f 93       	push	r25
 bc4:	2d d0       	rcall	.+90     	; 0xc20 <__muluhisi3>
 bc6:	bf 91       	pop	r27
 bc8:	af 91       	pop	r26
 bca:	a2 9f       	mul	r26, r18
 bcc:	80 0d       	add	r24, r0
 bce:	91 1d       	adc	r25, r1
 bd0:	a3 9f       	mul	r26, r19
 bd2:	90 0d       	add	r25, r0
 bd4:	b2 9f       	mul	r27, r18
 bd6:	90 0d       	add	r25, r0
 bd8:	11 24       	eor	r1, r1
 bda:	08 95       	ret

00000bdc <__udivmodsi4>:
 bdc:	a1 e2       	ldi	r26, 0x21	; 33
 bde:	1a 2e       	mov	r1, r26
 be0:	aa 1b       	sub	r26, r26
 be2:	bb 1b       	sub	r27, r27
 be4:	fd 01       	movw	r30, r26
 be6:	0d c0       	rjmp	.+26     	; 0xc02 <__udivmodsi4_ep>

00000be8 <__udivmodsi4_loop>:
 be8:	aa 1f       	adc	r26, r26
 bea:	bb 1f       	adc	r27, r27
 bec:	ee 1f       	adc	r30, r30
 bee:	ff 1f       	adc	r31, r31
 bf0:	a2 17       	cp	r26, r18
 bf2:	b3 07       	cpc	r27, r19
 bf4:	e4 07       	cpc	r30, r20
 bf6:	f5 07       	cpc	r31, r21
 bf8:	20 f0       	brcs	.+8      	; 0xc02 <__udivmodsi4_ep>
 bfa:	a2 1b       	sub	r26, r18
 bfc:	b3 0b       	sbc	r27, r19
 bfe:	e4 0b       	sbc	r30, r20
 c00:	f5 0b       	sbc	r31, r21

00000c02 <__udivmodsi4_ep>:
 c02:	66 1f       	adc	r22, r22
 c04:	77 1f       	adc	r23, r23
 c06:	88 1f       	adc	r24, r24
 c08:	99 1f       	adc	r25, r25
 c0a:	1a 94       	dec	r1
 c0c:	69 f7       	brne	.-38     	; 0xbe8 <__udivmodsi4_loop>
 c0e:	60 95       	com	r22
 c10:	70 95       	com	r23
 c12:	80 95       	com	r24
 c14:	90 95       	com	r25
 c16:	9b 01       	movw	r18, r22
 c18:	ac 01       	movw	r20, r24
 c1a:	bd 01       	movw	r22, r26
 c1c:	cf 01       	movw	r24, r30
 c1e:	08 95       	ret

00000c20 <__muluhisi3>:
 c20:	40 d0       	rcall	.+128    	; 0xca2 <__umulhisi3>
 c22:	a5 9f       	mul	r26, r21
 c24:	90 0d       	add	r25, r0
 c26:	b4 9f       	mul	r27, r20
 c28:	90 0d       	add	r25, r0
 c2a:	a4 9f       	mul	r26, r20
 c2c:	80 0d       	add	r24, r0
 c2e:	91 1d       	adc	r25, r1
 c30:	11 24       	eor	r1, r1
 c32:	08 95       	ret

00000c34 <__prologue_saves__>:
 c34:	2f 92       	push	r2
 c36:	3f 92       	push	r3
 c38:	4f 92       	push	r4
 c3a:	5f 92       	push	r5
 c3c:	6f 92       	push	r6
 c3e:	7f 92       	push	r7
 c40:	8f 92       	push	r8
 c42:	9f 92       	push	r9
 c44:	af 92       	push	r10
 c46:	bf 92       	push	r11
 c48:	cf 92       	push	r12
 c4a:	df 92       	push	r13
 c4c:	ef 92       	push	r14
 c4e:	ff 92       	push	r15
 c50:	0f 93       	push	r16
 c52:	1f 93       	push	r17
 c54:	cf 93       	push	r28
 c56:	df 93       	push	r29
 c58:	cd b7       	in	r28, 0x3d	; 61
 c5a:	de b7       	in	r29, 0x3e	; 62
 c5c:	ca 1b       	sub	r28, r26
 c5e:	db 0b       	sbc	r29, r27
 c60:	0f b6       	in	r0, 0x3f	; 63
 c62:	f8 94       	cli
 c64:	de bf       	out	0x3e, r29	; 62
 c66:	0f be       	out	0x3f, r0	; 63
 c68:	cd bf       	out	0x3d, r28	; 61
 c6a:	09 94       	ijmp

00000c6c <__epilogue_restores__>:
 c6c:	2a 88       	ldd	r2, Y+18	; 0x12
 c6e:	39 88       	ldd	r3, Y+17	; 0x11
 c70:	48 88       	ldd	r4, Y+16	; 0x10
 c72:	5f 84       	ldd	r5, Y+15	; 0x0f
 c74:	6e 84       	ldd	r6, Y+14	; 0x0e
 c76:	7d 84       	ldd	r7, Y+13	; 0x0d
 c78:	8c 84       	ldd	r8, Y+12	; 0x0c
 c7a:	9b 84       	ldd	r9, Y+11	; 0x0b
 c7c:	aa 84       	ldd	r10, Y+10	; 0x0a
 c7e:	b9 84       	ldd	r11, Y+9	; 0x09
 c80:	c8 84       	ldd	r12, Y+8	; 0x08
 c82:	df 80       	ldd	r13, Y+7	; 0x07
 c84:	ee 80       	ldd	r14, Y+6	; 0x06
 c86:	fd 80       	ldd	r15, Y+5	; 0x05
 c88:	0c 81       	ldd	r16, Y+4	; 0x04
 c8a:	1b 81       	ldd	r17, Y+3	; 0x03
 c8c:	aa 81       	ldd	r26, Y+2	; 0x02
 c8e:	b9 81       	ldd	r27, Y+1	; 0x01
 c90:	ce 0f       	add	r28, r30
 c92:	d1 1d       	adc	r29, r1
 c94:	0f b6       	in	r0, 0x3f	; 63
 c96:	f8 94       	cli
 c98:	de bf       	out	0x3e, r29	; 62
 c9a:	0f be       	out	0x3f, r0	; 63
 c9c:	cd bf       	out	0x3d, r28	; 61
 c9e:	ed 01       	movw	r28, r26
 ca0:	08 95       	ret

00000ca2 <__umulhisi3>:
 ca2:	a2 9f       	mul	r26, r18
 ca4:	b0 01       	movw	r22, r0
 ca6:	b3 9f       	mul	r27, r19
 ca8:	c0 01       	movw	r24, r0
 caa:	a3 9f       	mul	r26, r19
 cac:	01 d0       	rcall	.+2      	; 0xcb0 <__umulhisi3+0xe>
 cae:	b2 9f       	mul	r27, r18
 cb0:	70 0d       	add	r23, r0
 cb2:	81 1d       	adc	r24, r1
 cb4:	11 24       	eor	r1, r1
 cb6:	91 1d       	adc	r25, r1
 cb8:	08 95       	ret

00000cba <_exit>:
 cba:	f8 94       	cli

00000cbc <__stop_program>:
 cbc:	ff cf       	rjmp	.-2      	; 0xcbc <__stop_program>
