
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001616  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00001616  000016aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011c  00800060  00800060  000016aa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003036  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ed  00000000  00000000  000047a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001726  00000000  00000000  00004e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  000065bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000685  00000000  00000000  000068fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022a8  00000000  00000000  00006f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00009229  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
       2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
       4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
       6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
       8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
       a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
       c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
       e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
      10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
      12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
      14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
      16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
      18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
      1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
      1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
      1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
      20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf e5       	ldi	r28, 0x5F	; 95
      28:	d2 e0       	ldi	r29, 0x02	; 2
      2a:	de bf       	out	0x3e, r29	; 62
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
      2e:	21 e0       	ldi	r18, 0x01	; 1
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
      36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
      38:	ac 37       	cpi	r26, 0x7C	; 124
      3a:	b2 07       	cpc	r27, r18
      3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
      3e:	73 d3       	rcall	.+1766   	; 0x726 <main>
      40:	e8 ca       	rjmp	.-2608   	; 0xfffff612 <__eeprom_end+0xff7ef612>

00000042 <__bad_interrupt>:
      42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <USART_Receive>:
uint8_t lastBankAccessed = 0;


// Receive USART data
uint8_t USART_Receive(void) {
	while ( !(UCSRA & (1<<RXC)) ); // Wait for data to be received
      44:	5f 9b       	sbis	0x0b, 7	; 11
      46:	fe cf       	rjmp	.-4      	; 0x44 <USART_Receive>
	return UDR; // Get and return received data from buffer
      48:	8c b1       	in	r24, 0x0c	; 12
}
      4a:	08 95       	ret

0000004c <USART_Transmit>:

// Transmit USART data
void USART_Transmit(unsigned char data) {
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer
      4c:	5d 9b       	sbis	0x0b, 5	; 11
      4e:	fe cf       	rjmp	.-4      	; 0x4c <USART_Transmit>
	UDR = data;
      50:	8c b9       	out	0x0c, r24	; 12
      52:	08 95       	ret

00000054 <usart_read_bytes>:
}

// Read 1-256 bytes from the USART 
void usart_read_bytes(int count) {
      54:	0f 93       	push	r16
      56:	1f 93       	push	r17
      58:	cf 93       	push	r28
      5a:	df 93       	push	r29
      5c:	8c 01       	movw	r16, r24
	for (int x = 0; x < count; x++) {
      5e:	c0 e7       	ldi	r28, 0x70	; 112
      60:	d0 e0       	ldi	r29, 0x00	; 0
      62:	ce 01       	movw	r24, r28
      64:	80 57       	subi	r24, 0x70	; 112
      66:	90 40       	sbci	r25, 0x00	; 0
      68:	80 17       	cp	r24, r16
      6a:	91 07       	cpc	r25, r17
      6c:	1c f4       	brge	.+6      	; 0x74 <usart_read_bytes+0x20>
		receivedBuffer[x] = USART_Receive();
      6e:	ea df       	rcall	.-44     	; 0x44 <USART_Receive>
      70:	89 93       	st	Y+, r24
      72:	f7 cf       	rjmp	.-18     	; 0x62 <usart_read_bytes+0xe>
	}
}
      74:	df 91       	pop	r29
      76:	cf 91       	pop	r28
      78:	1f 91       	pop	r17
      7a:	0f 91       	pop	r16
      7c:	08 95       	ret

0000007e <usart_read_chars>:

// Read the USART until a 0 (string terminator byte) is received
void usart_read_chars(void) {
      7e:	cf 93       	push	r28
      80:	df 93       	push	r29
      82:	c0 e7       	ldi	r28, 0x70	; 112
      84:	d0 e0       	ldi	r29, 0x00	; 0
	int x = 0;
	while (1) {
		receivedBuffer[x] = USART_Receive();
      86:	de df       	rcall	.-68     	; 0x44 <USART_Receive>
      88:	89 93       	st	Y+, r24
		if (receivedBuffer[x] == 0) {
      8a:	81 11       	cpse	r24, r1
      8c:	fc cf       	rjmp	.-8      	; 0x86 <usart_read_chars+0x8>
			break;
		}
		x++;
	}
}
      8e:	df 91       	pop	r29
      90:	cf 91       	pop	r28
      92:	08 95       	ret

00000094 <rd_wr_csmreq_cs2_reset>:

// Turn RD, WR, CS/MREQ and CS2 to high so they are deselected (reset state)
void rd_wr_csmreq_cs2_reset(void) {
	cs2Pin_high; // CS2 off
      94:	3a 9a       	sbi	0x07, 2	; 7
	cs_mreqPin_high; // CS/MREQ off
      96:	94 9a       	sbi	0x12, 4	; 18
	rdPin_high; // RD off
      98:	95 9a       	sbi	0x12, 5	; 18
	wrPin_high; // WR off
      9a:	96 9a       	sbi	0x12, 6	; 18
      9c:	08 95       	ret

0000009e <gb_mode>:
// ****** Gameboy / Gameboy Colour functions ******

// Set Gameboy mode
void gb_mode(void) {
	// Set inputs
	PORT_DATA7_0 = 0;
      9e:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
      a0:	14 ba       	out	0x14, r1	; 20
	
	// Set outputs
	PORT_ADDR7_0 = 0;
      a2:	18 ba       	out	0x18, r1	; 24
	PORT_ADDR15_8 = 0;
      a4:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR7_0 = 0xFF;
      a6:	8f ef       	ldi	r24, 0xFF	; 255
      a8:	87 bb       	out	0x17, r24	; 23
	DDR_ADDR15_8 = 0xFF;
      aa:	8a bb       	out	0x1a, r24	; 26
      ac:	08 95       	ret

000000ae <set_16bit_address>:
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
      ae:	9b bb       	out	0x1b, r25	; 27
	PORT_ADDR7_0 = (address & 0xFF);
      b0:	88 bb       	out	0x18, r24	; 24
      b2:	08 95       	ret

000000b4 <read_8bit_data>:
}

// Set the address and read a byte from the 8 bit data line
uint8_t read_8bit_data(uint16_t address) {
	set_16bit_address(address);
      b4:	fc df       	rcall	.-8      	; 0xae <set_16bit_address>
	
	cs_mreqPin_low;
      b6:	94 98       	cbi	0x12, 4	; 18
	rdPin_low;
      b8:	95 98       	cbi	0x12, 5	; 18
	
	asm volatile("nop"); // Delay a little (minimum needed is 1 nops, 2 nops for GB camera)
      ba:	00 00       	nop
	asm volatile("nop");
      bc:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
      be:	83 b3       	in	r24, 0x13	; 19
	
	rdPin_high;
      c0:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
      c2:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
}
      c4:	08 95       	ret

000000c6 <write_8bit_data>:

// Set the address and write a byte to the 8 bit data line and pulse cs/mREQ if writing to RAM
void write_8bit_data(uint16_t address, uint8_t data, uint8_t type) {
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
      ca:	d6 2f       	mov	r29, r22
      cc:	c4 2f       	mov	r28, r20
	set_16bit_address(address);
      ce:	ef df       	rcall	.-34     	; 0xae <set_16bit_address>
	
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
      d0:	8f ef       	ldi	r24, 0xFF	; 255
      d2:	84 bb       	out	0x14, r24	; 20
	PORT_DATA7_0 = data; // Set data
      d4:	d5 bb       	out	0x15, r29	; 21
	
	// Pulse WR and mREQ if the type matches
	wrPin_low;
      d6:	96 98       	cbi	0x12, 6	; 18
	if (type == MEMORY_WRITE) {
      d8:	c1 30       	cpi	r28, 0x01	; 1
      da:	09 f4       	brne	.+2      	; 0xde <write_8bit_data+0x18>
		cs_mreqPin_low;
      dc:	94 98       	cbi	0x12, 4	; 18
	}
	
	asm volatile("nop");
      de:	00 00       	nop
	
	if (type == MEMORY_WRITE) {
      e0:	c1 30       	cpi	r28, 0x01	; 1
      e2:	09 f4       	brne	.+2      	; 0xe6 <write_8bit_data+0x20>
		cs_mreqPin_high;
      e4:	94 9a       	sbi	0x12, 4	; 18
	}
	wrPin_high;
      e6:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
      e8:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
      ea:	14 ba       	out	0x14, r1	; 20
}
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	08 95       	ret

000000f2 <gba_mode>:
// ****** Gameboy Advance functions ****** 

// Set GBA mode
void gba_mode(void) {
	// Set outputs for reading ROM addresses as default
	GBA_PORT_ROM_ADDR7_0 = 0;
      f2:	18 ba       	out	0x18, r1	; 24
	GBA_PORT_ROM_ADDR15_8 = 0;
      f4:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR23_16 = 0;
      f6:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
      f8:	8f ef       	ldi	r24, 0xFF	; 255
      fa:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
      fc:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
      fe:	84 bb       	out	0x14, r24	; 20
     100:	08 95       	ret

00000102 <gba_set_24bit_address>:
}

// Set the 24 bit address on A23-0
void gba_set_24bit_address(uint32_t address) {	
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = 0; // Set 0-23 address lines low and set as outputs
     106:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0;
     108:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
     10a:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     10c:	2f ef       	ldi	r18, 0xFF	; 255
     10e:	24 bb       	out	0x14, r18	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     110:	2a bb       	out	0x1a, r18	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     112:	27 bb       	out	0x17, r18	; 23
	
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
     114:	8c 01       	movw	r16, r24
     116:	22 27       	eor	r18, r18
     118:	33 27       	eor	r19, r19
     11a:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
     11c:	07 2f       	mov	r16, r23
     11e:	18 2f       	mov	r17, r24
     120:	29 2f       	mov	r18, r25
     122:	33 27       	eor	r19, r19
     124:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
     126:	68 bb       	out	0x18, r22	; 24
}
     128:	1f 91       	pop	r17
     12a:	0f 91       	pop	r16
     12c:	08 95       	ret

0000012e <gba_read_16bit_data>:

// ---------- ROM/SRAM ----------

// Read a byte from the 16 bit data line non-sequentially
uint16_t gba_read_16bit_data(uint32_t address) {
	gba_set_24bit_address(address);
     12e:	e9 df       	rcall	.-46     	; 0x102 <gba_set_24bit_address>
	
	cs_mreqPin_low;
     130:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_ADDR15_8 = 0; // Set A16-A0 address lines low and set as inputs for the data to be read out
     132:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_ADDR7_0 = 0;
     134:	18 ba       	out	0x18, r1	; 24
	GBA_DDR_ROM_ADDR15_8 = 0;
     136:	1a ba       	out	0x1a, r1	; 26
	GBA_DDR_ROM_ADDR7_0 = 0;
     138:	17 ba       	out	0x17, r1	; 23
	
	rdPin_low;
     13a:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop");
     13c:	00 00       	nop
	
	uint16_t data = (GBA_PIN_ROM_DATA15_8 << 8) | GBA_PIN_ROM_DATA7_0; // Read data
     13e:	29 b3       	in	r18, 0x19	; 25
     140:	86 b3       	in	r24, 0x16	; 22
	
	rdPin_high;
     142:	95 9a       	sbi	0x12, 5	; 18
	cs_mreqPin_high;
     144:	94 9a       	sbi	0x12, 4	; 18
	
	return data;
     146:	90 e0       	ldi	r25, 0x00	; 0
}
     148:	92 2b       	or	r25, r18
     14a:	08 95       	ret

0000014c <gba_read_ram_8bit_data>:

// Set the address and read a byte from the 8 bit data line
uint8_t gba_read_ram_8bit_data(uint16_t address) {
	set_16bit_address(address);
     14c:	b0 df       	rcall	.-160    	; 0xae <set_16bit_address>
	
	rdPin_low;
     14e:	95 98       	cbi	0x12, 5	; 18
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
     150:	3a 98       	cbi	0x07, 2	; 7
	
	asm volatile("nop"); // Delay a little (minimum needed is 2)
     152:	00 00       	nop
	asm volatile("nop");
     154:	00 00       	nop
	
	uint8_t data = GBA_PIN_RAM_DATA7_0; // Read data
     156:	83 b3       	in	r24, 0x13	; 19
	
	cs2Pin_high;
     158:	3a 9a       	sbi	0x07, 2	; 7
	rdPin_high;
     15a:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
     15c:	08 95       	ret

0000015e <gba_write_ram_8bit_data>:

// Set the address and write a byte to the 8 bit data line 
void gba_write_ram_8bit_data(uint16_t address, uint8_t data) {
     15e:	cf 93       	push	r28
     160:	c6 2f       	mov	r28, r22
	set_16bit_address(address);
     162:	a5 df       	rcall	.-182    	; 0xae <set_16bit_address>
	
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
     164:	8f ef       	ldi	r24, 0xFF	; 255
     166:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_RAM_DATA7_0 = data; // Set data
     168:	c5 bb       	out	0x15, r28	; 21
	
	// Pulse WR
	wrPin_low;
     16a:	96 98       	cbi	0x12, 6	; 18
	cs2Pin_low; // CS2 pin low for SRAM/Flash select
     16c:	3a 98       	cbi	0x07, 2	; 7
	
	asm volatile("nop");
     16e:	00 00       	nop
	asm volatile("nop");
     170:	00 00       	nop
	
	cs2Pin_high;
     172:	3a 9a       	sbi	0x07, 2	; 7
	wrPin_high;
     174:	96 9a       	sbi	0x12, 6	; 18
	
	// Clear data outputs and set data pins as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
     176:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
     178:	14 ba       	out	0x14, r1	; 20
}
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <gba_eeprom_mode>:

// ---------- EEPROM ----------

// Set address/data all high (includes AD0/A23)
void gba_eeprom_mode (void) {
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	87 bb       	out	0x17, r24	; 23
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     182:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     184:	84 bb       	out	0x14, r24	; 20
	GBA_PORT_ROM_ADDR7_0 = 0x80;
     186:	90 e8       	ldi	r25, 0x80	; 128
     188:	98 bb       	out	0x18, r25	; 24
	GBA_PORT_ROM_ADDR15_8 = 0xFF;
     18a:	8b bb       	out	0x1b, r24	; 27
	GBA_PORT_ROM_ADDR23_16 = 0xFF;
     18c:	85 bb       	out	0x15, r24	; 21
     18e:	08 95       	ret

00000190 <gba_eeprom_set_address>:
}

// Send out EEPROM address serially (WR clock, AD0 data out)
void gba_eeprom_set_address(uint16_t address, uint8_t eepromSize, uint8_t command) {
	cs_mreqPin_low;
     190:	94 98       	cbi	0x12, 4	; 18
	
	int8_t x = 0;
	if (eepromSize == EEPROM_64KBIT) {
     192:	62 30       	cpi	r22, 0x02	; 2
     194:	49 f4       	brne	.+18     	; 0x1a8 <gba_eeprom_set_address+0x18>
		if (command == EEPROM_READ) {
     196:	41 11       	cpse	r20, r1
     198:	05 c0       	rjmp	.+10     	; 0x1a4 <gba_eeprom_set_address+0x14>
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
     19a:	90 6c       	ori	r25, 0xC0	; 192
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
		}
		x = 15;
     19c:	2f e0       	ldi	r18, 0x0F	; 15
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
		if (address & (1<<x)) {
     19e:	e1 e0       	ldi	r30, 0x01	; 1
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	13 c0       	rjmp	.+38     	; 0x1ca <gba_eeprom_set_address+0x3a>
	if (eepromSize == EEPROM_64KBIT) {
		if (command == EEPROM_READ) {
			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
		}
		else {
			address |= (1<<15); // Set upper 1 bit high for write request
     1a4:	90 68       	ori	r25, 0x80	; 128
     1a6:	fa cf       	rjmp	.-12     	; 0x19c <gba_eeprom_set_address+0xc>
		}
		x = 15;
	}
	else {
		if (command == EEPROM_READ) {
     1a8:	41 11       	cpse	r20, r1
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <gba_eeprom_set_address+0x20>
			address |= (1<<7) | (1<<6);
     1ac:	80 6c       	ori	r24, 0xC0	; 192
     1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <gba_eeprom_set_address+0x22>
		}
		else {
			address |= (1<<7);
     1b0:	80 68       	ori	r24, 0x80	; 128
		}
		x = 7;
     1b2:	27 e0       	ldi	r18, 0x07	; 7
     1b4:	f4 cf       	rjmp	.-24     	; 0x19e <gba_eeprom_set_address+0xe>
	while (x >= 0) {
		if (address & (1<<x)) {
			ad0Pin_high;
		}
		else {
			ad0Pin_low;
     1b6:	c0 98       	cbi	0x18, 0	; 24
		}
		
		wrPin_low; // CLK
     1b8:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
     1ba:	00 00       	nop
		asm ("nop");
     1bc:	00 00       	nop
		wrPin_high; 
     1be:	96 9a       	sbi	0x12, 6	; 18
		asm ("nop");
     1c0:	00 00       	nop
		asm ("nop");
     1c2:	00 00       	nop
     1c4:	21 50       	subi	r18, 0x01	; 1
		}
		x = 7;
	}
	
	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
	while (x >= 0) {
     1c6:	27 fd       	sbrc	r18, 7
     1c8:	0d c0       	rjmp	.+26     	; 0x1e4 <gba_eeprom_set_address+0x54>
		if (address & (1<<x)) {
     1ca:	bf 01       	movw	r22, r30
     1cc:	02 2e       	mov	r0, r18
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <gba_eeprom_set_address+0x44>
     1d0:	66 0f       	add	r22, r22
     1d2:	77 1f       	adc	r23, r23
     1d4:	0a 94       	dec	r0
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <gba_eeprom_set_address+0x40>
     1d8:	68 23       	and	r22, r24
     1da:	79 23       	and	r23, r25
     1dc:	67 2b       	or	r22, r23
     1de:	59 f3       	breq	.-42     	; 0x1b6 <gba_eeprom_set_address+0x26>
			ad0Pin_high;
     1e0:	c0 9a       	sbi	0x18, 0	; 24
     1e2:	ea cf       	rjmp	.-44     	; 0x1b8 <gba_eeprom_set_address+0x28>
		
		x--;
	}
	
	// Only send stop bit (0) and WR/CS high if reading, as writing is done in 1 continuous chunk
	if (command == EEPROM_READ) {  
     1e4:	41 11       	cpse	r20, r1
     1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <gba_eeprom_set_address+0x66>
		ad0Pin_low;
     1e8:	c0 98       	cbi	0x18, 0	; 24
		asm ("nop");
     1ea:	00 00       	nop
		wrPin_low;
     1ec:	96 98       	cbi	0x12, 6	; 18
		asm ("nop");
     1ee:	00 00       	nop
		asm ("nop");
     1f0:	00 00       	nop
		
		wrPin_high;
     1f2:	96 9a       	sbi	0x12, 6	; 18
		cs_mreqPin_high;
     1f4:	94 9a       	sbi	0x12, 4	; 18
     1f6:	08 95       	ret

000001f8 <gba_eeprom_read>:
	}
}

// Read 8 bytes from the EEPROM address, data is valid on rising edge
void gba_eeprom_read(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_READ);
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	ca df       	rcall	.-108    	; 0x190 <gba_eeprom_set_address>
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
     1fc:	c0 98       	cbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
     1fe:	b8 98       	cbi	0x17, 0	; 23
	
	cs_mreqPin_low;
     200:	94 98       	cbi	0x12, 4	; 18
     202:	84 e0       	ldi	r24, 0x04	; 4
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
		rdPin_low; // CLK
     204:	95 98       	cbi	0x12, 5	; 18
		asm ("nop");
     206:	00 00       	nop
		asm ("nop");
     208:	00 00       	nop
		rdPin_high; 
     20a:	95 9a       	sbi	0x12, 5	; 18
		asm ("nop");
     20c:	00 00       	nop
		asm ("nop");
     20e:	00 00       	nop
     210:	81 50       	subi	r24, 0x01	; 1
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
	
	// Ignore first 4 bits
	for (int8_t x = 0; x < 4; x++) {
     212:	c1 f7       	brne	.-16     	; 0x204 <gba_eeprom_read+0xc>
     214:	e1 e7       	ldi	r30, 0x71	; 113
     216:	f1 e0       	ldi	r31, 0x01	; 1
			asm ("nop");
			asm ("nop");
			rdPin_high;
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
				data |= (1<<x);
     218:	41 e0       	ldi	r20, 0x01	; 1
     21a:	50 e0       	ldi	r21, 0x00	; 0
	
	// Set AD0 pin as input
	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
	
	cs_mreqPin_low;
     21c:	87 e0       	ldi	r24, 0x07	; 7
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	20 e0       	ldi	r18, 0x00	; 0
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		uint8_t data = 0;
		for (int8_t x = 7; x >= 0; x--) {
			rdPin_low; // CLK
     222:	95 98       	cbi	0x12, 5	; 18
			asm ("nop");
     224:	00 00       	nop
			asm ("nop");
     226:	00 00       	nop
			rdPin_high;
     228:	95 9a       	sbi	0x12, 5	; 18
			
			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
     22a:	b0 9b       	sbis	0x16, 0	; 22
     22c:	07 c0       	rjmp	.+14     	; 0x23c <gba_eeprom_read+0x44>
				data |= (1<<x);
     22e:	ba 01       	movw	r22, r20
     230:	08 2e       	mov	r0, r24
     232:	01 c0       	rjmp	.+2      	; 0x236 <gba_eeprom_read+0x3e>
     234:	66 0f       	add	r22, r22
     236:	0a 94       	dec	r0
     238:	ea f7       	brpl	.-6      	; 0x234 <gba_eeprom_read+0x3c>
     23a:	26 2b       	or	r18, r22
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	88 f7       	brcc	.-30     	; 0x222 <gba_eeprom_read+0x2a>
			}
		}
		eepromBuffer[c] = data;
     240:	21 93       	st	Z+, r18
		asm ("nop");
		asm ("nop");
	}
	
	// Read out 64 bits
	for (uint8_t c = 0; c < 8; c++) {
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	e9 37       	cpi	r30, 0x79	; 121
     246:	f8 07       	cpc	r31, r24
     248:	49 f7       	brne	.-46     	; 0x21c <gba_eeprom_read+0x24>
			}
		}
		eepromBuffer[c] = data;
	}
	
	cs_mreqPin_high;
     24a:	94 9a       	sbi	0x12, 4	; 18
	
	// Set AD0 pin as output
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
     24c:	c0 9a       	sbi	0x18, 0	; 24
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
     24e:	b8 9a       	sbi	0x17, 0	; 23
     250:	08 95       	ret

00000252 <gba_eeprom_write>:
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
     252:	41 e0       	ldi	r20, 0x01	; 1
     254:	9d df       	rcall	.-198    	; 0x190 <gba_eeprom_set_address>
     256:	e1 e7       	ldi	r30, 0x71	; 113
     258:	f1 e0       	ldi	r31, 0x01	; 1
     25a:	48 e0       	ldi	r20, 0x08	; 8
	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
}

// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
     25c:	27 e0       	ldi	r18, 0x07	; 7
     25e:	30 e0       	ldi	r19, 0x00	; 0
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
		for (int8_t x = 7; x >= 0; x--) {
			if (eepromBuffer[c] & (1<<x)) {
     260:	80 81       	ld	r24, Z
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	02 2e       	mov	r0, r18
     266:	02 c0       	rjmp	.+4      	; 0x26c <__stack+0xd>
     268:	95 95       	asr	r25
     26a:	87 95       	ror	r24
     26c:	0a 94       	dec	r0
     26e:	e2 f7       	brpl	.-8      	; 0x268 <__stack+0x9>
     270:	80 ff       	sbrs	r24, 0
     272:	02 c0       	rjmp	.+4      	; 0x278 <__stack+0x19>
				ad0Pin_high;
     274:	c0 9a       	sbi	0x18, 0	; 24
     276:	01 c0       	rjmp	.+2      	; 0x27a <__stack+0x1b>
			}
			else {
				ad0Pin_low;
     278:	c0 98       	cbi	0x18, 0	; 24
			}
			
			wrPin_low; // CLK
     27a:	96 98       	cbi	0x12, 6	; 18
			asm ("nop");
     27c:	00 00       	nop
			asm ("nop");
     27e:	00 00       	nop
			wrPin_high; 
     280:	96 9a       	sbi	0x12, 6	; 18
			asm ("nop");
     282:	00 00       	nop
			asm ("nop");
     284:	00 00       	nop
     286:	21 50       	subi	r18, 0x01	; 1
     288:	31 09       	sbc	r19, r1
     28a:	50 f7       	brcc	.-44     	; 0x260 <__stack+0x1>
     28c:	41 50       	subi	r20, 0x01	; 1
     28e:	31 96       	adiw	r30, 0x01	; 1
// Write 8 bytes to the EEPROM address
void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
	
	// Write 64 bits
	for (uint8_t c = 0; c < 8; c++) {
     290:	41 11       	cpse	r20, r1
     292:	e4 cf       	rjmp	.-56     	; 0x25c <gba_eeprom_write+0xa>
			asm ("nop");
		}
	}
	
	// Last bit low
	ad0Pin_low;
     294:	c0 98       	cbi	0x18, 0	; 24
	wrPin_low; // CLK
     296:	96 98       	cbi	0x12, 6	; 18
	asm ("nop");
     298:	00 00       	nop
	asm ("nop");
     29a:	00 00       	nop
	wrPin_high; 
     29c:	96 9a       	sbi	0x12, 6	; 18
	asm ("nop");
     29e:	00 00       	nop
	asm ("nop");
     2a0:	00 00       	nop
	
	cs_mreqPin_high;
     2a2:	94 9a       	sbi	0x12, 4	; 18
     2a4:	08 95       	ret

000002a6 <flash_write_bus_cycle>:


// ---------- FLASH ----------

// Set the address and data for the write byte cycle to the flash
void flash_write_bus_cycle(uint16_t address, uint8_t data) {
     2a6:	cf 93       	push	r28
     2a8:	c6 2f       	mov	r28, r22
	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
     2aa:	2f ef       	ldi	r18, 0xFF	; 255
     2ac:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
     2ae:	ff de       	rcall	.-514    	; 0xae <set_16bit_address>
	GBA_PORT_RAM_DATA7_0 = data;
     2b0:	c5 bb       	out	0x15, r28	; 21
	
	wrPin_low;
     2b2:	96 98       	cbi	0x12, 6	; 18
	cs2Pin_low;
     2b4:	3a 98       	cbi	0x07, 2	; 7
	asm volatile("nop");
     2b6:	00 00       	nop
	wrPin_high;
     2b8:	96 9a       	sbi	0x12, 6	; 18
	cs2Pin_high;
     2ba:	3a 9a       	sbi	0x07, 2	; 7
}
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <flash_read_chip_id>:

// Read the flash manufacturer and device ID (Software ID)
void flash_read_chip_id(void) {
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
	flash_write_bus_cycle(0x5555, 0xAA);
     2c4:	6a ea       	ldi	r22, 0xAA	; 170
     2c6:	85 e5       	ldi	r24, 0x55	; 85
     2c8:	95 e5       	ldi	r25, 0x55	; 85
     2ca:	ed df       	rcall	.-38     	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     2cc:	65 e5       	ldi	r22, 0x55	; 85
     2ce:	8a ea       	ldi	r24, 0xAA	; 170
     2d0:	9a e2       	ldi	r25, 0x2A	; 42
     2d2:	e9 df       	rcall	.-46     	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x90); // Software ID entry
     2d4:	60 e9       	ldi	r22, 0x90	; 144
     2d6:	85 e5       	ldi	r24, 0x55	; 85
     2d8:	95 e5       	ldi	r25, 0x55	; 85
     2da:	e5 df       	rcall	.-54     	; 0x2a6 <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	8f e3       	ldi	r24, 0x3F	; 63
     2de:	9c e9       	ldi	r25, 0x9C	; 156
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <flash_read_chip_id+0x20>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <flash_read_chip_id+0x26>
     2e6:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
	
	// Set data as inputs
	GBA_PORT_RAM_DATA7_0 = 0;
     2e8:	15 ba       	out	0x15, r1	; 21
	GBA_DDR_RAM_DATA7_0 = 0;
     2ea:	14 ba       	out	0x14, r1	; 20
	
	// Read and transmit the 2 bytes
	flashChipIdBuffer[0] = gba_read_ram_8bit_data(0x0000);
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	2d df       	rcall	.-422    	; 0x14c <gba_read_ram_8bit_data>
     2f2:	ce e6       	ldi	r28, 0x6E	; 110
     2f4:	d0 e0       	ldi	r29, 0x00	; 0
     2f6:	88 83       	st	Y, r24
	flashChipIdBuffer[1] = gba_read_ram_8bit_data(0x0001);
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	27 df       	rcall	.-434    	; 0x14c <gba_read_ram_8bit_data>
     2fe:	89 83       	std	Y+1, r24	; 0x01
	
	flash_write_bus_cycle(0x5555, 0xAA);
     300:	6a ea       	ldi	r22, 0xAA	; 170
     302:	85 e5       	ldi	r24, 0x55	; 85
     304:	95 e5       	ldi	r25, 0x55	; 85
     306:	cf df       	rcall	.-98     	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     308:	65 e5       	ldi	r22, 0x55	; 85
     30a:	8a ea       	ldi	r24, 0xAA	; 170
     30c:	9a e2       	ldi	r25, 0x2A	; 42
     30e:	cb df       	rcall	.-106    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xF0); // Software ID exit
     310:	60 ef       	ldi	r22, 0xF0	; 240
     312:	85 e5       	ldi	r24, 0x55	; 85
     314:	95 e5       	ldi	r25, 0x55	; 85
     316:	c7 df       	rcall	.-114    	; 0x2a6 <flash_write_bus_cycle>
     318:	8f e3       	ldi	r24, 0x3F	; 63
     31a:	9c e9       	ldi	r25, 0x9C	; 156
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	f1 f7       	brne	.-4      	; 0x31c <flash_read_chip_id+0x5c>
     320:	00 c0       	rjmp	.+0      	; 0x322 <flash_read_chip_id+0x62>
     322:	00 00       	nop
	_delay_ms(20); // Wait a little (for Atmel chip)
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <flash_switch_bank>:

// Switch banks on the Flash
void flash_switch_bank(uint8_t bank) {
     32a:	cf 93       	push	r28
     32c:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     32e:	6a ea       	ldi	r22, 0xAA	; 170
     330:	85 e5       	ldi	r24, 0x55	; 85
     332:	95 e5       	ldi	r25, 0x55	; 85
     334:	b8 df       	rcall	.-144    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     336:	65 e5       	ldi	r22, 0x55	; 85
     338:	8a ea       	ldi	r24, 0xAA	; 170
     33a:	9a e2       	ldi	r25, 0x2A	; 42
     33c:	b4 df       	rcall	.-152    	; 0x2a6 <flash_write_bus_cycle>
	
	flash_write_bus_cycle(0x5555, 0xB0);
     33e:	60 eb       	ldi	r22, 0xB0	; 176
     340:	85 e5       	ldi	r24, 0x55	; 85
     342:	95 e5       	ldi	r25, 0x55	; 85
     344:	b0 df       	rcall	.-160    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x0000, bank);
     346:	6c 2f       	mov	r22, r28
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
}
     34c:	cf 91       	pop	r28
void flash_switch_bank(uint8_t bank) {
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	
	flash_write_bus_cycle(0x5555, 0xB0);
	flash_write_bus_cycle(0x0000, bank);
     34e:	ab cf       	rjmp	.-170    	; 0x2a6 <flash_write_bus_cycle>

00000350 <flash_erase_4k_sector>:
}

// Erase 4K sector on Flash, expects first sector to start at 0, left shifts by 12 (A15-A12 to select sector for 512Kbit)
// Takes 25ms after last command to erase sector
void flash_erase_4k_sector(uint8_t sector) {
     350:	cf 93       	push	r28
     352:	c8 2f       	mov	r28, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     354:	6a ea       	ldi	r22, 0xAA	; 170
     356:	85 e5       	ldi	r24, 0x55	; 85
     358:	95 e5       	ldi	r25, 0x55	; 85
     35a:	a5 df       	rcall	.-182    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     35c:	65 e5       	ldi	r22, 0x55	; 85
     35e:	8a ea       	ldi	r24, 0xAA	; 170
     360:	9a e2       	ldi	r25, 0x2A	; 42
     362:	a1 df       	rcall	.-190    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0x80);
     364:	60 e8       	ldi	r22, 0x80	; 128
     366:	85 e5       	ldi	r24, 0x55	; 85
     368:	95 e5       	ldi	r25, 0x55	; 85
     36a:	9d df       	rcall	.-198    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xAA);
     36c:	6a ea       	ldi	r22, 0xAA	; 170
     36e:	85 e5       	ldi	r24, 0x55	; 85
     370:	95 e5       	ldi	r25, 0x55	; 85
     372:	99 df       	rcall	.-206    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     374:	65 e5       	ldi	r22, 0x55	; 85
     376:	8a ea       	ldi	r24, 0xAA	; 170
     378:	9a e2       	ldi	r25, 0x2A	; 42
     37a:	95 df       	rcall	.-214    	; 0x2a6 <flash_write_bus_cycle>
	
	flash_write_bus_cycle((uint16_t) sector << 12, 0x30);
     37c:	60 e3       	ldi	r22, 0x30	; 48
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	9c 2f       	mov	r25, r28
     382:	92 95       	swap	r25
     384:	90 7f       	andi	r25, 0xF0	; 240
     386:	8f df       	rcall	.-226    	; 0x2a6 <flash_write_bus_cycle>
     388:	8f e4       	ldi	r24, 0x4F	; 79
     38a:	93 ec       	ldi	r25, 0xC3	; 195
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <flash_erase_4k_sector+0x3c>
     390:	00 c0       	rjmp	.+0      	; 0x392 <flash_erase_4k_sector+0x42>
     392:	00 00       	nop
	_delay_ms(25); // Wait 25ms for sector erase
}
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <flash_write_byte>:

// Write a single byte to the Flash address
// Takes 20us to program Flash
void flash_write_byte(uint16_t address, uint8_t data) {
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	ec 01       	movw	r28, r24
     3a0:	16 2f       	mov	r17, r22
	flash_write_bus_cycle(0x5555, 0xAA);
     3a2:	6a ea       	ldi	r22, 0xAA	; 170
     3a4:	85 e5       	ldi	r24, 0x55	; 85
     3a6:	95 e5       	ldi	r25, 0x55	; 85
     3a8:	7e df       	rcall	.-260    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     3aa:	65 e5       	ldi	r22, 0x55	; 85
     3ac:	8a ea       	ldi	r24, 0xAA	; 170
     3ae:	9a e2       	ldi	r25, 0x2A	; 42
     3b0:	7a df       	rcall	.-268    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
     3b2:	60 ea       	ldi	r22, 0xA0	; 160
     3b4:	85 e5       	ldi	r24, 0x55	; 85
     3b6:	95 e5       	ldi	r25, 0x55	; 85
     3b8:	76 df       	rcall	.-276    	; 0x2a6 <flash_write_bus_cycle>
	
	flash_write_bus_cycle(address, data);
     3ba:	61 2f       	mov	r22, r17
     3bc:	ce 01       	movw	r24, r28
     3be:	73 df       	rcall	.-282    	; 0x2a6 <flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c0:	85 e3       	ldi	r24, 0x35	; 53
     3c2:	8a 95       	dec	r24
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <flash_write_byte+0x2a>
     3c6:	00 00       	nop
	_delay_us(20); // Wait byte program time
}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	08 95       	ret

000003d0 <flash_write_sector>:

// Write a sector (128 bytes) to the Atmel flash
// Takes 20ms for write cycle
void flash_write_sector(uint16_t sector) {
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	8c 01       	movw	r16, r24
	flash_write_bus_cycle(0x5555, 0xAA);
     3de:	6a ea       	ldi	r22, 0xAA	; 170
     3e0:	85 e5       	ldi	r24, 0x55	; 85
     3e2:	95 e5       	ldi	r25, 0x55	; 85
     3e4:	60 df       	rcall	.-320    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x2AAA, 0x55);
     3e6:	65 e5       	ldi	r22, 0x55	; 85
     3e8:	8a ea       	ldi	r24, 0xAA	; 170
     3ea:	9a e2       	ldi	r25, 0x2A	; 42
     3ec:	5c df       	rcall	.-328    	; 0x2a6 <flash_write_bus_cycle>
	flash_write_bus_cycle(0x5555, 0xA0);
     3ee:	60 ea       	ldi	r22, 0xA0	; 160
     3f0:	85 e5       	ldi	r24, 0x55	; 85
     3f2:	95 e5       	ldi	r25, 0x55	; 85
     3f4:	58 df       	rcall	.-336    	; 0x2a6 <flash_write_bus_cycle>
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
     3f6:	16 95       	lsr	r17
     3f8:	10 2f       	mov	r17, r16
     3fa:	00 27       	eor	r16, r16
     3fc:	17 95       	ror	r17
     3fe:	07 95       	ror	r16
     400:	90 e7       	ldi	r25, 0x70	; 112
     402:	e9 2e       	mov	r14, r25
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	f9 2e       	mov	r15, r25
     408:	c0 e0       	ldi	r28, 0x00	; 0
     40a:	d0 e0       	ldi	r29, 0x00	; 0
     40c:	f7 01       	movw	r30, r14
     40e:	61 91       	ld	r22, Z+
     410:	7f 01       	movw	r14, r30
     412:	ce 01       	movw	r24, r28
     414:	80 2b       	or	r24, r16
     416:	91 2b       	or	r25, r17
     418:	46 df       	rcall	.-372    	; 0x2a6 <flash_write_bus_cycle>
     41a:	21 96       	adiw	r28, 0x01	; 1
	flash_write_bus_cycle(0x5555, 0xAA);
	flash_write_bus_cycle(0x2AAA, 0x55);
	flash_write_bus_cycle(0x5555, 0xA0);
	
	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
	for (uint8_t x = 0; x < 128; x++) {
     41c:	c0 38       	cpi	r28, 0x80	; 128
     41e:	d1 05       	cpc	r29, r1
     420:	a9 f7       	brne	.-22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     422:	8f e3       	ldi	r24, 0x3F	; 63
     424:	9c e9       	ldi	r25, 0x9C	; 156
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42c:	00 00       	nop
		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
	}
	_delay_ms(20); // Wait sector program time
}
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	08 95       	ret

0000043c <gb_flash_read_byte>:

// ---------- GB FLASH CARTS ----------

// Read a byte from the flash (No CS pin pulse)
uint8_t gb_flash_read_byte(uint16_t address) {
	PORT_DATA7_0 = 0;
     43c:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     43e:	14 ba       	out	0x14, r1	; 20
	
	set_16bit_address(address);
     440:	36 de       	rcall	.-916    	; 0xae <set_16bit_address>
	
	rdPin_low;
     442:	95 98       	cbi	0x12, 5	; 18
	asm volatile("nop"); // Delay a little
     444:	00 00       	nop
	asm volatile("nop");
     446:	00 00       	nop
	uint8_t data = PIN_DATA7_0; // Read data
     448:	83 b3       	in	r24, 0x13	; 19
	rdPin_high;
     44a:	95 9a       	sbi	0x12, 5	; 18
	
	return data;
}
     44c:	08 95       	ret

0000044e <gb_flash_write_bus_cycle>:

// Set the address and data for the write byte cycle to the flash
void gb_flash_write_bus_cycle(uint16_t address, uint8_t data) {
     44e:	cf 93       	push	r28
     450:	c6 2f       	mov	r28, r22
	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
     452:	2f ef       	ldi	r18, 0xFF	; 255
     454:	24 bb       	out	0x14, r18	; 20
	set_16bit_address(address);
     456:	2b de       	rcall	.-938    	; 0xae <set_16bit_address>
	PORT_DATA7_0 = data;
     458:	c5 bb       	out	0x15, r28	; 21
	
	if (flashWriteWePin == WE_AS_AUDIO_PIN) { // Audio pin
     45a:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <flashWriteWePin>
     45e:	81 34       	cpi	r24, 0x41	; 65
     460:	31 f4       	brne	.+12     	; 0x46e <gb_flash_write_bus_cycle+0x20>
		audioPin_low; // WE low
     462:	39 98       	cbi	0x07, 1	; 7
		asm volatile("nop");
     464:	00 00       	nop
		asm volatile("nop");
     466:	00 00       	nop
		asm volatile("nop");
     468:	00 00       	nop
		audioPin_high; // WE high
     46a:	39 9a       	sbi	0x07, 1	; 7
     46c:	05 c0       	rjmp	.+10     	; 0x478 <gb_flash_write_bus_cycle+0x2a>
	}
	else { // WR pin
		wrPin_low; // WE low
     46e:	96 98       	cbi	0x12, 6	; 18
		asm volatile("nop");
     470:	00 00       	nop
		asm volatile("nop");
     472:	00 00       	nop
		asm volatile("nop");
     474:	00 00       	nop
		wrPin_high; // WE high
     476:	96 9a       	sbi	0x12, 6	; 18
	}
	
	// Clear data outputs and set data pins as inputs
	PORT_DATA7_0 = 0;
     478:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     47a:	14 ba       	out	0x14, r1	; 20
}
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <gb_flash_write_byte>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte.
void gb_flash_write_byte(uint16_t address, uint8_t data) {
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	ec 01       	movw	r28, r24
     488:	16 2f       	mov	r17, r22
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     48a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <flashWriteCycle+0x2>
     48e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <flashWriteCycle>
     492:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <flashWriteCycle+0x1>
     496:	db df       	rcall	.-74     	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     498:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <flashWriteCycle+0x6>
     49c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <flashWriteCycle+0x4>
     4a0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <flashWriteCycle+0x5>
     4a4:	d4 df       	rcall	.-88     	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     4a6:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <flashWriteCycle+0xa>
     4aa:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <flashWriteCycle+0x8>
     4ae:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <flashWriteCycle+0x9>
     4b2:	cd df       	rcall	.-102    	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(address, data);
     4b4:	61 2f       	mov	r22, r17
     4b6:	ce 01       	movw	r24, r28
     4b8:	ca df       	rcall	.-108    	; 0x44e <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ba:	8a e1       	ldi	r24, 0x1A	; 26
     4bc:	8a 95       	dec	r24
     4be:	f1 f7       	brne	.-4      	; 0x4bc <gb_flash_write_byte+0x3c>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <gb_flash_write_byte+0x42>
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     4c2:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     4c4:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
     4c6:	ce 01       	movw	r24, r28
     4c8:	b9 df       	rcall	.-142    	; 0x43c <gb_flash_read_byte>
	while (data != dataVerify) {
     4ca:	81 17       	cp	r24, r17
     4cc:	39 f0       	breq	.+14     	; 0x4dc <gb_flash_write_byte+0x5c>
		dataVerify = gb_flash_read_byte(address);
     4ce:	ce 01       	movw	r24, r28
     4d0:	b5 df       	rcall	.-150    	; 0x43c <gb_flash_read_byte>
     4d2:	9d e0       	ldi	r25, 0x0D	; 13
     4d4:	9a 95       	dec	r25
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <gb_flash_write_byte+0x54>
     4d8:	00 00       	nop
     4da:	f7 cf       	rjmp	.-18     	; 0x4ca <gb_flash_write_byte+0x4a>
		_delay_us(5);
	}
}
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	08 95       	ret

000004e4 <gb_flash_write_byte_bank1_commands>:

// Write a single byte to the Flash address. Takes 10-50us to program each byte. 
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	ec 01       	movw	r28, r24
     4f0:	16 2f       	mov	r17, r22
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
     4f2:	ff 24       	eor	r15, r15
     4f4:	fa 94       	dec	r15
     4f6:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
     4f8:	01 e2       	ldi	r16, 0x21	; 33
     4fa:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
     4fc:	18 ba       	out	0x18, r1	; 24
// Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
	// Set bank 1
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = 1;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
     502:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     504:	00 00       	nop
	wrPin_high;
     506:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
     508:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <flashWriteCycle+0x2>
     50c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <flashWriteCycle>
     510:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <flashWriteCycle+0x1>
     514:	9c df       	rcall	.-200    	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
     516:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <flashWriteCycle+0x6>
     51a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <flashWriteCycle+0x4>
     51e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <flashWriteCycle+0x5>
     522:	95 df       	rcall	.-214    	; 0x44e <gb_flash_write_bus_cycle>
	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
     524:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <flashWriteCycle+0xa>
     528:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <flashWriteCycle+0x8>
     52c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <flashWriteCycle+0x9>
     530:	8e df       	rcall	.-228    	; 0x44e <gb_flash_write_bus_cycle>
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
     532:	f4 ba       	out	0x14, r15	; 20
	DDR_ADDR15_8 = 0xFF;
}

// Set the 16 bit address on A15-0
void set_16bit_address(uint16_t address) {
	PORT_ADDR15_8 = (address >> 8);
     534:	0b bb       	out	0x1b, r16	; 27
	PORT_ADDR7_0 = (address & 0xFF);
     536:	18 ba       	out	0x18, r1	; 24
	
	
	// Set bank back
	DDR_DATA7_0 = 0xFF;
	set_16bit_address(0x2100);
	PORT_DATA7_0 = lastBankAccessed;
     538:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     53c:	85 bb       	out	0x15, r24	; 21
	wrPin_low; // Pulse WR
     53e:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     540:	00 00       	nop
	wrPin_high;
     542:	96 9a       	sbi	0x12, 6	; 18
	
	gb_flash_write_bus_cycle(address, data);
     544:	61 2f       	mov	r22, r17
     546:	ce 01       	movw	r24, r28
     548:	82 df       	rcall	.-252    	; 0x44e <gb_flash_write_bus_cycle>
     54a:	8a e1       	ldi	r24, 0x1A	; 26
     54c:	8a 95       	dec	r24
     54e:	f1 f7       	brne	.-4      	; 0x54c <gb_flash_write_byte_bank1_commands+0x68>
     550:	00 c0       	rjmp	.+0      	; 0x552 <gb_flash_write_byte_bank1_commands+0x6e>
	_delay_us(10); // Wait byte program time
	
	// Set data pins inputs
	PORT_DATA7_0 = 0;
     552:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     554:	14 ba       	out	0x14, r1	; 20
	
	// Verify data
	uint8_t dataVerify = gb_flash_read_byte(address);
     556:	ce 01       	movw	r24, r28
     558:	71 df       	rcall	.-286    	; 0x43c <gb_flash_read_byte>
	while (data != dataVerify) {
     55a:	81 17       	cp	r24, r17
     55c:	39 f0       	breq	.+14     	; 0x56c <gb_flash_write_byte_bank1_commands+0x88>
		dataVerify = gb_flash_read_byte(address);
     55e:	ce 01       	movw	r24, r28
     560:	6d df       	rcall	.-294    	; 0x43c <gb_flash_read_byte>
     562:	9d e0       	ldi	r25, 0x0D	; 13
     564:	9a 95       	dec	r25
     566:	f1 f7       	brne	.-4      	; 0x564 <gb_flash_write_byte_bank1_commands+0x80>
     568:	00 00       	nop
     56a:	f7 cf       	rjmp	.-18     	; 0x55a <gb_flash_write_byte_bank1_commands+0x76>
		_delay_us(5);
	}
}
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	ff 90       	pop	r15
     576:	08 95       	ret

00000578 <gba_flash_write_bus_cycle>:


// ---------- GBA FLASH CARTS ----------

// Set the 24 bit address and 16 bit data for the write byte cycle to the flash (pulse WR pin)
void gba_flash_write_bus_cycle(uint32_t address, uint16_t data) {
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
     57c:	8c 01       	movw	r16, r24
     57e:	22 27       	eor	r18, r18
     580:	33 27       	eor	r19, r19
     582:	05 bb       	out	0x15, r16	; 21
	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
     584:	07 2f       	mov	r16, r23
     586:	18 2f       	mov	r17, r24
     588:	29 2f       	mov	r18, r25
     58a:	33 27       	eor	r19, r19
     58c:	0b bb       	out	0x1b, r16	; 27
	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
     58e:	68 bb       	out	0x18, r22	; 24
	
	cs_mreqPin_low;
     590:	94 98       	cbi	0x12, 4	; 18
	
	GBA_PORT_ROM_DATA15_8 = data >> 8; // Set data
     592:	5b bb       	out	0x1b, r21	; 27
	GBA_PORT_ROM_DATA7_0 = data & 0xFF;
     594:	48 bb       	out	0x18, r20	; 24
	
	wrPin_low;
     596:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     598:	00 00       	nop
	asm volatile("nop");
     59a:	00 00       	nop
	asm volatile("nop");
     59c:	00 00       	nop
	wrPin_high;
     59e:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     5a0:	94 9a       	sbi	0x12, 4	; 18
}
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	08 95       	ret

000005a8 <gba_flash_write_cycle_start_swapped>:

// Send the first 3 write cycles to the flash (swapped D0/D1)
void gba_flash_write_cycle_start_swapped(void) {
	// Set outputs
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     5a8:	8f ef       	ldi	r24, 0xFF	; 255
     5aa:	84 bb       	out	0x14, r24	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     5ac:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     5ae:	87 bb       	out	0x17, r24	; 23
	
	// 0x555, 0xA9
	GBA_PORT_ROM_ADDR23_16 = 0;
     5b0:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     5b2:	95 e0       	ldi	r25, 0x05	; 5
     5b4:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     5b6:	85 e5       	ldi	r24, 0x55	; 85
     5b8:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     5ba:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     5bc:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA9;
     5be:	29 ea       	ldi	r18, 0xA9	; 169
     5c0:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     5c2:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     5c4:	00 00       	nop
	asm volatile("nop");
     5c6:	00 00       	nop
	asm volatile("nop");
     5c8:	00 00       	nop
	wrPin_high;
     5ca:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     5cc:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x2AA, 0x56
	GBA_PORT_ROM_ADDR23_16 = 0;
     5ce:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x02;
     5d0:	22 e0       	ldi	r18, 0x02	; 2
     5d2:	2b bb       	out	0x1b, r18	; 27
	GBA_PORT_ROM_ADDR7_0 = 0xAA;
     5d4:	2a ea       	ldi	r18, 0xAA	; 170
     5d6:	28 bb       	out	0x18, r18	; 24
	cs_mreqPin_low;
     5d8:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     5da:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0x56;
     5dc:	26 e5       	ldi	r18, 0x56	; 86
     5de:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     5e0:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     5e2:	00 00       	nop
	asm volatile("nop");
     5e4:	00 00       	nop
	asm volatile("nop");
     5e6:	00 00       	nop
	wrPin_high;
     5e8:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     5ea:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x555, 0xA0;
	GBA_PORT_ROM_ADDR23_16 = 0;
     5ec:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     5ee:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     5f0:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     5f2:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     5f4:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA0;
     5f6:	80 ea       	ldi	r24, 0xA0	; 160
     5f8:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     5fa:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     5fc:	00 00       	nop
	asm volatile("nop");
     5fe:	00 00       	nop
	asm volatile("nop");
     600:	00 00       	nop
	wrPin_high;
     602:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     604:	94 9a       	sbi	0x12, 4	; 18
     606:	08 95       	ret

00000608 <gba_flash_write_cycle_start>:


// Send the first 3 write cycles to the flash
void gba_flash_write_cycle_start(void) {
	// Set outputs
	GBA_DDR_ROM_ADDR23_16 = 0xFF;
     608:	8f ef       	ldi	r24, 0xFF	; 255
     60a:	84 bb       	out	0x14, r24	; 20
	GBA_DDR_ROM_ADDR15_8 = 0xFF;
     60c:	8a bb       	out	0x1a, r24	; 26
	GBA_DDR_ROM_ADDR7_0 = 0xFF;
     60e:	87 bb       	out	0x17, r24	; 23
	
	// 0x555, 0xAA
	GBA_PORT_ROM_ADDR23_16 = 0;
     610:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     612:	95 e0       	ldi	r25, 0x05	; 5
     614:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     616:	85 e5       	ldi	r24, 0x55	; 85
     618:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     61a:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     61c:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xAA;
     61e:	2a ea       	ldi	r18, 0xAA	; 170
     620:	28 bb       	out	0x18, r18	; 24
	wrPin_low;
     622:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     624:	00 00       	nop
	asm volatile("nop");
     626:	00 00       	nop
	asm volatile("nop");
     628:	00 00       	nop
	wrPin_high;
     62a:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     62c:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x2AA, 0x55
	GBA_PORT_ROM_ADDR23_16 = 0;
     62e:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x02;
     630:	32 e0       	ldi	r19, 0x02	; 2
     632:	3b bb       	out	0x1b, r19	; 27
	GBA_PORT_ROM_ADDR7_0 = 0xAA;
     634:	28 bb       	out	0x18, r18	; 24
	cs_mreqPin_low;
     636:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     638:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0x55;
     63a:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     63c:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     63e:	00 00       	nop
	asm volatile("nop");
     640:	00 00       	nop
	asm volatile("nop");
     642:	00 00       	nop
	wrPin_high;
     644:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     646:	94 9a       	sbi	0x12, 4	; 18
	
	// 0x555, 0xA0;
	GBA_PORT_ROM_ADDR23_16 = 0;
     648:	15 ba       	out	0x15, r1	; 21
	GBA_PORT_ROM_ADDR15_8 = 0x05;
     64a:	9b bb       	out	0x1b, r25	; 27
	GBA_PORT_ROM_ADDR7_0 = 0x55;
     64c:	88 bb       	out	0x18, r24	; 24
	cs_mreqPin_low;
     64e:	94 98       	cbi	0x12, 4	; 18
	GBA_PORT_ROM_DATA15_8 = 0; // Set data
     650:	1b ba       	out	0x1b, r1	; 27
	GBA_PORT_ROM_DATA7_0 = 0xA0;
     652:	80 ea       	ldi	r24, 0xA0	; 160
     654:	88 bb       	out	0x18, r24	; 24
	wrPin_low;
     656:	96 98       	cbi	0x12, 6	; 18
	asm volatile("nop");
     658:	00 00       	nop
	asm volatile("nop");
     65a:	00 00       	nop
	asm volatile("nop");
     65c:	00 00       	nop
	wrPin_high;
     65e:	96 9a       	sbi	0x12, 6	; 18
	cs_mreqPin_high;
     660:	94 9a       	sbi	0x12, 4	; 18
     662:	08 95       	ret

00000664 <gba_flash_write_byte>:
}	


// Write 2 bytes to the Flash address. Time to wait depends on Flash, we will query it to verify the correct data has been written.
// Address is divided by 2 as we are in GBA mode. 
void gba_flash_write_byte(uint32_t address, uint16_t data, uint8_t isD0D1Swapped) {
     664:	cf 92       	push	r12
     666:	df 92       	push	r13
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	6b 01       	movw	r12, r22
     672:	7c 01       	movw	r14, r24
     674:	ea 01       	movw	r28, r20
	if (isD0D1Swapped == 0) {
     676:	21 11       	cpse	r18, r1
     678:	02 c0       	rjmp	.+4      	; 0x67e <gba_flash_write_byte+0x1a>
		gba_flash_write_cycle_start();
     67a:	c6 df       	rcall	.-116    	; 0x608 <gba_flash_write_cycle_start>
     67c:	01 c0       	rjmp	.+2      	; 0x680 <gba_flash_write_byte+0x1c>
	}
	else {
		gba_flash_write_cycle_start_swapped();
     67e:	94 df       	rcall	.-216    	; 0x5a8 <gba_flash_write_cycle_start_swapped>
	}
	gba_flash_write_bus_cycle(address, data);
     680:	ae 01       	movw	r20, r28
     682:	c7 01       	movw	r24, r14
     684:	b6 01       	movw	r22, r12
     686:	78 df       	rcall	.-272    	; 0x578 <gba_flash_write_bus_cycle>
     688:	25 e0       	ldi	r18, 0x05	; 5
     68a:	2a 95       	dec	r18
     68c:	f1 f7       	brne	.-4      	; 0x68a <gba_flash_write_byte+0x26>
     68e:	00 00       	nop
	_delay_us(2); // Wait byte program time
	
	// Verify data
	uint16_t dataVerify = gba_read_16bit_data(address);
     690:	c7 01       	movw	r24, r14
     692:	b6 01       	movw	r22, r12
     694:	4c dd       	rcall	.-1384   	; 0x12e <gba_read_16bit_data>
	while (data != dataVerify) {
     696:	8c 17       	cp	r24, r28
     698:	9d 07       	cpc	r25, r29
     69a:	41 f0       	breq	.+16     	; 0x6ac <gba_flash_write_byte+0x48>
		dataVerify = gba_read_16bit_data(address);
     69c:	c7 01       	movw	r24, r14
     69e:	b6 01       	movw	r22, r12
     6a0:	46 dd       	rcall	.-1396   	; 0x12e <gba_read_16bit_data>
     6a2:	25 e0       	ldi	r18, 0x05	; 5
     6a4:	2a 95       	dec	r18
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <gba_flash_write_byte+0x40>
     6a8:	00 00       	nop
     6aa:	f5 cf       	rjmp	.-22     	; 0x696 <gba_flash_write_byte+0x32>
		_delay_us(2);
	}
}
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	df 90       	pop	r13
     6b6:	cf 90       	pop	r12
     6b8:	08 95       	ret

000006ba <setup>:


// Setup
void setup(void) {
	// Turn off watchdog
	MCUCSR &= ~(1<<WDRF);
     6ba:	84 b7       	in	r24, 0x34	; 52
     6bc:	87 7f       	andi	r24, 0xF7	; 247
     6be:	84 bf       	out	0x34, r24	; 52
	WDTCR = (1<<WDCE) | (1<<WDE);
     6c0:	88 e1       	ldi	r24, 0x18	; 24
     6c2:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
     6c4:	11 bc       	out	0x21, r1	; 33
	
	// Reset common lines
	rd_wr_csmreq_cs2_reset();
     6c6:	e6 dc       	rcall	.-1588   	; 0x94 <rd_wr_csmreq_cs2_reset>
	
	// Set outputs
	DDRD |= (1<<ACTIVITY_LED) | (1<<WR_PIN) | (1<<RD_PIN) | (1<<CS_MREQ_PIN) | (1<<LED_5V);
     6c8:	81 b3       	in	r24, 0x11	; 17
     6ca:	88 6f       	ori	r24, 0xF8	; 248
     6cc:	81 bb       	out	0x11, r24	; 17
	DDRE |= (1<<CS2_PIN) | (1<<LED_3V);
     6ce:	86 b1       	in	r24, 0x06	; 6
     6d0:	85 60       	ori	r24, 0x05	; 5
     6d2:	86 b9       	out	0x06, r24	; 6
	
	// Set all pins as inputs
	PORT_DATA7_0 = 0;
     6d4:	15 ba       	out	0x15, r1	; 21
	DDR_DATA7_0 = 0;
     6d6:	14 ba       	out	0x14, r1	; 20
	PORT_ADDR7_0 = 0;
     6d8:	18 ba       	out	0x18, r1	; 24
	DDR_ADDR7_0 = 0;
     6da:	17 ba       	out	0x17, r1	; 23
	PORT_ADDR15_8 = 0;
     6dc:	1b ba       	out	0x1b, r1	; 27
	DDR_ADDR15_8 = 0;
     6de:	1a ba       	out	0x1a, r1	; 26
	
	// Light up 3.3V or 5V
	if (PIND & (1<<SWITCH_DETECT)) {
     6e0:	82 9b       	sbis	0x10, 2	; 16
     6e2:	0e c0       	rjmp	.+28     	; 0x700 <setup+0x46>
		PORTD |= (1<<LED_5V);
     6e4:	97 9a       	sbi	0x12, 7	; 18
		PORTE &= ~(1<<LED_3V);
     6e6:	38 98       	cbi	0x07, 0	; 7
		
		// Set Reset low for 50ms to reset the cart (also for CPLD carts to initialise properly)
		cs2Pin_low;
     6e8:	3a 98       	cbi	0x07, 2	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ea:	2f e7       	ldi	r18, 0x7F	; 127
     6ec:	88 e3       	ldi	r24, 0x38	; 56
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	80 40       	sbci	r24, 0x00	; 0
     6f4:	90 40       	sbci	r25, 0x00	; 0
     6f6:	e1 f7       	brne	.-8      	; 0x6f0 <setup+0x36>
     6f8:	00 c0       	rjmp	.+0      	; 0x6fa <setup+0x40>
     6fa:	00 00       	nop
		_delay_ms(50);
		cs2Pin_high;
     6fc:	3a 9a       	sbi	0x07, 2	; 7
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <setup+0x4a>
	}
	else {
		PORTE |= (1<<LED_3V);
     700:	38 9a       	sbi	0x07, 0	; 7
		PORTD &= ~(1<<LED_5V);
     702:	97 98       	cbi	0x12, 7	; 18
	}
	
	// Light LED
	PORTD |= (1<<ACTIVITY_LED);
     704:	93 9a       	sbi	0x12, 3	; 18
     706:	2f ef       	ldi	r18, 0xFF	; 255
     708:	84 e3       	ldi	r24, 0x34	; 52
     70a:	9c e0       	ldi	r25, 0x0C	; 12
     70c:	21 50       	subi	r18, 0x01	; 1
     70e:	80 40       	sbci	r24, 0x00	; 0
     710:	90 40       	sbci	r25, 0x00	; 0
     712:	e1 f7       	brne	.-8      	; 0x70c <setup+0x52>
     714:	00 c0       	rjmp	.+0      	; 0x716 <setup+0x5c>
     716:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1<<ACTIVITY_LED);
     718:	93 98       	cbi	0x12, 3	; 18
	
	// Setup USART
	UBRRL = 0; // 1Mbps Baud rate
     71a:	19 b8       	out	0x09, r1	; 9
	sbi(UCSRA, U2X); // Double rate
     71c:	59 9a       	sbi	0x0b, 1	; 11
	sbi(UCSRB, TXEN); // Transmitter enable
     71e:	53 9a       	sbi	0x0a, 3	; 10
	sbi(UCSRB, RXEN); // Receiver enable
     720:	54 9a       	sbi	0x0a, 4	; 10
	
	// Turn on interrupts
	sei();
     722:	78 94       	sei
     724:	08 95       	ret

00000726 <main>:
#include <string.h>
#include "setup.c" // See defines, variables, constants, functions here


int main(void) {
	setup();
     726:	c9 df       	rcall	.-110    	; 0x6ba <setup>
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t cartMode = GB_MODE;
	uint8_t resetCommonLines = 1;
     728:	22 24       	eor	r2, r2
     72a:	23 94       	inc	r2

int main(void) {
	setup();
	
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
     72c:	d1 e0       	ldi	r29, 0x01	; 1


int main(void) {
	setup();
	
	uint32_t address = 0;
     72e:	c1 2c       	mov	r12, r1
     730:	d1 2c       	mov	r13, r1
     732:	76 01       	movw	r14, r12
			uint8_t readEnd = 32;
			if (receivedChar == GBA_READ_ROM_256BYTE) {
				readEnd = 128;
			}
			
			receivedChar = '1';
     734:	81 e3       	ldi	r24, 0x31	; 49
     736:	38 2e       	mov	r3, r24
			usart_read_bytes(64);
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
				// Set address lines as outputs
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
     738:	cf ef       	ldi	r28, 0xFF	; 255
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t cartMode = GB_MODE;
	uint8_t resetCommonLines = 1;
	
	while(1) {
		if (resetCommonLines == 1) {
     73a:	21 e0       	ldi	r18, 0x01	; 1
     73c:	22 12       	cpse	r2, r18
     73e:	01 c0       	rjmp	.+2      	; 0x742 <main+0x1c>
			rd_wr_csmreq_cs2_reset();
     740:	a9 dc       	rcall	.-1710   	; 0x94 <rd_wr_csmreq_cs2_reset>
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
     742:	80 dc       	rcall	.-1792   	; 0x44 <USART_Receive>
     744:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
		
		// Read the pin to find out which mode we are in, if it reads high, we are powered by 5V
		if (PIND & (1<<SWITCH_DETECT)) {
     748:	82 9b       	sbis	0x10, 2	; 16
     74a:	04 c0       	rjmp	.+8      	; 0x754 <main+0x2e>
			cartMode = GB_MODE;
			PORTD |= (1<<LED_5V);
     74c:	97 9a       	sbi	0x12, 7	; 18
			PORTE &= ~(1<<LED_3V);
     74e:	38 98       	cbi	0x07, 0	; 7
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
		
		// Read the pin to find out which mode we are in, if it reads high, we are powered by 5V
		if (PIND & (1<<SWITCH_DETECT)) {
			cartMode = GB_MODE;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	03 c0       	rjmp	.+6      	; 0x75a <main+0x34>
			PORTD |= (1<<LED_5V);
			PORTE &= ~(1<<LED_3V);
		}
		else {
			cartMode = GBA_MODE;
			PORTE |= (1<<LED_3V);
     754:	38 9a       	sbi	0x07, 0	; 7
			PORTD &= ~(1<<LED_5V);
     756:	97 98       	cbi	0x12, 7	; 18
			cartMode = GB_MODE;
			PORTD |= (1<<LED_5V);
			PORTE &= ~(1<<LED_3V);
		}
		else {
			cartMode = GBA_MODE;
     758:	82 e0       	ldi	r24, 0x02	; 2
			PORTE |= (1<<LED_3V);
			PORTD &= ~(1<<LED_5V);
		}
		
		// Return the cart mode in use
		if (receivedChar == CART_MODE) {
     75a:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <receivedChar>
     75e:	93 34       	cpi	r25, 0x43	; 67
     760:	09 f4       	brne	.+2      	; 0x764 <main+0x3e>
     762:	79 c5       	rjmp	.+2802   	; 0x1256 <main+0xb30>
			USART_Transmit(cartMode);
		}
		
		// Change to GB mode or GBA mode if requested
		else if (receivedChar == GB_CART_MODE) {
     764:	97 34       	cpi	r25, 0x47	; 71
     766:	11 f4       	brne	.+4      	; 0x76c <main+0x46>
			gb_mode();
     768:	9a dc       	rcall	.-1740   	; 0x9e <gb_mode>
     76a:	e7 cf       	rjmp	.-50     	; 0x73a <main+0x14>
		}
		else if (receivedChar == GBA_CART_MODE) {
     76c:	97 36       	cpi	r25, 0x67	; 103
     76e:	09 f4       	brne	.+2      	; 0x772 <main+0x4c>
     770:	e6 c0       	rjmp	.+460    	; 0x93e <main+0x218>
			gba_mode();
		}
		
		// Set address
		else if (receivedChar == SET_START_ADDRESS) {
     772:	91 34       	cpi	r25, 0x41	; 65
     774:	59 f4       	brne	.+22     	; 0x78c <main+0x66>
			usart_read_chars(); // Read start address
     776:	83 dc       	rcall	.-1786   	; 0x7e <usart_read_chars>
			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     778:	40 e1       	ldi	r20, 0x10	; 16
     77a:	50 e0       	ldi	r21, 0x00	; 0
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	80 e7       	ldi	r24, 0x70	; 112
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	87 d5       	rcall	.+2830   	; 0x1294 <strtol>
     786:	6b 01       	movw	r12, r22
     788:	7c 01       	movw	r14, r24
     78a:	d7 cf       	rjmp	.-82     	; 0x73a <main+0x14>
		
		
		// ****** Gameboy / Gameboy Colour ******
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
     78c:	92 35       	cpi	r25, 0x52	; 82
     78e:	f1 f4       	brne	.+60     	; 0x7cc <main+0xa6>
			gb_mode();
     790:	86 dc       	rcall	.-1780   	; 0x9e <gb_mode>
			receivedChar = '1';
     792:	30 92 70 01 	sts	0x0170, r3	; 0x800170 <receivedChar>
			while (receivedChar == '1') {
     796:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
     79a:	81 33       	cpi	r24, 0x31	; 49
     79c:	71 f6       	brne	.-100    	; 0x73a <main+0x14>
				PORTD |= (1<<ACTIVITY_LED);
     79e:	93 9a       	sbi	0x12, 3	; 18
     7a0:	00 e0       	ldi	r16, 0x00	; 0
     7a2:	10 e0       	ldi	r17, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(read_8bit_data(address));
     7a4:	c8 01       	movw	r24, r16
     7a6:	8c 0d       	add	r24, r12
     7a8:	9d 1d       	adc	r25, r13
     7aa:	84 dc       	rcall	.-1784   	; 0xb4 <read_8bit_data>
     7ac:	4f dc       	rcall	.-1890   	; 0x4c <USART_Transmit>
     7ae:	0f 5f       	subi	r16, 0xFF	; 255
     7b0:	1f 4f       	sbci	r17, 0xFF	; 255
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
     7b2:	00 34       	cpi	r16, 0x40	; 64
     7b4:	11 05       	cpc	r17, r1
     7b6:	b1 f7       	brne	.-20     	; 0x7a4 <main+0x7e>
     7b8:	80 e4       	ldi	r24, 0x40	; 64
     7ba:	c8 0e       	add	r12, r24
     7bc:	d1 1c       	adc	r13, r1
     7be:	e1 1c       	adc	r14, r1
     7c0:	f1 1c       	adc	r15, r1
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     7c2:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     7c4:	3f dc       	rcall	.-1922   	; 0x44 <USART_Receive>
     7c6:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
     7ca:	e5 cf       	rjmp	.-54     	; 0x796 <main+0x70>
			}
		}
		
		// Write 64 bytes to RAM on address (and increment)
		else if (receivedChar == WRITE_RAM) {
     7cc:	97 35       	cpi	r25, 0x57	; 87
     7ce:	f1 f4       	brne	.+60     	; 0x80c <main+0xe6>
			gb_mode();
     7d0:	66 dc       	rcall	.-1844   	; 0x9e <gb_mode>
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
     7d2:	80 e4       	ldi	r24, 0x40	; 64
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	3e dc       	rcall	.-1924   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     7d8:	93 9a       	sbi	0x12, 3	; 18
     7da:	00 e7       	ldi	r16, 0x70	; 112
     7dc:	a0 2e       	mov	r10, r16
     7de:	00 e0       	ldi	r16, 0x00	; 0
     7e0:	b0 2e       	mov	r11, r16
     7e2:	00 e0       	ldi	r16, 0x00	; 0
     7e4:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
     7e6:	f5 01       	movw	r30, r10
     7e8:	61 91       	ld	r22, Z+
     7ea:	5f 01       	movw	r10, r30
     7ec:	c8 01       	movw	r24, r16
     7ee:	8c 0d       	add	r24, r12
     7f0:	9d 1d       	adc	r25, r13
     7f2:	41 e0       	ldi	r20, 0x01	; 1
     7f4:	68 dc       	rcall	.-1840   	; 0xc6 <write_8bit_data>
     7f6:	0f 5f       	subi	r16, 0xFF	; 255
     7f8:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     7fa:	00 34       	cpi	r16, 0x40	; 64
     7fc:	11 05       	cpc	r17, r1
     7fe:	99 f7       	brne	.-26     	; 0x7e6 <main+0xc0>
     800:	f0 e4       	ldi	r31, 0x40	; 64
     802:	cf 0e       	add	r12, r31
     804:	d1 1c       	adc	r13, r1
     806:	e1 1c       	adc	r14, r1
     808:	f1 1c       	adc	r15, r1
     80a:	31 c3       	rjmp	.+1634   	; 0xe6e <main+0x748>
			PORTD &= ~(1<<ACTIVITY_LED);
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Set bank address and write a byte
		else if (receivedChar == SET_BANK) {
     80c:	92 34       	cpi	r25, 0x42	; 66
     80e:	e1 f4       	brne	.+56     	; 0x848 <main+0x122>
			gb_mode();
     810:	46 dc       	rcall	.-1908   	; 0x9e <gb_mode>
			
			usart_read_chars(); // Read start address
     812:	35 dc       	rcall	.-1942   	; 0x7e <usart_read_chars>
			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     814:	40 e1       	ldi	r20, 0x10	; 16
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	80 e7       	ldi	r24, 0x70	; 112
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	39 d5       	rcall	.+2674   	; 0x1294 <strtol>
     822:	4b 01       	movw	r8, r22
     824:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for bank number
     826:	0e dc       	rcall	.-2020   	; 0x44 <USART_Receive>
     828:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
			if (receivedChar == 'B') {
     82c:	82 34       	cpi	r24, 0x42	; 66
     82e:	09 f0       	breq	.+2      	; 0x832 <main+0x10c>
     830:	84 cf       	rjmp	.-248    	; 0x73a <main+0x14>
				usart_read_chars(); // Read data
     832:	25 dc       	rcall	.-1974   	; 0x7e <usart_read_chars>
				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
     834:	80 e7       	ldi	r24, 0x70	; 112
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	3e d6       	rcall	.+3196   	; 0x14b6 <atoi>
				lastBankAccessed = data; // Store the last bank accessed (used for flash carts that need it)
     83a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
				
				write_8bit_data(bankaddress, data, BANK_WRITE);
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	68 2f       	mov	r22, r24
     842:	c4 01       	movw	r24, r8
     844:	40 dc       	rcall	.-1920   	; 0xc6 <write_8bit_data>
     846:	79 cf       	rjmp	.-270    	; 0x73a <main+0x14>
		
		// ****** Gameboy Advance ******
		
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
     848:	92 37       	cpi	r25, 0x72	; 114
     84a:	11 f0       	breq	.+4      	; 0x850 <main+0x12a>
     84c:	9a 36       	cpi	r25, 0x6A	; 106
     84e:	b1 f5       	brne	.+108    	; 0x8bc <main+0x196>
			gba_mode();
     850:	50 dc       	rcall	.-1888   	; 0xf2 <gba_mode>
			
			uint8_t readEnd = 32;
			if (receivedChar == GBA_READ_ROM_256BYTE) {
     852:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
     856:	8a 36       	cpi	r24, 0x6A	; 106
     858:	11 f4       	brne	.+4      	; 0x85e <main+0x138>
				readEnd = 128;
     85a:	10 e8       	ldi	r17, 0x80	; 128
     85c:	01 c0       	rjmp	.+2      	; 0x860 <main+0x13a>
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
			gba_mode();
			
			uint8_t readEnd = 32;
     85e:	10 e2       	ldi	r17, 0x20	; 32
			if (receivedChar == GBA_READ_ROM_256BYTE) {
				readEnd = 128;
			}
			
			receivedChar = '1';
     860:	30 92 70 01 	sts	0x0170, r3	; 0x800170 <receivedChar>
     864:	88 24       	eor	r8, r8
     866:	8a 94       	dec	r8
     868:	81 0e       	add	r8, r17
     86a:	91 2c       	mov	r9, r1
     86c:	a1 2c       	mov	r10, r1
     86e:	b1 2c       	mov	r11, r1
     870:	2f ef       	ldi	r18, 0xFF	; 255
     872:	82 1a       	sub	r8, r18
     874:	92 0a       	sbc	r9, r18
     876:	a2 0a       	sbc	r10, r18
     878:	b2 0a       	sbc	r11, r18
			while (receivedChar == '1') {
     87a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
     87e:	81 33       	cpi	r24, 0x31	; 49
     880:	09 f0       	breq	.+2      	; 0x884 <main+0x15e>
     882:	5b cf       	rjmp	.-330    	; 0x73a <main+0x14>
				PORTD |= (1<<ACTIVITY_LED);
     884:	93 9a       	sbi	0x12, 3	; 18
     886:	26 01       	movw	r4, r12
     888:	37 01       	movw	r6, r14
				
				for (uint8_t x = 0; x < readEnd; x++) {
					uint16_t dataRead = gba_read_16bit_data(address);
     88a:	c3 01       	movw	r24, r6
     88c:	b2 01       	movw	r22, r4
     88e:	4f dc       	rcall	.-1890   	; 0x12e <gba_read_16bit_data>
     890:	09 2f       	mov	r16, r25
					
					// Low byte & High byte
					USART_Transmit(dataRead & 0xFF);
     892:	dc db       	rcall	.-2120   	; 0x4c <USART_Transmit>
					USART_Transmit(dataRead >> 8);
     894:	80 2f       	mov	r24, r16
     896:	da db       	rcall	.-2124   	; 0x4c <USART_Transmit>
					
					address++;
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	48 1a       	sub	r4, r24
     89c:	58 0a       	sbc	r5, r24
     89e:	68 0a       	sbc	r6, r24
     8a0:	78 0a       	sbc	r7, r24
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				
				for (uint8_t x = 0; x < readEnd; x++) {
     8a2:	84 2d       	mov	r24, r4
     8a4:	8c 19       	sub	r24, r12
     8a6:	81 17       	cp	r24, r17
     8a8:	80 f3       	brcs	.-32     	; 0x88a <main+0x164>
     8aa:	c8 0c       	add	r12, r8
     8ac:	d9 1c       	adc	r13, r9
     8ae:	ea 1c       	adc	r14, r10
     8b0:	fb 1c       	adc	r15, r11
					USART_Transmit(dataRead >> 8);
					
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     8b2:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     8b4:	c7 db       	rcall	.-2162   	; 0x44 <USART_Receive>
     8b6:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
     8ba:	df cf       	rjmp	.-66     	; 0x87a <main+0x154>
			}
		}
		
		// ---------- SRAM ----------
		// Read RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_SRAM) {
     8bc:	9d 36       	cpi	r25, 0x6D	; 109
     8be:	f1 f4       	brne	.+60     	; 0x8fc <main+0x1d6>
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
     8c0:	ee db       	rcall	.-2084   	; 0x9e <gb_mode>
			
			receivedChar = '1';
     8c2:	30 92 70 01 	sts	0x0170, r3	; 0x800170 <receivedChar>
			while (receivedChar == '1') {
     8c6:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
     8ca:	81 33       	cpi	r24, 0x31	; 49
     8cc:	c1 f5       	brne	.+112    	; 0x93e <main+0x218>
				PORTD |= (1<<ACTIVITY_LED);
     8ce:	93 9a       	sbi	0x12, 3	; 18
     8d0:	00 e0       	ldi	r16, 0x00	; 0
     8d2:	10 e0       	ldi	r17, 0x00	; 0
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(gba_read_ram_8bit_data(address));
     8d4:	c8 01       	movw	r24, r16
     8d6:	8c 0d       	add	r24, r12
     8d8:	9d 1d       	adc	r25, r13
     8da:	38 dc       	rcall	.-1936   	; 0x14c <gba_read_ram_8bit_data>
     8dc:	b7 db       	rcall	.-2194   	; 0x4c <USART_Transmit>
     8de:	0f 5f       	subi	r16, 0xFF	; 255
     8e0:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
     8e2:	00 34       	cpi	r16, 0x40	; 64
     8e4:	11 05       	cpc	r17, r1
     8e6:	b1 f7       	brne	.-20     	; 0x8d4 <main+0x1ae>
     8e8:	90 e4       	ldi	r25, 0x40	; 64
     8ea:	c9 0e       	add	r12, r25
     8ec:	d1 1c       	adc	r13, r1
     8ee:	e1 1c       	adc	r14, r1
     8f0:	f1 1c       	adc	r15, r1
					USART_Transmit(gba_read_ram_8bit_data(address));
					address++;
				}
				
				PORTD &= ~(1<<ACTIVITY_LED);
     8f2:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     8f4:	a7 db       	rcall	.-2226   	; 0x44 <USART_Receive>
     8f6:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
     8fa:	e5 cf       	rjmp	.-54     	; 0x8c6 <main+0x1a0>
			
			gba_mode(); // Set back
		}
		
		// Write to RAM on address (and increment) with 64 bytes of data
		else if (receivedChar == GBA_WRITE_SRAM) {
     8fc:	97 37       	cpi	r25, 0x77	; 119
     8fe:	09 f5       	brne	.+66     	; 0x942 <main+0x21c>
			gb_mode();
     900:	ce db       	rcall	.-2148   	; 0x9e <gb_mode>
			
			usart_read_bytes(64);
     902:	80 e4       	ldi	r24, 0x40	; 64
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a6 db       	rcall	.-2228   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     908:	93 9a       	sbi	0x12, 3	; 18
     90a:	10 e7       	ldi	r17, 0x70	; 112
     90c:	a1 2e       	mov	r10, r17
     90e:	10 e0       	ldi	r17, 0x00	; 0
     910:	b1 2e       	mov	r11, r17
     912:	00 e0       	ldi	r16, 0x00	; 0
     914:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
     916:	f5 01       	movw	r30, r10
     918:	61 91       	ld	r22, Z+
     91a:	5f 01       	movw	r10, r30
     91c:	c8 01       	movw	r24, r16
     91e:	8c 0d       	add	r24, r12
     920:	9d 1d       	adc	r25, r13
     922:	1d dc       	rcall	.-1990   	; 0x15e <gba_write_ram_8bit_data>
     924:	0f 5f       	subi	r16, 0xFF	; 255
     926:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     928:	00 34       	cpi	r16, 0x40	; 64
     92a:	11 05       	cpc	r17, r1
     92c:	a1 f7       	brne	.-24     	; 0x916 <main+0x1f0>
     92e:	f0 e4       	ldi	r31, 0x40	; 64
     930:	cf 0e       	add	r12, r31
     932:	d1 1c       	adc	r13, r1
     934:	e1 1c       	adc	r14, r1
     936:	f1 1c       	adc	r15, r1
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
				address++;
			}
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     938:	81 e3       	ldi	r24, 0x31	; 49
     93a:	88 db       	rcall	.-2288   	; 0x4c <USART_Transmit>
			
			PORTD &= ~(1<<ACTIVITY_LED);
     93c:	93 98       	cbi	0x12, 3	; 18
			gba_mode(); // Set back
     93e:	d9 db       	rcall	.-2126   	; 0xf2 <gba_mode>
     940:	fc ce       	rjmp	.-520    	; 0x73a <main+0x14>
		}
		
		// Write 1 byte to SRAM address
		else if (receivedChar == GBA_WRITE_ONE_BYTE_SRAM) {
     942:	9f 36       	cpi	r25, 0x6F	; 111
     944:	31 f4       	brne	.+12     	; 0x952 <main+0x22c>
			gb_mode();
     946:	ab db       	rcall	.-2218   	; 0x9e <gb_mode>
			
			uint8_t data = USART_Receive();
     948:	7d db       	rcall	.-2310   	; 0x44 <USART_Receive>
			gba_write_ram_8bit_data(address, data);
     94a:	68 2f       	mov	r22, r24
     94c:	c6 01       	movw	r24, r12
     94e:	07 dc       	rcall	.-2034   	; 0x15e <gba_write_ram_8bit_data>
     950:	23 c0       	rjmp	.+70     	; 0x998 <main+0x272>
		}
		
		
		// ---------- FLASH ----------
		// Read the Flash Manufacturer and Device ID
		else if (receivedChar == GBA_FLASH_READ_ID) {
     952:	99 36       	cpi	r25, 0x69	; 105
     954:	49 f4       	brne	.+18     	; 0x968 <main+0x242>
			gb_mode();
     956:	a3 db       	rcall	.-2234   	; 0x9e <gb_mode>
			
			flash_read_chip_id();
     958:	b3 dc       	rcall	.-1690   	; 0x2c0 <flash_read_chip_id>
			USART_Transmit(flashChipIdBuffer[0]);
     95a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <flashChipIdBuffer>
     95e:	76 db       	rcall	.-2324   	; 0x4c <USART_Transmit>
			USART_Transmit(flashChipIdBuffer[1]);
     960:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <flashChipIdBuffer+0x1>
     964:	73 db       	rcall	.-2330   	; 0x4c <USART_Transmit>
     966:	eb cf       	rjmp	.-42     	; 0x93e <main+0x218>
			
			gba_mode(); // Set back
		}
		
		// Change bank
		else if (receivedChar == GBA_FLASH_SET_BANK) {
     968:	9b 36       	cpi	r25, 0x6B	; 107
     96a:	49 f4       	brne	.+18     	; 0x97e <main+0x258>
			usart_read_chars(); // Read data
     96c:	88 db       	rcall	.-2288   	; 0x7e <usart_read_chars>
			uint8_t bank = atoi(receivedBuffer); // Convert data string to dec
     96e:	80 e7       	ldi	r24, 0x70	; 112
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a1 d5       	rcall	.+2882   	; 0x14b6 <atoi>
     974:	18 2f       	mov	r17, r24
			
			gb_mode();
     976:	93 db       	rcall	.-2266   	; 0x9e <gb_mode>
			flash_switch_bank(bank);
     978:	81 2f       	mov	r24, r17
     97a:	d7 dc       	rcall	.-1618   	; 0x32a <flash_switch_bank>
     97c:	e0 cf       	rjmp	.-64     	; 0x93e <main+0x218>
			
			gba_mode(); // Set back
		}
		
		// Erase 4K sector on Flash (sector 0 to 15 for 512Kbit)
		else if (receivedChar == GBA_FLASH_4K_SECTOR_ERASE) {
     97e:	93 37       	cpi	r25, 0x73	; 115
     980:	69 f4       	brne	.+26     	; 0x99c <main+0x276>
			gb_mode();
     982:	8d db       	rcall	.-2278   	; 0x9e <gb_mode>
			
			usart_read_chars(); // Read sector
     984:	7c db       	rcall	.-2312   	; 0x7e <usart_read_chars>
			uint8_t sectorAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     986:	40 e1       	ldi	r20, 0x10	; 16
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	80 e7       	ldi	r24, 0x70	; 112
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	80 d4       	rcall	.+2304   	; 0x1294 <strtol>
     994:	86 2f       	mov	r24, r22
			
			flash_erase_4k_sector(sectorAddress);
     996:	dc dc       	rcall	.-1608   	; 0x350 <flash_erase_4k_sector>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     998:	81 e3       	ldi	r24, 0x31	; 49
     99a:	e4 cf       	rjmp	.-56     	; 0x964 <main+0x23e>
			
			gba_mode(); // Set back
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_BYTE) {
     99c:	92 36       	cpi	r25, 0x62	; 98
     99e:	c1 f4       	brne	.+48     	; 0x9d0 <main+0x2aa>
			gb_mode();
     9a0:	7e db       	rcall	.-2308   	; 0x9e <gb_mode>
			
			usart_read_bytes(64);
     9a2:	80 e4       	ldi	r24, 0x40	; 64
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	56 db       	rcall	.-2388   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     9a8:	93 9a       	sbi	0x12, 3	; 18
     9aa:	b0 e7       	ldi	r27, 0x70	; 112
     9ac:	ab 2e       	mov	r10, r27
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	bb 2e       	mov	r11, r27
     9b2:	00 e0       	ldi	r16, 0x00	; 0
     9b4:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				flash_write_byte(address, receivedBuffer[x]);
     9b6:	f5 01       	movw	r30, r10
     9b8:	61 91       	ld	r22, Z+
     9ba:	5f 01       	movw	r10, r30
     9bc:	c8 01       	movw	r24, r16
     9be:	8c 0d       	add	r24, r12
     9c0:	9d 1d       	adc	r25, r13
     9c2:	ea dc       	rcall	.-1580   	; 0x398 <flash_write_byte>
     9c4:	0f 5f       	subi	r16, 0xFF	; 255
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     9c8:	00 34       	cpi	r16, 0x40	; 64
     9ca:	11 05       	cpc	r17, r1
     9cc:	a1 f7       	brne	.-24     	; 0x9b6 <main+0x290>
     9ce:	af cf       	rjmp	.-162    	; 0x92e <main+0x208>
			PORTD &= ~(1<<ACTIVITY_LED);
			gba_mode(); // Set back
		}
		
		// Write 128 bytes to flash sector for Atmel flash (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_ATMEL) {
     9d0:	91 36       	cpi	r25, 0x61	; 97
     9d2:	69 f4       	brne	.+26     	; 0x9ee <main+0x2c8>
			gb_mode();
     9d4:	64 db       	rcall	.-2360   	; 0x9e <gb_mode>
			
			usart_read_bytes(128);
     9d6:	80 e8       	ldi	r24, 0x80	; 128
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	3c db       	rcall	.-2440   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     9dc:	93 9a       	sbi	0x12, 3	; 18
			flash_write_sector(address); // Address used as sector number
     9de:	c6 01       	movw	r24, r12
     9e0:	f7 dc       	rcall	.-1554   	; 0x3d0 <flash_write_sector>
			address++;
     9e2:	2f ef       	ldi	r18, 0xFF	; 255
     9e4:	c2 1a       	sub	r12, r18
     9e6:	d2 0a       	sbc	r13, r18
     9e8:	e2 0a       	sbc	r14, r18
     9ea:	f2 0a       	sbc	r15, r18
     9ec:	a5 cf       	rjmp	.-182    	; 0x938 <main+0x212>
		}
		
		
		// ---------- EEPROM ----------
		// Set EEPROM size
		else if (receivedChar == GBA_SET_EEPROM_SIZE) {
     9ee:	93 35       	cpi	r25, 0x53	; 83
     9f0:	51 f4       	brne	.+20     	; 0xa06 <main+0x2e0>
			usart_read_chars(); // Read size
     9f2:	45 db       	rcall	.-2422   	; 0x7e <usart_read_chars>
			eepromSize = strtol(receivedBuffer, NULL, 16); // Convert size to dec
     9f4:	40 e1       	ldi	r20, 0x10	; 16
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	80 e7       	ldi	r24, 0x70	; 112
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	49 d4       	rcall	.+2194   	; 0x1294 <strtol>
     a02:	d6 2f       	mov	r29, r22
     a04:	9a ce       	rjmp	.-716    	; 0x73a <main+0x14>
		}
		
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
     a06:	95 36       	cpi	r25, 0x65	; 101
     a08:	09 f5       	brne	.+66     	; 0xa4c <main+0x326>
			gba_eeprom_mode();
     a0a:	b9 db       	rcall	.-2190   	; 0x17e <gba_eeprom_mode>
			
			receivedChar = '1';
     a0c:	30 92 70 01 	sts	0x0170, r3	; 0x800170 <receivedChar>
			while (receivedChar == '1') {
     a10:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
     a14:	81 33       	cpi	r24, 0x31	; 49
     a16:	09 f0       	breq	.+2      	; 0xa1a <main+0x2f4>
     a18:	92 cf       	rjmp	.-220    	; 0x93e <main+0x218>
				PORTD |= (1<<ACTIVITY_LED);
     a1a:	93 9a       	sbi	0x12, 3	; 18
				gba_eeprom_read(address, eepromSize);
     a1c:	6d 2f       	mov	r22, r29
     a1e:	c6 01       	movw	r24, r12
     a20:	eb db       	rcall	.-2090   	; 0x1f8 <gba_eeprom_read>
     a22:	01 e7       	ldi	r16, 0x71	; 113
     a24:	11 e0       	ldi	r17, 0x01	; 1
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
					USART_Transmit(eepromBuffer[c]);
     a26:	f8 01       	movw	r30, r16
     a28:	81 91       	ld	r24, Z+
     a2a:	8f 01       	movw	r16, r30
     a2c:	0f db       	rcall	.-2530   	; 0x4c <USART_Transmit>
			while (receivedChar == '1') {
				PORTD |= (1<<ACTIVITY_LED);
				gba_eeprom_read(address, eepromSize);
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
     a2e:	89 e7       	ldi	r24, 0x79	; 121
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	80 17       	cp	r24, r16
     a34:	91 07       	cpc	r25, r17
     a36:	b9 f7       	brne	.-18     	; 0xa26 <main+0x300>
					USART_Transmit(eepromBuffer[c]);
				}
				address++; // Increment to next 8 bytes
     a38:	9f ef       	ldi	r25, 0xFF	; 255
     a3a:	c9 1a       	sub	r12, r25
     a3c:	d9 0a       	sbc	r13, r25
     a3e:	e9 0a       	sbc	r14, r25
     a40:	f9 0a       	sbc	r15, r25
				
				PORTD &= ~(1<<ACTIVITY_LED);
     a42:	93 98       	cbi	0x12, 3	; 18
				receivedChar = USART_Receive();
     a44:	ff da       	rcall	.-2562   	; 0x44 <USART_Receive>
     a46:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
     a4a:	e2 cf       	rjmp	.-60     	; 0xa10 <main+0x2ea>
			
			gba_mode(); // Set back
		}
		
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
     a4c:	90 37       	cpi	r25, 0x70	; 112
     a4e:	e1 f4       	brne	.+56     	; 0xa88 <main+0x362>
			gba_eeprom_mode();
     a50:	96 db       	rcall	.-2260   	; 0x17e <gba_eeprom_mode>
     a52:	01 e7       	ldi	r16, 0x71	; 113
     a54:	11 e0       	ldi	r17, 0x01	; 1
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
				eepromBuffer[x] = USART_Receive();
     a56:	f6 da       	rcall	.-2580   	; 0x44 <USART_Receive>
     a58:	f8 01       	movw	r30, r16
     a5a:	81 93       	st	Z+, r24
     a5c:	8f 01       	movw	r16, r30
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
			gba_eeprom_mode();
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
     a5e:	89 e7       	ldi	r24, 0x79	; 121
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	8e 17       	cp	r24, r30
     a64:	9f 07       	cpc	r25, r31
     a66:	b9 f7       	brne	.-18     	; 0xa56 <main+0x330>
				eepromBuffer[x] = USART_Receive();
			}
			PORTD |= (1<<ACTIVITY_LED);
     a68:	93 9a       	sbi	0x12, 3	; 18
			
			gba_eeprom_write(address, eepromSize);
     a6a:	6d 2f       	mov	r22, r29
     a6c:	c6 01       	movw	r24, r12
     a6e:	f1 db       	rcall	.-2078   	; 0x252 <gba_eeprom_write>
			address++;
     a70:	9f ef       	ldi	r25, 0xFF	; 255
     a72:	c9 1a       	sub	r12, r25
     a74:	d9 0a       	sbc	r13, r25
     a76:	e9 0a       	sbc	r14, r25
     a78:	f9 0a       	sbc	r15, r25
     a7a:	ef e7       	ldi	r30, 0x7F	; 127
     a7c:	fe e3       	ldi	r31, 0x3E	; 62
     a7e:	31 97       	sbiw	r30, 0x01	; 1
     a80:	f1 f7       	brne	.-4      	; 0xa7e <main+0x358>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <main+0x35e>
     a84:	00 00       	nop
     a86:	58 cf       	rjmp	.-336    	; 0x938 <main+0x212>
		}
		
		
		// ---------- GB FLASH CARTS ----------
		// Select which pin need to pulse as WE (Audio or WR)
		else if (receivedChar == GB_FLASH_WE_PIN) {
     a88:	90 35       	cpi	r25, 0x50	; 80
     a8a:	49 f4       	brne	.+18     	; 0xa9e <main+0x378>
			flashWriteWePin = USART_Receive();
     a8c:	db da       	rcall	.-2634   	; 0x44 <USART_Receive>
     a8e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <flashWriteWePin>
			
			if (flashWriteWePin == WE_AS_AUDIO_PIN) {
     a92:	81 34       	cpi	r24, 0x41	; 65
     a94:	09 f0       	breq	.+2      	; 0xa98 <main+0x372>
     a96:	51 ce       	rjmp	.-862    	; 0x73a <main+0x14>
				DDRE |= (1<<AUDIO_PIN);
     a98:	31 9a       	sbi	0x06, 1	; 6
				audioPin_high;
     a9a:	39 9a       	sbi	0x07, 1	; 7
     a9c:	4e ce       	rjmp	.-868    	; 0x73a <main+0x14>
			}
		}
		
		// Some flash carts may require changing the bank back to 1 in order to accept flash chip commands
		else if (receivedChar == GB_FLASH_BANK_1_COMMAND_WRITES) {
     a9e:	9e 34       	cpi	r25, 0x4E	; 78
     aa0:	21 f4       	brne	.+8      	; 0xaaa <main+0x384>
			flashBank1CommandWrites = 1;
     aa2:	f1 e0       	ldi	r31, 0x01	; 1
     aa4:	f0 93 61 00 	sts	0x0061, r31	; 0x800061 <flashBank1CommandWrites>
     aa8:	48 ce       	rjmp	.-880    	; 0x73a <main+0x14>
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
     aaa:	95 34       	cpi	r25, 0x45	; 69
     aac:	19 f5       	brne	.+70     	; 0xaf4 <main+0x3ce>
     aae:	02 e6       	ldi	r16, 0x62	; 98
     ab0:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t x = 0; x < 3; x++) {
				usart_read_chars(); // Address
     ab2:	e5 da       	rcall	.-2614   	; 0x7e <usart_read_chars>
				flashWriteCycle[x][0] = strtol(receivedBuffer, NULL, 16);
     ab4:	40 e1       	ldi	r20, 0x10	; 16
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	80 e7       	ldi	r24, 0x70	; 112
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	e9 d3       	rcall	.+2002   	; 0x1294 <strtol>
     ac2:	f8 01       	movw	r30, r16
     ac4:	71 83       	std	Z+1, r23	; 0x01
     ac6:	60 83       	st	Z, r22
				USART_Transmit(SEND_ACK);
     ac8:	81 e3       	ldi	r24, 0x31	; 49
     aca:	c0 da       	rcall	.-2688   	; 0x4c <USART_Transmit>
				
				usart_read_chars(); // Data
     acc:	d8 da       	rcall	.-2640   	; 0x7e <usart_read_chars>
				flashWriteCycle[x][1] = strtol(receivedBuffer, NULL, 16);
     ace:	40 e1       	ldi	r20, 0x10	; 16
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	80 e7       	ldi	r24, 0x70	; 112
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	dc d3       	rcall	.+1976   	; 0x1294 <strtol>
     adc:	f8 01       	movw	r30, r16
     ade:	73 83       	std	Z+3, r23	; 0x03
     ae0:	62 83       	std	Z+2, r22	; 0x02
				USART_Transmit(SEND_ACK);
     ae2:	81 e3       	ldi	r24, 0x31	; 49
     ae4:	b3 da       	rcall	.-2714   	; 0x4c <USART_Transmit>
     ae6:	0c 5f       	subi	r16, 0xFC	; 252
     ae8:	1f 4f       	sbci	r17, 0xFF	; 255
			flashBank1CommandWrites = 1;
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
			for (uint8_t x = 0; x < 3; x++) {
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	0e 36       	cpi	r16, 0x6E	; 110
     aee:	1f 07       	cpc	r17, r31
     af0:	01 f7       	brne	.-64     	; 0xab2 <main+0x38c>
     af2:	23 ce       	rjmp	.-954    	; 0x73a <main+0x14>
				USART_Transmit(SEND_ACK);
			}
		}
		
		// Write address and one byte to Flash, pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
     af4:	96 34       	cpi	r25, 0x46	; 70
     af6:	b1 f4       	brne	.+44     	; 0xb24 <main+0x3fe>
			usart_read_chars(); // Read address
     af8:	c2 da       	rcall	.-2684   	; 0x7e <usart_read_chars>
			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16);
     afa:	40 e1       	ldi	r20, 0x10	; 16
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	80 e7       	ldi	r24, 0x70	; 112
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	c6 d3       	rcall	.+1932   	; 0x1294 <strtol>
     b08:	4b 01       	movw	r8, r22
     b0a:	5c 01       	movw	r10, r24
			
			usart_read_chars(); // Read data byte
     b0c:	b8 da       	rcall	.-2704   	; 0x7e <usart_read_chars>
			uint8_t flashByte = strtol(receivedBuffer, NULL, 16);
     b0e:	40 e1       	ldi	r20, 0x10	; 16
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	80 e7       	ldi	r24, 0x70	; 112
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	bc d3       	rcall	.+1912   	; 0x1294 <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
     b1c:	93 9a       	sbi	0x12, 3	; 18
			gb_flash_write_bus_cycle(flashAddress, flashByte);
     b1e:	c4 01       	movw	r24, r8
     b20:	96 dc       	rcall	.-1748   	; 0x44e <gb_flash_write_bus_cycle>
     b22:	a5 c1       	rjmp	.+842    	; 0xe6e <main+0x748>
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
     b24:	94 35       	cpi	r25, 0x54	; 84
     b26:	41 f5       	brne	.+80     	; 0xb78 <main+0x452>
			usart_read_bytes(64);
     b28:	80 e4       	ldi	r24, 0x40	; 64
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	93 da       	rcall	.-2778   	; 0x54 <usart_read_bytes>
			
			PORTD |= (1<<ACTIVITY_LED);
     b2e:	93 9a       	sbi	0x12, 3	; 18
     b30:	f0 e7       	ldi	r31, 0x70	; 112
     b32:	af 2e       	mov	r10, r31
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	bf 2e       	mov	r11, r31
     b38:	a0 e4       	ldi	r26, 0x40	; 64
     b3a:	9a 2e       	mov	r9, r26
     b3c:	86 01       	movw	r16, r12
     b3e:	00 57       	subi	r16, 0x70	; 112
     b40:	10 40       	sbci	r17, 0x00	; 0
			for (uint8_t x = 0; x < 64; x++) {
				if (flashBank1CommandWrites == 0) {
     b42:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flashBank1CommandWrites>
					gb_flash_write_byte(address, receivedBuffer[x]);
     b46:	f5 01       	movw	r30, r10
     b48:	60 81       	ld	r22, Z
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
				if (flashBank1CommandWrites == 0) {
     b4a:	81 11       	cpse	r24, r1
     b4c:	05 c0       	rjmp	.+10     	; 0xb58 <main+0x432>
					gb_flash_write_byte(address, receivedBuffer[x]);
     b4e:	c8 01       	movw	r24, r16
     b50:	8a 0d       	add	r24, r10
     b52:	9b 1d       	adc	r25, r11
     b54:	95 dc       	rcall	.-1750   	; 0x480 <gb_flash_write_byte>
     b56:	04 c0       	rjmp	.+8      	; 0xb60 <main+0x43a>
				}
				else { // Some flash carts need to change to bank 1 to issue flash commands
					gb_flash_write_byte_bank1_commands(address, receivedBuffer[x]);
     b58:	c8 01       	movw	r24, r16
     b5a:	8a 0d       	add	r24, r10
     b5c:	9b 1d       	adc	r25, r11
     b5e:	c2 dc       	rcall	.-1660   	; 0x4e4 <gb_flash_write_byte_bank1_commands>
     b60:	9a 94       	dec	r9
     b62:	ff ef       	ldi	r31, 0xFF	; 255
     b64:	af 1a       	sub	r10, r31
     b66:	bf 0a       	sbc	r11, r31
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			usart_read_bytes(64);
			
			PORTD |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     b68:	91 10       	cpse	r9, r1
     b6a:	eb cf       	rjmp	.-42     	; 0xb42 <main+0x41c>
     b6c:	20 e4       	ldi	r18, 0x40	; 64
     b6e:	c2 0e       	add	r12, r18
     b70:	d1 1c       	adc	r13, r1
     b72:	e1 1c       	adc	r14, r1
     b74:	f1 1c       	adc	r15, r1
     b76:	93 c2       	rjmp	.+1318   	; 0x109e <main+0x978>
			
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 32 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_BUFFERED_32BYTE) {
     b78:	99 35       	cpi	r25, 0x59	; 89
     b7a:	09 f0       	breq	.+2      	; 0xb7e <main+0x458>
     b7c:	55 c0       	rjmp	.+170    	; 0xc28 <main+0x502>
			usart_read_bytes(32);
     b7e:	80 e2       	ldi	r24, 0x20	; 32
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	68 da       	rcall	.-2864   	; 0x54 <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
     b84:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xAA);
     b86:	6a ea       	ldi	r22, 0xAA	; 170
     b88:	8a ea       	ldi	r24, 0xAA	; 170
     b8a:	9a e0       	ldi	r25, 0x0A	; 10
     b8c:	60 dc       	rcall	.-1856   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x55);
     b8e:	65 e5       	ldi	r22, 0x55	; 85
     b90:	85 e5       	ldi	r24, 0x55	; 85
     b92:	95 e0       	ldi	r25, 0x05	; 5
     b94:	5c dc       	rcall	.-1864   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x25);
     b96:	56 01       	movw	r10, r12
     b98:	65 e2       	ldi	r22, 0x25	; 37
     b9a:	c6 01       	movw	r24, r12
     b9c:	58 dc       	rcall	.-1872   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x1F); // Length
     b9e:	6f e1       	ldi	r22, 0x1F	; 31
     ba0:	c6 01       	movw	r24, r12
     ba2:	55 dc       	rcall	.-1878   	; 0x44e <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	8a 95       	dec	r24
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <main+0x480>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <main+0x486>
     bac:	00 e7       	ldi	r16, 0x70	; 112
     bae:	10 e0       	ldi	r17, 0x00	; 0
     bb0:	81 2c       	mov	r8, r1
     bb2:	91 2c       	mov	r9, r1
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     bb4:	f8 01       	movw	r30, r16
     bb6:	61 91       	ld	r22, Z+
     bb8:	8f 01       	movw	r16, r30
     bba:	c4 01       	movw	r24, r8
     bbc:	8a 0d       	add	r24, r10
     bbe:	9b 1d       	adc	r25, r11
     bc0:	46 dc       	rcall	.-1908   	; 0x44e <gb_flash_write_bus_cycle>
     bc2:	ff ef       	ldi	r31, 0xFF	; 255
     bc4:	8f 1a       	sub	r8, r31
     bc6:	9f 0a       	sbc	r9, r31
			gb_flash_write_bus_cycle(address, 0x25);
			gb_flash_write_bus_cycle(address, 0x1F); // Length
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
     bc8:	20 e2       	ldi	r18, 0x20	; 32
     bca:	82 16       	cp	r8, r18
     bcc:	91 04       	cpc	r9, r1
     bce:	91 f7       	brne	.-28     	; 0xbb4 <main+0x48e>
     bd0:	80 e2       	ldi	r24, 0x20	; 32
     bd2:	c8 0e       	add	r12, r24
     bd4:	d1 1c       	adc	r13, r1
     bd6:	e1 1c       	adc	r14, r1
     bd8:	f1 1c       	adc	r15, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-32, 0x29);
     bda:	c6 01       	movw	r24, r12
     bdc:	80 97       	sbiw	r24, 0x20	; 32
     bde:	69 e2       	ldi	r22, 0x29	; 41
     be0:	36 dc       	rcall	.-1940   	; 0x44e <gb_flash_write_bus_cycle>
     be2:	ef e8       	ldi	r30, 0x8F	; 143
     be4:	f1 e0       	ldi	r31, 0x01	; 1
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	f1 f7       	brne	.-4      	; 0xbe6 <main+0x4c0>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <main+0x4c6>
     bec:	00 00       	nop
			_delay_us(200);
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
     bee:	86 01       	movw	r16, r12
     bf0:	01 50       	subi	r16, 0x01	; 1
     bf2:	11 09       	sbc	r17, r1
     bf4:	c8 01       	movw	r24, r16
     bf6:	22 dc       	rcall	.-1980   	; 0x43c <gb_flash_read_byte>
			uint8_t verifyCount = 0;
			while (dataVerify != receivedBuffer[31]) {
     bf8:	e8 ec       	ldi	r30, 0xC8	; 200
     bfa:	be 2e       	mov	r11, r30
     bfc:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <receivedBuffer+0x1f>
     c00:	89 17       	cp	r24, r25
     c02:	09 f4       	brne	.+2      	; 0xc06 <main+0x4e0>
     c04:	4c c2       	rjmp	.+1176   	; 0x109e <main+0x978>
				dataVerify = gb_flash_read_byte(address-1);
     c06:	c8 01       	movw	r24, r16
     c08:	19 dc       	rcall	.-1998   	; 0x43c <gb_flash_read_byte>
     c0a:	fd e0       	ldi	r31, 0x0D	; 13
     c0c:	fa 95       	dec	r31
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <main+0x4e6>
     c10:	00 00       	nop
     c12:	ba 94       	dec	r11
				_delay_us(5);
				verifyCount++;
				
				if (verifyCount >= 200) {
     c14:	b1 10       	cpse	r11, r1
     c16:	f2 cf       	rjmp	.-28     	; 0xbfc <main+0x4d6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c18:	2f ef       	ldi	r18, 0xFF	; 255
     c1a:	84 e3       	ldi	r24, 0x34	; 52
     c1c:	9c e0       	ldi	r25, 0x0C	; 12
     c1e:	21 50       	subi	r18, 0x01	; 1
     c20:	80 40       	sbci	r24, 0x00	; 0
     c22:	90 40       	sbci	r25, 0x00	; 0
     c24:	e1 f7       	brne	.-8      	; 0xc1e <main+0x4f8>
     c26:	fe c0       	rjmp	.+508    	; 0xe24 <main+0x6fe>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Buffered programming, write 256 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_256BYTE) {
     c28:	98 35       	cpi	r25, 0x58	; 88
     c2a:	09 f0       	breq	.+2      	; 0xc2e <main+0x508>
     c2c:	42 c0       	rjmp	.+132    	; 0xcb2 <main+0x58c>
			usart_read_bytes(256);
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	10 da       	rcall	.-3040   	; 0x54 <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
     c34:	93 9a       	sbi	0x12, 3	; 18
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xA9);
     c36:	69 ea       	ldi	r22, 0xA9	; 169
     c38:	8a ea       	ldi	r24, 0xAA	; 170
     c3a:	9a e0       	ldi	r25, 0x0A	; 10
     c3c:	08 dc       	rcall	.-2032   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x56);
     c3e:	66 e5       	ldi	r22, 0x56	; 86
     c40:	85 e5       	ldi	r24, 0x55	; 85
     c42:	95 e0       	ldi	r25, 0x05	; 5
     c44:	04 dc       	rcall	.-2040   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
     c46:	56 01       	movw	r10, r12
     c48:	66 e2       	ldi	r22, 0x26	; 38
     c4a:	c6 01       	movw	r24, r12
     c4c:	00 dc       	rcall	.-2048   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0xFF); // Length
     c4e:	6f ef       	ldi	r22, 0xFF	; 255
     c50:	c6 01       	movw	r24, r12
     c52:	fd db       	rcall	.-2054   	; 0x44e <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c54:	e5 e8       	ldi	r30, 0x85	; 133
     c56:	ea 95       	dec	r30
     c58:	f1 f7       	brne	.-4      	; 0xc56 <main+0x530>
     c5a:	00 00       	nop
     c5c:	00 e7       	ldi	r16, 0x70	; 112
     c5e:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
     c60:	81 2c       	mov	r8, r1
     c62:	91 2c       	mov	r9, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     c64:	f8 01       	movw	r30, r16
     c66:	61 91       	ld	r22, Z+
     c68:	8f 01       	movw	r16, r30
     c6a:	c4 01       	movw	r24, r8
     c6c:	8a 0d       	add	r24, r10
     c6e:	9b 1d       	adc	r25, r11
     c70:	ee db       	rcall	.-2084   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
			gb_flash_write_bus_cycle(address, 0xFF); // Length
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
     c72:	ff ef       	ldi	r31, 0xFF	; 255
     c74:	8f 1a       	sub	r8, r31
     c76:	9f 0a       	sbc	r9, r31
     c78:	81 14       	cp	r8, r1
     c7a:	21 e0       	ldi	r18, 0x01	; 1
     c7c:	92 06       	cpc	r9, r18
     c7e:	91 f7       	brne	.-28     	; 0xc64 <main+0x53e>
     c80:	8f ef       	ldi	r24, 0xFF	; 255
     c82:	d8 1a       	sub	r13, r24
     c84:	e8 0a       	sbc	r14, r24
     c86:	f8 0a       	sbc	r15, r24
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-256, 0x2A);
     c88:	c6 01       	movw	r24, r12
     c8a:	9a 95       	dec	r25
     c8c:	6a e2       	ldi	r22, 0x2A	; 42
     c8e:	df db       	rcall	.-2114   	; 0x44e <gb_flash_write_bus_cycle>
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
     c90:	86 01       	movw	r16, r12
     c92:	01 50       	subi	r16, 0x01	; 1
     c94:	11 09       	sbc	r17, r1
     c96:	c8 01       	movw	r24, r16
     c98:	d1 db       	rcall	.-2142   	; 0x43c <gb_flash_read_byte>
			while (dataVerify != receivedBuffer[255]) {
     c9a:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <receivedBuffer+0xff>
     c9e:	89 17       	cp	r24, r25
     ca0:	09 f4       	brne	.+2      	; 0xca4 <main+0x57e>
     ca2:	fd c1       	rjmp	.+1018   	; 0x109e <main+0x978>
				dataVerify = gb_flash_read_byte(address-1);
     ca4:	c8 01       	movw	r24, r16
     ca6:	ca db       	rcall	.-2156   	; 0x43c <gb_flash_read_byte>
     ca8:	9d e0       	ldi	r25, 0x0D	; 13
     caa:	9a 95       	dec	r25
     cac:	f1 f7       	brne	.-4      	; 0xcaa <main+0x584>
     cae:	00 00       	nop
     cb0:	f4 cf       	rjmp	.-24     	; 0xc9a <main+0x574>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Nintendo Power 1MB Cart, Write 128 bytes to flash
		else if (receivedChar == GB_FLASH_WRITE_NP_128BYTE) {
     cb2:	9a 35       	cpi	r25, 0x5A	; 90
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <main+0x592>
     cb6:	b9 c0       	rjmp	.+370    	; 0xe2a <main+0x704>
			usart_read_bytes(128);
     cb8:	80 e8       	ldi	r24, 0x80	; 128
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	cb d9       	rcall	.-3178   	; 0x54 <usart_read_bytes>
			PORTD |= (1<<ACTIVITY_LED);
     cbe:	93 9a       	sbi	0x12, 3	; 18
			
			// Enable flash chip access
			gb_flash_write_bus_cycle(0x120, 0x09);
     cc0:	69 e0       	ldi	r22, 0x09	; 9
     cc2:	80 e2       	ldi	r24, 0x20	; 32
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	c3 db       	rcall	.-2170   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x121, 0xaa);
     cc8:	6a ea       	ldi	r22, 0xAA	; 170
     cca:	81 e2       	ldi	r24, 0x21	; 33
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	bf db       	rcall	.-2178   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x122, 0x55);
     cd0:	65 e5       	ldi	r22, 0x55	; 85
     cd2:	82 e2       	ldi	r24, 0x22	; 34
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	bb db       	rcall	.-2186   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     cd8:	65 ea       	ldi	r22, 0xA5	; 165
     cda:	8f e3       	ldi	r24, 0x3F	; 63
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	b7 db       	rcall	.-2194   	; 0x44e <gb_flash_write_bus_cycle>
     ce0:	ed e0       	ldi	r30, 0x0D	; 13
     ce2:	ea 95       	dec	r30
     ce4:	f1 f7       	brne	.-4      	; 0xce2 <main+0x5bc>
     ce6:	00 00       	nop
			_delay_us(5);
			
			// Re-Enable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x11);
     ce8:	61 e1       	ldi	r22, 0x11	; 17
     cea:	80 e2       	ldi	r24, 0x20	; 32
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	af db       	rcall	.-2210   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     cf0:	65 ea       	ldi	r22, 0xA5	; 165
     cf2:	8f e3       	ldi	r24, 0x3F	; 63
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	ab db       	rcall	.-2218   	; 0x44e <gb_flash_write_bus_cycle>
     cf8:	fd e0       	ldi	r31, 0x0D	; 13
     cfa:	fa 95       	dec	r31
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <main+0x5d4>
     cfe:	00 00       	nop
			_delay_us(5);
			
			// Bank 1 for commands
			gb_flash_write_bus_cycle(0x2100, 0x01);
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	91 e2       	ldi	r25, 0x21	; 33
     d06:	a3 db       	rcall	.-2234   	; 0x44e <gb_flash_write_bus_cycle>
     d08:	2d e0       	ldi	r18, 0x0D	; 13
     d0a:	2a 95       	dec	r18
     d0c:	f1 f7       	brne	.-4      	; 0xd0a <main+0x5e4>
     d0e:	00 00       	nop
			_delay_us(5);
			
			
			// Write setup
			gb_flash_write_bus_cycle(0x120, 0x0F);
     d10:	6f e0       	ldi	r22, 0x0F	; 15
     d12:	80 e2       	ldi	r24, 0x20	; 32
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	9b db       	rcall	.-2250   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
     d18:	65 e5       	ldi	r22, 0x55	; 85
     d1a:	85 e2       	ldi	r24, 0x25	; 37
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	97 db       	rcall	.-2258   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
     d20:	65 e5       	ldi	r22, 0x55	; 85
     d22:	86 e2       	ldi	r24, 0x26	; 38
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	93 db       	rcall	.-2266   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xAA);
     d28:	6a ea       	ldi	r22, 0xAA	; 170
     d2a:	87 e2       	ldi	r24, 0x27	; 39
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	8f db       	rcall	.-2274   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
     d30:	65 ea       	ldi	r22, 0xA5	; 165
     d32:	8f e3       	ldi	r24, 0x3F	; 63
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	8b db       	rcall	.-2282   	; 0x44e <gb_flash_write_bus_cycle>
     d38:	8d e0       	ldi	r24, 0x0D	; 13
     d3a:	8a 95       	dec	r24
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <main+0x614>
     d3e:	00 00       	nop
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
     d40:	6f e0       	ldi	r22, 0x0F	; 15
     d42:	80 e2       	ldi	r24, 0x20	; 32
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	83 db       	rcall	.-2298   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x2A);
     d48:	6a e2       	ldi	r22, 0x2A	; 42
     d4a:	85 e2       	ldi	r24, 0x25	; 37
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	7f db       	rcall	.-2306   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0xAA);
     d50:	6a ea       	ldi	r22, 0xAA	; 170
     d52:	86 e2       	ldi	r24, 0x26	; 38
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	7b db       	rcall	.-2314   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0x55);
     d58:	65 e5       	ldi	r22, 0x55	; 85
     d5a:	87 e2       	ldi	r24, 0x27	; 39
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	77 db       	rcall	.-2322   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
     d60:	65 ea       	ldi	r22, 0xA5	; 165
     d62:	8f e3       	ldi	r24, 0x3F	; 63
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	73 db       	rcall	.-2330   	; 0x44e <gb_flash_write_bus_cycle>
     d68:	9d e0       	ldi	r25, 0x0D	; 13
     d6a:	9a 95       	dec	r25
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <main+0x644>
     d6e:	00 00       	nop
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
     d70:	6f e0       	ldi	r22, 0x0F	; 15
     d72:	80 e2       	ldi	r24, 0x20	; 32
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	6b db       	rcall	.-2346   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x125, 0x55);
     d78:	65 e5       	ldi	r22, 0x55	; 85
     d7a:	85 e2       	ldi	r24, 0x25	; 37
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	67 db       	rcall	.-2354   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
     d80:	65 e5       	ldi	r22, 0x55	; 85
     d82:	86 e2       	ldi	r24, 0x26	; 38
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	63 db       	rcall	.-2362   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x127, 0xA0);
     d88:	60 ea       	ldi	r22, 0xA0	; 160
     d8a:	87 e2       	ldi	r24, 0x27	; 39
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	5f db       	rcall	.-2370   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xA5);
     d90:	65 ea       	ldi	r22, 0xA5	; 165
     d92:	8f e3       	ldi	r24, 0x3F	; 63
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	5b db       	rcall	.-2378   	; 0x44e <gb_flash_write_bus_cycle>
     d98:	ed e0       	ldi	r30, 0x0D	; 13
     d9a:	ea 95       	dec	r30
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <main+0x674>
     d9e:	00 00       	nop
			_delay_us(5);
			
			// Set bank back
			write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <_edata>
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	91 e2       	ldi	r25, 0x21	; 33
     daa:	8d d9       	rcall	.-3302   	; 0xc6 <write_8bit_data>
     dac:	fd e0       	ldi	r31, 0x0D	; 13
     dae:	fa 95       	dec	r31
     db0:	f1 f7       	brne	.-4      	; 0xdae <main+0x688>
     db2:	00 00       	nop
			_delay_us(5);
			
			// Disable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x10);
     db4:	60 e1       	ldi	r22, 0x10	; 16
     db6:	80 e2       	ldi	r24, 0x20	; 32
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	49 db       	rcall	.-2414   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     dbc:	65 ea       	ldi	r22, 0xA5	; 165
     dbe:	8f e3       	ldi	r24, 0x3F	; 63
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	45 db       	rcall	.-2422   	; 0x44e <gb_flash_write_bus_cycle>
     dc4:	2d e0       	ldi	r18, 0x0D	; 13
     dc6:	2a 95       	dec	r18
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <main+0x6a0>
     dca:	00 00       	nop
			_delay_us(5);
			
			// Undo Wakeup
			gb_flash_write_bus_cycle(0x120, 0x08);
     dcc:	68 e0       	ldi	r22, 0x08	; 8
     dce:	80 e2       	ldi	r24, 0x20	; 32
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	3d db       	rcall	.-2438   	; 0x44e <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
     dd4:	65 ea       	ldi	r22, 0xA5	; 165
     dd6:	8f e3       	ldi	r24, 0x3F	; 63
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	39 db       	rcall	.-2446   	; 0x44e <gb_flash_write_bus_cycle>
     ddc:	8d e0       	ldi	r24, 0x0D	; 13
     dde:	8a 95       	dec	r24
     de0:	f1 f7       	brne	.-4      	; 0xdde <main+0x6b8>
     de2:	00 00       	nop
     de4:	00 e7       	ldi	r16, 0x70	; 112
     de6:	10 e0       	ldi	r17, 0x00	; 0
			_delay_us(5);
			
			
			// Write data
			for (uint8_t x = 0; x < 128; x++) {
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	00 3f       	cpi	r16, 0xF0	; 240
     dec:	18 07       	cpc	r17, r24
     dee:	79 f0       	breq	.+30     	; 0xe0e <main+0x6e8>
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     df0:	f8 01       	movw	r30, r16
     df2:	61 91       	ld	r22, Z+
     df4:	8f 01       	movw	r16, r30
     df6:	c6 01       	movw	r24, r12
     df8:	2a db       	rcall	.-2476   	; 0x44e <gb_flash_write_bus_cycle>
     dfa:	fd e0       	ldi	r31, 0x0D	; 13
     dfc:	fa 95       	dec	r31
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <main+0x6d6>
     e00:	00 00       	nop
				_delay_us(5);
				address++;
     e02:	2f ef       	ldi	r18, 0xFF	; 255
     e04:	c2 1a       	sub	r12, r18
     e06:	d2 0a       	sbc	r13, r18
     e08:	e2 0a       	sbc	r14, r18
     e0a:	f2 0a       	sbc	r15, r18
     e0c:	ed cf       	rjmp	.-38     	; 0xde8 <main+0x6c2>
			}
			
			// Write buffer to flash
			address--;
			gb_flash_write_bus_cycle(address, 0xFF);
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	d7 01       	movw	r26, r14
     e12:	c6 01       	movw	r24, r12
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	a1 09       	sbc	r26, r1
     e18:	b1 09       	sbc	r27, r1
     e1a:	19 db       	rcall	.-2510   	; 0x44e <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e1c:	ef e1       	ldi	r30, 0x1F	; 31
     e1e:	fe e4       	ldi	r31, 0x4E	; 78
     e20:	31 97       	sbiw	r30, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <main+0x6fa>
     e24:	00 c0       	rjmp	.+0      	; 0xe26 <main+0x700>
     e26:	00 00       	nop
     e28:	3a c1       	rjmp	.+628    	; 0x109e <main+0x978>
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// ---------- GBA FLASH CARTS ----------
		// Write 24 bit address, 16 bit data and pulse a pin
		else if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
     e2a:	9e 36       	cpi	r25, 0x6E	; 110
     e2c:	19 f5       	brne	.+70     	; 0xe74 <main+0x74e>
			usart_read_chars(); // Read address
     e2e:	27 d9       	rcall	.-3506   	; 0x7e <usart_read_chars>
			uint32_t flashAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     e30:	40 e1       	ldi	r20, 0x10	; 16
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	80 e7       	ldi	r24, 0x70	; 112
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	2b d2       	rcall	.+1110   	; 0x1294 <strtol>
     e3e:	4b 01       	movw	r8, r22
     e40:	5c 01       	movw	r10, r24
			
			receivedChar = USART_Receive(); // Wait for byte
     e42:	00 d9       	rcall	.-3584   	; 0x44 <USART_Receive>
     e44:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <receivedChar>
			if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
     e48:	8e 36       	cpi	r24, 0x6E	; 110
     e4a:	09 f0       	breq	.+2      	; 0xe4e <main+0x728>
     e4c:	76 cc       	rjmp	.-1812   	; 0x73a <main+0x14>
				usart_read_chars(); // Read data
     e4e:	17 d9       	rcall	.-3538   	; 0x7e <usart_read_chars>
				uint16_t flashByte = strtol(receivedBuffer, NULL, 16); // Convert data byte in hex to dec
     e50:	40 e1       	ldi	r20, 0x10	; 16
     e52:	50 e0       	ldi	r21, 0x00	; 0
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	80 e7       	ldi	r24, 0x70	; 112
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	1b d2       	rcall	.+1078   	; 0x1294 <strtol>
				
				PORTD |= (1<<ACTIVITY_LED);
     e5e:	93 9a       	sbi	0x12, 3	; 18
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
     e60:	c4 bb       	out	0x14, r28	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
     e62:	ca bb       	out	0x1a, r28	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
     e64:	c7 bb       	out	0x17, r28	; 23
				gba_flash_write_bus_cycle(flashAddress, flashByte);
     e66:	ab 01       	movw	r20, r22
     e68:	c5 01       	movw	r24, r10
     e6a:	b4 01       	movw	r22, r8
     e6c:	85 db       	rcall	.-2294   	; 0x578 <gba_flash_write_bus_cycle>
				PORTD &= ~(1<<ACTIVITY_LED);
     e6e:	93 98       	cbi	0x12, 3	; 18
				
				USART_Transmit(SEND_ACK); // Send back acknowledgement
     e70:	81 e3       	ldi	r24, 0x31	; 49
     e72:	f1 c1       	rjmp	.+994    	; 0x1256 <main+0xb30>
			}
		}
		
		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
     e74:	91 37       	cpi	r25, 0x71	; 113
     e76:	11 f0       	breq	.+4      	; 0xe7c <main+0x756>
     e78:	94 37       	cpi	r25, 0x74	; 116
     e7a:	c9 f5       	brne	.+114    	; 0xeee <main+0x7c8>
			PORTD |= (1<<ACTIVITY_LED);
     e7c:	93 9a       	sbi	0x12, 3	; 18
			
			int readLength = 64;
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
     e7e:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
     e82:	84 37       	cpi	r24, 0x74	; 116
     e84:	19 f4       	brne	.+6      	; 0xe8c <main+0x766>
				readLength = 256;
     e86:	00 e0       	ldi	r16, 0x00	; 0
     e88:	11 e0       	ldi	r17, 0x01	; 1
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <main+0x76a>
		
		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
			PORTD |= (1<<ACTIVITY_LED);
			
			int readLength = 64;
     e8c:	00 e4       	ldi	r16, 0x40	; 64
     e8e:	10 e0       	ldi	r17, 0x00	; 0
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
				readLength = 256;
			}
			usart_read_bytes(readLength);
     e90:	c8 01       	movw	r24, r16
     e92:	e0 d8       	rcall	.-3648   	; 0x54 <usart_read_bytes>
     e94:	70 e7       	ldi	r23, 0x70	; 112
     e96:	a7 2e       	mov	r10, r23
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	b7 2e       	mov	r11, r23
     e9c:	26 01       	movw	r4, r12
     e9e:	37 01       	movw	r6, r14
			
			for (int x = 0; x < readLength; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_byte(address, combinedBytes, D0D1_SWAPPED);
     ea0:	f5 01       	movw	r30, r10
     ea2:	41 81       	ldd	r20, Z+1	; 0x01
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	54 2f       	mov	r21, r20
     ea8:	44 27       	eor	r20, r20
     eaa:	80 81       	ld	r24, Z
     eac:	48 2b       	or	r20, r24
     eae:	21 e0       	ldi	r18, 0x01	; 1
     eb0:	c3 01       	movw	r24, r6
     eb2:	b2 01       	movw	r22, r4
     eb4:	d7 db       	rcall	.-2130   	; 0x664 <gba_flash_write_byte>
				address++;
     eb6:	ff ef       	ldi	r31, 0xFF	; 255
     eb8:	4f 1a       	sub	r4, r31
     eba:	5f 0a       	sbc	r5, r31
     ebc:	6f 0a       	sbc	r6, r31
     ebe:	7f 0a       	sbc	r7, r31
     ec0:	22 e0       	ldi	r18, 0x02	; 2
     ec2:	a2 0e       	add	r10, r18
     ec4:	b1 1c       	adc	r11, r1
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
				readLength = 256;
			}
			usart_read_bytes(readLength);
			
			for (int x = 0; x < readLength; x += 2) {
     ec6:	c5 01       	movw	r24, r10
     ec8:	80 57       	subi	r24, 0x70	; 112
     eca:	90 40       	sbci	r25, 0x00	; 0
     ecc:	80 17       	cp	r24, r16
     ece:	91 07       	cpc	r25, r17
     ed0:	3c f3       	brlt	.-50     	; 0xea0 <main+0x77a>
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	c8 1a       	sub	r12, r24
     ed6:	d8 0a       	sbc	r13, r24
     ed8:	e8 0a       	sbc	r14, r24
     eda:	f8 0a       	sbc	r15, r24
     edc:	01 50       	subi	r16, 0x01	; 1
     ede:	11 09       	sbc	r17, r1
     ee0:	16 95       	lsr	r17
     ee2:	07 95       	ror	r16
     ee4:	c0 0e       	add	r12, r16
     ee6:	d1 1e       	adc	r13, r17
     ee8:	e1 1c       	adc	r14, r1
     eea:	f1 1c       	adc	r15, r1
     eec:	d8 c0       	rjmp	.+432    	; 0x109e <main+0x978>
			
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Write 256 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_256BYTE) {
     eee:	96 36       	cpi	r25, 0x66	; 102
     ef0:	21 f5       	brne	.+72     	; 0xf3a <main+0x814>
			PORTD |= (1<<ACTIVITY_LED);
     ef2:	93 9a       	sbi	0x12, 3	; 18
			
			int readLength = 256;
			usart_read_bytes(readLength);
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	ad d8       	rcall	.-3750   	; 0x54 <usart_read_bytes>
     efa:	00 e7       	ldi	r16, 0x70	; 112
     efc:	10 e0       	ldi	r17, 0x00	; 0
     efe:	46 01       	movw	r8, r12
     f00:	57 01       	movw	r10, r14
			
			for (int x = 0; x < readLength; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_byte(address, combinedBytes, D0D1_NOT_SWAPPED);
     f02:	f8 01       	movw	r30, r16
     f04:	41 81       	ldd	r20, Z+1	; 0x01
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	54 2f       	mov	r21, r20
     f0a:	44 27       	eor	r20, r20
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2b       	or	r20, r24
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	c5 01       	movw	r24, r10
     f14:	b4 01       	movw	r22, r8
     f16:	a6 db       	rcall	.-2228   	; 0x664 <gba_flash_write_byte>
				address++;
     f18:	ff ef       	ldi	r31, 0xFF	; 255
     f1a:	8f 1a       	sub	r8, r31
     f1c:	9f 0a       	sbc	r9, r31
     f1e:	af 0a       	sbc	r10, r31
     f20:	bf 0a       	sbc	r11, r31
     f22:	0e 5f       	subi	r16, 0xFE	; 254
     f24:	1f 4f       	sbci	r17, 0xFF	; 255
			PORTD |= (1<<ACTIVITY_LED);
			
			int readLength = 256;
			usart_read_bytes(readLength);
			
			for (int x = 0; x < readLength; x += 2) {
     f26:	21 e0       	ldi	r18, 0x01	; 1
     f28:	00 37       	cpi	r16, 0x70	; 112
     f2a:	12 07       	cpc	r17, r18
     f2c:	51 f7       	brne	.-44     	; 0xf02 <main+0x7dc>
     f2e:	80 e8       	ldi	r24, 0x80	; 128
     f30:	c8 0e       	add	r12, r24
     f32:	d1 1c       	adc	r13, r1
     f34:	e1 1c       	adc	r14, r1
     f36:	f1 1c       	adc	r15, r1
     f38:	b2 c0       	rjmp	.+356    	; 0x109e <main+0x978>
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Intel flash command based chips
		// Write 64 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE) {
     f3a:	9c 36       	cpi	r25, 0x6C	; 108
     f3c:	09 f0       	breq	.+2      	; 0xf40 <main+0x81a>
     f3e:	71 c0       	rjmp	.+226    	; 0x1022 <main+0x8fc>
			PORTD |= (1<<ACTIVITY_LED);
     f40:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(64);
     f42:	80 e4       	ldi	r24, 0x40	; 64
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	86 d8       	rcall	.-3828   	; 0x54 <usart_read_bytes>
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
     f48:	c4 bb       	out	0x14, r28	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
     f4a:	ca bb       	out	0x1a, r28	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
     f4c:	c7 bb       	out	0x17, r28	; 23
			
			// Unlock
			gba_flash_write_bus_cycle(address, 0x60);
     f4e:	40 e6       	ldi	r20, 0x60	; 96
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	c7 01       	movw	r24, r14
     f54:	b6 01       	movw	r22, r12
     f56:	10 db       	rcall	.-2528   	; 0x578 <gba_flash_write_bus_cycle>
			gba_flash_write_bus_cycle(address, 0xD0);
     f58:	40 ed       	ldi	r20, 0xD0	; 208
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	c7 01       	movw	r24, r14
     f5e:	b6 01       	movw	r22, r12
     f60:	0b db       	rcall	.-2538   	; 0x578 <gba_flash_write_bus_cycle>
			
			// Buffered write command
			gba_flash_write_bus_cycle(address, 0xE8);
     f62:	48 ee       	ldi	r20, 0xE8	; 232
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	c7 01       	movw	r24, r14
     f68:	b6 01       	movw	r22, r12
     f6a:	06 db       	rcall	.-2548   	; 0x578 <gba_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f6c:	95 e8       	ldi	r25, 0x85	; 133
     f6e:	9a 95       	dec	r25
     f70:	f1 f7       	brne	.-4      	; 0xf6e <main+0x848>
     f72:	00 00       	nop
			_delay_us(50);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			uint16_t dataVerify = gba_read_16bit_data(address);
     f74:	c7 01       	movw	r24, r14
     f76:	b6 01       	movw	r22, r12
     f78:	da d8       	rcall	.-3660   	; 0x12e <gba_read_16bit_data>
			while (dataVerify != 0x0080) {
     f7a:	80 38       	cpi	r24, 0x80	; 128
     f7c:	91 05       	cpc	r25, r1
     f7e:	41 f0       	breq	.+16     	; 0xf90 <main+0x86a>
				dataVerify = gba_read_16bit_data(address);
     f80:	c7 01       	movw	r24, r14
     f82:	b6 01       	movw	r22, r12
     f84:	d4 d8       	rcall	.-3672   	; 0x12e <gba_read_16bit_data>
     f86:	e5 e8       	ldi	r30, 0x85	; 133
     f88:	ea 95       	dec	r30
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <main+0x862>
     f8c:	00 00       	nop
     f8e:	f5 cf       	rjmp	.-22     	; 0xf7a <main+0x854>
				_delay_us(50);
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
     f90:	c4 bb       	out	0x14, r28	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
     f92:	ca bb       	out	0x1a, r28	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
     f94:	c7 bb       	out	0x17, r28	; 23
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
     f96:	4f e1       	ldi	r20, 0x1F	; 31
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	c7 01       	movw	r24, r14
     f9c:	b6 01       	movw	r22, r12
     f9e:	ec da       	rcall	.-2600   	; 0x578 <gba_flash_write_bus_cycle>
     fa0:	00 e7       	ldi	r16, 0x70	; 112
     fa2:	10 e0       	ldi	r17, 0x00	; 0
     fa4:	46 01       	movw	r8, r12
     fa6:	57 01       	movw	r10, r14
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_bus_cycle(address, combinedBytes);
     fa8:	f8 01       	movw	r30, r16
     faa:	41 81       	ldd	r20, Z+1	; 0x01
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	54 2f       	mov	r21, r20
     fb0:	44 27       	eor	r20, r20
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2b       	or	r20, r24
     fb6:	c5 01       	movw	r24, r10
     fb8:	b4 01       	movw	r22, r8
     fba:	de da       	rcall	.-2628   	; 0x578 <gba_flash_write_bus_cycle>
				address++;
     fbc:	ff ef       	ldi	r31, 0xFF	; 255
     fbe:	8f 1a       	sub	r8, r31
     fc0:	9f 0a       	sbc	r9, r31
     fc2:	af 0a       	sbc	r10, r31
     fc4:	bf 0a       	sbc	r11, r31
     fc6:	0e 5f       	subi	r16, 0xFE	; 254
     fc8:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
     fca:	80 eb       	ldi	r24, 0xB0	; 176
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	80 17       	cp	r24, r16
     fd0:	91 07       	cpc	r25, r17
     fd2:	51 f7       	brne	.-44     	; 0xfa8 <main+0x882>
     fd4:	90 e2       	ldi	r25, 0x20	; 32
     fd6:	c9 0e       	add	r12, r25
     fd8:	d1 1c       	adc	r13, r1
     fda:	e1 1c       	adc	r14, r1
     fdc:	f1 1c       	adc	r15, r1
				gba_flash_write_bus_cycle(address, combinedBytes);
				address++;
			}
			
			// Write buffer to flash
			gba_flash_write_bus_cycle(address, 0xD0);
     fde:	40 ed       	ldi	r20, 0xD0	; 208
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	c7 01       	movw	r24, r14
     fe4:	b6 01       	movw	r22, r12
     fe6:	c8 da       	rcall	.-2672   	; 0x578 <gba_flash_write_bus_cycle>
     fe8:	ef e6       	ldi	r30, 0x6F	; 111
     fea:	f3 e0       	ldi	r31, 0x03	; 3
     fec:	31 97       	sbiw	r30, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <main+0x8c6>
     ff0:	00 c0       	rjmp	.+0      	; 0xff2 <main+0x8cc>
     ff2:	00 00       	nop
			_delay_us(440);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			dataVerify = gba_read_16bit_data(address);
     ff4:	c7 01       	movw	r24, r14
     ff6:	b6 01       	movw	r22, r12
     ff8:	9a d8       	rcall	.-3788   	; 0x12e <gba_read_16bit_data>
			while (dataVerify != 0x0080) {
     ffa:	80 38       	cpi	r24, 0x80	; 128
     ffc:	91 05       	cpc	r25, r1
     ffe:	41 f0       	breq	.+16     	; 0x1010 <main+0x8ea>
				dataVerify = gba_read_16bit_data(address);
    1000:	c7 01       	movw	r24, r14
    1002:	b6 01       	movw	r22, r12
    1004:	94 d8       	rcall	.-3800   	; 0x12e <gba_read_16bit_data>
    1006:	f5 e8       	ldi	r31, 0x85	; 133
    1008:	fa 95       	dec	r31
    100a:	f1 f7       	brne	.-4      	; 0x1008 <main+0x8e2>
    100c:	00 00       	nop
    100e:	f5 cf       	rjmp	.-22     	; 0xffa <main+0x8d4>
				_delay_us(50);
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    1010:	c4 bb       	out	0x14, r28	; 20
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1012:	ca bb       	out	0x1a, r28	; 26
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1014:	c7 bb       	out	0x17, r28	; 23
			
			// Back to reading mode
			gba_flash_write_bus_cycle(address, 0xFF);
    1016:	4f ef       	ldi	r20, 0xFF	; 255
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	c7 01       	movw	r24, r14
    101c:	b6 01       	movw	r22, r12
    101e:	ac da       	rcall	.-2728   	; 0x578 <gba_flash_write_bus_cycle>
    1020:	3e c0       	rjmp	.+124    	; 0x109e <main+0x978>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Intel word programming
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE_WORD) {
    1022:	95 37       	cpi	r25, 0x75	; 117
    1024:	f1 f5       	brne	.+124    	; 0x10a2 <main+0x97c>
			PORTD |= (1<<ACTIVITY_LED);
    1026:	93 9a       	sbi	0x12, 3	; 18
			usart_read_bytes(64);
    1028:	80 e4       	ldi	r24, 0x40	; 64
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	13 d8       	rcall	.-4058   	; 0x54 <usart_read_bytes>
    102e:	90 e7       	ldi	r25, 0x70	; 112
    1030:	a9 2e       	mov	r10, r25
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	b9 2e       	mov	r11, r25
    1036:	26 01       	movw	r4, r12
    1038:	37 01       	movw	r6, r14
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
				// Set address lines as outputs
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
    103a:	c4 bb       	out	0x14, r28	; 20
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
    103c:	ca bb       	out	0x1a, r28	; 26
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
    103e:	c7 bb       	out	0x17, r28	; 23
				
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
    1040:	f5 01       	movw	r30, r10
    1042:	01 81       	ldd	r16, Z+1	; 0x01
    1044:	10 e0       	ldi	r17, 0x00	; 0
    1046:	10 2f       	mov	r17, r16
    1048:	00 27       	eor	r16, r16
    104a:	80 81       	ld	r24, Z
    104c:	08 2b       	or	r16, r24
				gba_flash_write_bus_cycle(address, 0x40);
    104e:	40 e4       	ldi	r20, 0x40	; 64
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	c3 01       	movw	r24, r6
    1054:	b2 01       	movw	r22, r4
    1056:	90 da       	rcall	.-2784   	; 0x578 <gba_flash_write_bus_cycle>
				gba_flash_write_bus_cycle(address, combinedBytes);
    1058:	a8 01       	movw	r20, r16
    105a:	c3 01       	movw	r24, r6
    105c:	b2 01       	movw	r22, r4
    105e:	8c da       	rcall	.-2792   	; 0x578 <gba_flash_write_bus_cycle>
				
				// Verify status ok
				uint16_t status = gba_read_16bit_data(address);
    1060:	c3 01       	movw	r24, r6
    1062:	b2 01       	movw	r22, r4
    1064:	64 d8       	rcall	.-3896   	; 0x12e <gba_read_16bit_data>
				while ((status & 0x80) == 0) {
    1066:	87 fd       	sbrc	r24, 7
    1068:	08 c0       	rjmp	.+16     	; 0x107a <main+0x954>
					status = gba_read_16bit_data(address);
    106a:	c3 01       	movw	r24, r6
    106c:	b2 01       	movw	r22, r4
    106e:	5f d8       	rcall	.-3906   	; 0x12e <gba_read_16bit_data>
    1070:	f5 e0       	ldi	r31, 0x05	; 5
    1072:	fa 95       	dec	r31
    1074:	f1 f7       	brne	.-4      	; 0x1072 <main+0x94c>
    1076:	00 00       	nop
    1078:	f6 cf       	rjmp	.-20     	; 0x1066 <main+0x940>
					_delay_us(2);
				}
				address++;
    107a:	2f ef       	ldi	r18, 0xFF	; 255
    107c:	42 1a       	sub	r4, r18
    107e:	52 0a       	sbc	r5, r18
    1080:	62 0a       	sbc	r6, r18
    1082:	72 0a       	sbc	r7, r18
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	a8 0e       	add	r10, r24
    1088:	b1 1c       	adc	r11, r1
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE_WORD) {
			PORTD |= (1<<ACTIVITY_LED);
			usart_read_bytes(64);
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
    108a:	90 eb       	ldi	r25, 0xB0	; 176
    108c:	a9 16       	cp	r10, r25
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	b9 06       	cpc	r11, r25
    1092:	99 f6       	brne	.-90     	; 0x103a <main+0x914>
    1094:	e0 e2       	ldi	r30, 0x20	; 32
    1096:	ce 0e       	add	r12, r30
    1098:	d1 1c       	adc	r13, r1
    109a:	e1 1c       	adc	r14, r1
    109c:	f1 1c       	adc	r15, r1
					_delay_us(2);
				}
				address++;
			}
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
    109e:	81 e3       	ldi	r24, 0x31	; 49
    10a0:	c3 c0       	rjmp	.+390    	; 0x1228 <main+0xb02>
		
		
		// ---------- General commands ----------
		// Set any pin as input/output
		// Reads the DDR/PORT (e.g. DDRB/PORTB is 'B') and the hex value that represents pins to set to an input (e.g. PB7 is 0x80)
		else if (receivedChar == SET_INPUT || receivedChar == SET_OUTPUT) {
    10a2:	99 34       	cpi	r25, 0x49	; 73
    10a4:	19 f0       	breq	.+6      	; 0x10ac <main+0x986>
    10a6:	9f 34       	cpi	r25, 0x4F	; 79
    10a8:	09 f0       	breq	.+2      	; 0x10ac <main+0x986>
    10aa:	50 c0       	rjmp	.+160    	; 0x114c <main+0xa26>
			char portChar = USART_Receive();
    10ac:	cb d7       	rcall	.+3990   	; 0x2044 <__TEXT_REGION_LENGTH__+0x44>
    10ae:	18 2f       	mov	r17, r24
			usart_read_chars();
    10b0:	e6 d7       	rcall	.+4044   	; 0x207e <__TEXT_REGION_LENGTH__+0x7e>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
    10b2:	40 e1       	ldi	r20, 0x10	; 16
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	80 e7       	ldi	r24, 0x70	; 112
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	ea d0       	rcall	.+468    	; 0x1294 <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
    10c0:	93 9a       	sbi	0x12, 3	; 18
			if (receivedChar == SET_INPUT) {
    10c2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <receivedChar>
    10c6:	89 34       	cpi	r24, 0x49	; 73
    10c8:	f9 f4       	brne	.+62     	; 0x1108 <main+0x9e2>
				if (portChar == 'A') {
    10ca:	11 34       	cpi	r17, 0x41	; 65
    10cc:	21 f4       	brne	.+8      	; 0x10d6 <main+0x9b0>
					DDRA &= ~(setValue);
    10ce:	8a b3       	in	r24, 0x1a	; 26
    10d0:	60 95       	com	r22
    10d2:	68 23       	and	r22, r24
    10d4:	20 c0       	rjmp	.+64     	; 0x1116 <main+0x9f0>
				}
				else if (portChar == 'B') {
    10d6:	12 34       	cpi	r17, 0x42	; 66
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <main+0x9bc>
					DDRB &= ~(setValue);
    10da:	87 b3       	in	r24, 0x17	; 23
    10dc:	60 95       	com	r22
    10de:	68 23       	and	r22, r24
    10e0:	20 c0       	rjmp	.+64     	; 0x1122 <main+0x9fc>
				}
				else if (portChar == 'C') {
    10e2:	13 34       	cpi	r17, 0x43	; 67
    10e4:	21 f4       	brne	.+8      	; 0x10ee <main+0x9c8>
					DDRC &= ~(setValue);
    10e6:	84 b3       	in	r24, 0x14	; 20
    10e8:	60 95       	com	r22
    10ea:	68 23       	and	r22, r24
    10ec:	20 c0       	rjmp	.+64     	; 0x112e <main+0xa08>
				}
				else if (portChar == 'D') {
    10ee:	14 34       	cpi	r17, 0x44	; 68
    10f0:	21 f4       	brne	.+8      	; 0x10fa <main+0x9d4>
					DDRD &= ~(setValue);
    10f2:	81 b3       	in	r24, 0x11	; 17
    10f4:	60 95       	com	r22
    10f6:	68 23       	and	r22, r24
    10f8:	20 c0       	rjmp	.+64     	; 0x113a <main+0xa14>
				}
				else if (portChar == 'E') {
    10fa:	15 34       	cpi	r17, 0x45	; 69
    10fc:	09 f0       	breq	.+2      	; 0x1100 <main+0x9da>
    10fe:	95 c0       	rjmp	.+298    	; 0x122a <main+0xb04>
					DDRE &= ~(setValue);
    1100:	86 b1       	in	r24, 0x06	; 6
    1102:	60 95       	com	r22
    1104:	68 23       	and	r22, r24
    1106:	20 c0       	rjmp	.+64     	; 0x1148 <main+0xa22>
				}
			}
			else if (receivedChar == SET_OUTPUT) {
    1108:	8f 34       	cpi	r24, 0x4F	; 79
    110a:	09 f0       	breq	.+2      	; 0x110e <main+0x9e8>
    110c:	8e c0       	rjmp	.+284    	; 0x122a <main+0xb04>
				if (portChar == 'A') {
    110e:	11 34       	cpi	r17, 0x41	; 65
    1110:	21 f4       	brne	.+8      	; 0x111a <main+0x9f4>
					DDRA |= (setValue);
    1112:	8a b3       	in	r24, 0x1a	; 26
    1114:	68 2b       	or	r22, r24
    1116:	6a bb       	out	0x1a, r22	; 26
    1118:	88 c0       	rjmp	.+272    	; 0x122a <main+0xb04>
				}
				else if (portChar == 'B') {
    111a:	12 34       	cpi	r17, 0x42	; 66
    111c:	21 f4       	brne	.+8      	; 0x1126 <main+0xa00>
					DDRB |= (setValue);
    111e:	87 b3       	in	r24, 0x17	; 23
    1120:	68 2b       	or	r22, r24
    1122:	67 bb       	out	0x17, r22	; 23
    1124:	82 c0       	rjmp	.+260    	; 0x122a <main+0xb04>
				}
				else if (portChar == 'C') {
    1126:	13 34       	cpi	r17, 0x43	; 67
    1128:	21 f4       	brne	.+8      	; 0x1132 <main+0xa0c>
					DDRC |= (setValue);
    112a:	84 b3       	in	r24, 0x14	; 20
    112c:	68 2b       	or	r22, r24
    112e:	64 bb       	out	0x14, r22	; 20
    1130:	7c c0       	rjmp	.+248    	; 0x122a <main+0xb04>
				}
				else if (portChar == 'D') {
    1132:	14 34       	cpi	r17, 0x44	; 68
    1134:	21 f4       	brne	.+8      	; 0x113e <main+0xa18>
					DDRD |= (setValue);
    1136:	81 b3       	in	r24, 0x11	; 17
    1138:	68 2b       	or	r22, r24
    113a:	61 bb       	out	0x11, r22	; 17
    113c:	76 c0       	rjmp	.+236    	; 0x122a <main+0xb04>
				}
				else if (portChar == 'E') {
    113e:	15 34       	cpi	r17, 0x45	; 69
    1140:	09 f0       	breq	.+2      	; 0x1144 <main+0xa1e>
    1142:	73 c0       	rjmp	.+230    	; 0x122a <main+0xb04>
					DDRE |= (setValue);
    1144:	86 b1       	in	r24, 0x06	; 6
    1146:	68 2b       	or	r22, r24
    1148:	66 b9       	out	0x06, r22	; 6
    114a:	6f c0       	rjmp	.+222    	; 0x122a <main+0xb04>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as low
		else if (receivedChar == SET_OUTPUT_LOW) {
    114c:	9c 34       	cpi	r25, 0x4C	; 76
    114e:	51 f5       	brne	.+84     	; 0x11a4 <main+0xa7e>
			char portChar = USART_Receive();			
    1150:	79 d7       	rcall	.+3826   	; 0x2044 <__TEXT_REGION_LENGTH__+0x44>
    1152:	18 2f       	mov	r17, r24
			usart_read_chars();
    1154:	94 d7       	rcall	.+3880   	; 0x207e <__TEXT_REGION_LENGTH__+0x7e>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
    1156:	40 e1       	ldi	r20, 0x10	; 16
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	80 e7       	ldi	r24, 0x70	; 112
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	98 d0       	rcall	.+304    	; 0x1294 <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
    1164:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
    1166:	11 34       	cpi	r17, 0x41	; 65
    1168:	21 f4       	brne	.+8      	; 0x1172 <main+0xa4c>
				PORTA &= ~(setValue);
    116a:	8b b3       	in	r24, 0x1b	; 27
    116c:	60 95       	com	r22
    116e:	68 23       	and	r22, r24
    1170:	2a c0       	rjmp	.+84     	; 0x11c6 <main+0xaa0>
			}
			else if (portChar == 'B') {
    1172:	12 34       	cpi	r17, 0x42	; 66
    1174:	21 f4       	brne	.+8      	; 0x117e <main+0xa58>
				PORTB &= ~(setValue);
    1176:	88 b3       	in	r24, 0x18	; 24
    1178:	60 95       	com	r22
    117a:	68 23       	and	r22, r24
    117c:	2a c0       	rjmp	.+84     	; 0x11d2 <main+0xaac>
			}
			else if (portChar == 'C') {
    117e:	13 34       	cpi	r17, 0x43	; 67
    1180:	21 f4       	brne	.+8      	; 0x118a <main+0xa64>
				PORTC &= ~(setValue);
    1182:	85 b3       	in	r24, 0x15	; 21
    1184:	60 95       	com	r22
    1186:	68 23       	and	r22, r24
    1188:	2a c0       	rjmp	.+84     	; 0x11de <main+0xab8>
			}
			else if (portChar == 'D') {
    118a:	14 34       	cpi	r17, 0x44	; 68
    118c:	21 f4       	brne	.+8      	; 0x1196 <main+0xa70>
				PORTD &= ~(setValue);
    118e:	82 b3       	in	r24, 0x12	; 18
    1190:	60 95       	com	r22
    1192:	68 23       	and	r22, r24
    1194:	2a c0       	rjmp	.+84     	; 0x11ea <main+0xac4>
			}
			else if (portChar == 'E') {
    1196:	15 34       	cpi	r17, 0x45	; 69
    1198:	09 f0       	breq	.+2      	; 0x119c <main+0xa76>
    119a:	47 c0       	rjmp	.+142    	; 0x122a <main+0xb04>
				PORTE &= ~(setValue);
    119c:	87 b1       	in	r24, 0x07	; 7
    119e:	60 95       	com	r22
    11a0:	68 23       	and	r22, r24
    11a2:	29 c0       	rjmp	.+82     	; 0x11f6 <main+0xad0>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as high
		else if (receivedChar == SET_OUTPUT_HIGH) {
    11a4:	98 34       	cpi	r25, 0x48	; 72
    11a6:	49 f5       	brne	.+82     	; 0x11fa <main+0xad4>
			char portChar = USART_Receive();			
    11a8:	4d d7       	rcall	.+3738   	; 0x2044 <__TEXT_REGION_LENGTH__+0x44>
    11aa:	18 2f       	mov	r17, r24
			usart_read_chars();
    11ac:	68 d7       	rcall	.+3792   	; 0x207e <__TEXT_REGION_LENGTH__+0x7e>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
    11ae:	40 e1       	ldi	r20, 0x10	; 16
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	80 e7       	ldi	r24, 0x70	; 112
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	6c d0       	rcall	.+216    	; 0x1294 <strtol>
			
			PORTD |= (1<<ACTIVITY_LED);
    11bc:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
    11be:	11 34       	cpi	r17, 0x41	; 65
    11c0:	21 f4       	brne	.+8      	; 0x11ca <main+0xaa4>
				PORTA |= (setValue);
    11c2:	8b b3       	in	r24, 0x1b	; 27
    11c4:	68 2b       	or	r22, r24
    11c6:	6b bb       	out	0x1b, r22	; 27
    11c8:	30 c0       	rjmp	.+96     	; 0x122a <main+0xb04>
			}
			else if (portChar == 'B') {
    11ca:	12 34       	cpi	r17, 0x42	; 66
    11cc:	21 f4       	brne	.+8      	; 0x11d6 <main+0xab0>
				PORTB |= (setValue);
    11ce:	88 b3       	in	r24, 0x18	; 24
    11d0:	68 2b       	or	r22, r24
    11d2:	68 bb       	out	0x18, r22	; 24
    11d4:	2a c0       	rjmp	.+84     	; 0x122a <main+0xb04>
			}
			else if (portChar == 'C') {
    11d6:	13 34       	cpi	r17, 0x43	; 67
    11d8:	21 f4       	brne	.+8      	; 0x11e2 <main+0xabc>
				PORTC |= (setValue);
    11da:	85 b3       	in	r24, 0x15	; 21
    11dc:	68 2b       	or	r22, r24
    11de:	65 bb       	out	0x15, r22	; 21
    11e0:	24 c0       	rjmp	.+72     	; 0x122a <main+0xb04>
			}
			else if (portChar == 'D') {
    11e2:	14 34       	cpi	r17, 0x44	; 68
    11e4:	21 f4       	brne	.+8      	; 0x11ee <main+0xac8>
				PORTD |= (setValue);
    11e6:	82 b3       	in	r24, 0x12	; 18
    11e8:	68 2b       	or	r22, r24
    11ea:	62 bb       	out	0x12, r22	; 18
    11ec:	1e c0       	rjmp	.+60     	; 0x122a <main+0xb04>
			}
			else if (portChar == 'E') {
    11ee:	15 34       	cpi	r17, 0x45	; 69
    11f0:	e1 f4       	brne	.+56     	; 0x122a <main+0xb04>
				PORTE |= (setValue);
    11f2:	87 b1       	in	r24, 0x07	; 7
    11f4:	68 2b       	or	r22, r24
    11f6:	67 b9       	out	0x07, r22	; 7
    11f8:	18 c0       	rjmp	.+48     	; 0x122a <main+0xb04>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
		}
		
		// Read all pins of a PORT and return the value
		else if (receivedChar == READ_INPUT) {
    11fa:	94 34       	cpi	r25, 0x44	; 68
    11fc:	c1 f4       	brne	.+48     	; 0x122e <main+0xb08>
			char portChar = USART_Receive();			
    11fe:	22 d7       	rcall	.+3652   	; 0x2044 <__TEXT_REGION_LENGTH__+0x44>
			
			PORTD |= (1<<ACTIVITY_LED);
    1200:	93 9a       	sbi	0x12, 3	; 18
			if (portChar == 'A') {
    1202:	81 34       	cpi	r24, 0x41	; 65
    1204:	11 f4       	brne	.+4      	; 0x120a <main+0xae4>
				USART_Transmit(PINA);
    1206:	89 b3       	in	r24, 0x19	; 25
    1208:	0f c0       	rjmp	.+30     	; 0x1228 <main+0xb02>
			}
			else if (portChar == 'B') {
    120a:	82 34       	cpi	r24, 0x42	; 66
    120c:	11 f4       	brne	.+4      	; 0x1212 <main+0xaec>
				USART_Transmit(PINB);
    120e:	86 b3       	in	r24, 0x16	; 22
    1210:	0b c0       	rjmp	.+22     	; 0x1228 <main+0xb02>
			}
			else if (portChar == 'C') {
    1212:	83 34       	cpi	r24, 0x43	; 67
    1214:	11 f4       	brne	.+4      	; 0x121a <main+0xaf4>
				USART_Transmit(PINC);
    1216:	83 b3       	in	r24, 0x13	; 19
    1218:	07 c0       	rjmp	.+14     	; 0x1228 <main+0xb02>
			}
			else if (portChar == 'D') {
    121a:	84 34       	cpi	r24, 0x44	; 68
    121c:	11 f4       	brne	.+4      	; 0x1222 <main+0xafc>
				USART_Transmit(PIND);
    121e:	80 b3       	in	r24, 0x10	; 16
    1220:	03 c0       	rjmp	.+6      	; 0x1228 <main+0xb02>
			}
			else if (portChar == 'E') {
    1222:	85 34       	cpi	r24, 0x45	; 69
    1224:	11 f4       	brne	.+4      	; 0x122a <main+0xb04>
				USART_Transmit(PINE);
    1226:	85 b1       	in	r24, 0x05	; 5
    1228:	11 d7       	rcall	.+3618   	; 0x204c <__TEXT_REGION_LENGTH__+0x4c>
			}
			PORTD &= ~(1<<ACTIVITY_LED);
    122a:	93 98       	cbi	0x12, 3	; 18
    122c:	86 ca       	rjmp	.-2804   	; 0x73a <main+0x14>
		}
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
    122e:	9d 34       	cpi	r25, 0x4D	; 77
    1230:	59 f4       	brne	.+22     	; 0x1248 <main+0xb22>
			char commonChar = USART_Receive();
    1232:	08 d7       	rcall	.+3600   	; 0x2044 <__TEXT_REGION_LENGTH__+0x44>
			if (commonChar == '1') {
    1234:	81 33       	cpi	r24, 0x31	; 49
    1236:	19 f4       	brne	.+6      	; 0x123e <main+0xb18>
				resetCommonLines = 1;
    1238:	22 24       	eor	r2, r2
    123a:	23 94       	inc	r2
    123c:	81 ca       	rjmp	.-2814   	; 0x740 <main+0x1a>
			}
			else if (commonChar == '0') {
    123e:	80 33       	cpi	r24, 0x30	; 48
    1240:	09 f0       	breq	.+2      	; 0x1244 <main+0xb1e>
    1242:	7b ca       	rjmp	.-2826   	; 0x73a <main+0x14>
				resetCommonLines = 0;
    1244:	21 2c       	mov	r2, r1
    1246:	7d ca       	rjmp	.-2822   	; 0x742 <main+0x1c>
			}
		}
		
		// Send back the PCB version number
		else if (receivedChar == READ_PCB_VERSION) {
    1248:	98 36       	cpi	r25, 0x68	; 104
    124a:	11 f4       	brne	.+4      	; 0x1250 <main+0xb2a>
			USART_Transmit(PCB_VERSION);
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <main+0xb30>
		}
		
		// Send back the firmware version number
		else if (receivedChar == READ_FIRMWARE_VERSION) {
    1250:	96 35       	cpi	r25, 0x56	; 86
    1252:	19 f4       	brne	.+6      	; 0x125a <main+0xb34>
			USART_Transmit(FIRMWARE_VERSION);
    1254:	8f e0       	ldi	r24, 0x0F	; 15
    1256:	fa d6       	rcall	.+3572   	; 0x204c <__TEXT_REGION_LENGTH__+0x4c>
    1258:	70 ca       	rjmp	.-2848   	; 0x73a <main+0x14>
		}
		
		// Reset the AVR if it matches the number
		else if (receivedChar == RESET_AVR) {
    125a:	9a 32       	cpi	r25, 0x2A	; 42
    125c:	09 f0       	breq	.+2      	; 0x1260 <main+0xb3a>
    125e:	6d ca       	rjmp	.-2854   	; 0x73a <main+0x14>
			usart_read_chars();
    1260:	0e d7       	rcall	.+3612   	; 0x207e <__TEXT_REGION_LENGTH__+0x7e>
			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
    1262:	40 e1       	ldi	r20, 0x10	; 16
    1264:	50 e0       	ldi	r21, 0x00	; 0
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	80 e7       	ldi	r24, 0x70	; 112
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	12 d0       	rcall	.+36     	; 0x1294 <strtol>
			if (resetValue == RESET_VALUE) {
    1270:	61 3e       	cpi	r22, 0xE1	; 225
    1272:	75 4e       	sbci	r23, 0xE5	; 229
    1274:	87 40       	sbci	r24, 0x07	; 7
    1276:	91 05       	cpc	r25, r1
    1278:	09 f0       	breq	.+2      	; 0x127c <main+0xb56>
    127a:	5f ca       	rjmp	.-2882   	; 0x73a <main+0x14>
				// Clear watchdog flag
				MCUCSR &= ~(1<<WDRF);
    127c:	84 b7       	in	r24, 0x34	; 52
    127e:	87 7f       	andi	r24, 0xF7	; 247
    1280:	84 bf       	out	0x34, r24	; 52
				
				// Start timed sequence
				WDTCR = (1<<WDCE) | (1<<WDE);
    1282:	28 e1       	ldi	r18, 0x18	; 24
    1284:	21 bd       	out	0x21, r18	; 33
				
				// Reset in 250 ms
				WDTCR = (1<<WDP2) | (1<<WDE);
    1286:	8c e0       	ldi	r24, 0x0C	; 12
    1288:	81 bd       	out	0x21, r24	; 33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	9f ef       	ldi	r25, 0xFF	; 255
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <main+0xb68>
    1292:	53 ca       	rjmp	.-2906   	; 0x73a <main+0x14>

00001294 <strtol>:
    1294:	a0 e0       	ldi	r26, 0x00	; 0
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	ef e4       	ldi	r30, 0x4F	; 79
    129a:	f9 e0       	ldi	r31, 0x09	; 9
    129c:	78 c1       	rjmp	.+752    	; 0x158e <__prologue_saves__+0x2>
    129e:	5c 01       	movw	r10, r24
    12a0:	6b 01       	movw	r12, r22
    12a2:	7a 01       	movw	r14, r20
    12a4:	61 15       	cp	r22, r1
    12a6:	71 05       	cpc	r23, r1
    12a8:	19 f0       	breq	.+6      	; 0x12b0 <strtol+0x1c>
    12aa:	fb 01       	movw	r30, r22
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	80 83       	st	Z, r24
    12b0:	e1 14       	cp	r14, r1
    12b2:	f1 04       	cpc	r15, r1
    12b4:	29 f0       	breq	.+10     	; 0x12c0 <strtol+0x2c>
    12b6:	c7 01       	movw	r24, r14
    12b8:	02 97       	sbiw	r24, 0x02	; 2
    12ba:	83 97       	sbiw	r24, 0x23	; 35
    12bc:	08 f0       	brcs	.+2      	; 0x12c0 <strtol+0x2c>
    12be:	e2 c0       	rjmp	.+452    	; 0x1484 <strtol+0x1f0>
    12c0:	e5 01       	movw	r28, r10
    12c2:	21 96       	adiw	r28, 0x01	; 1
    12c4:	f5 01       	movw	r30, r10
    12c6:	10 81       	ld	r17, Z
    12c8:	81 2f       	mov	r24, r17
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	11 d1       	rcall	.+546    	; 0x14f0 <isspace>
    12ce:	89 2b       	or	r24, r25
    12d0:	11 f0       	breq	.+4      	; 0x12d6 <strtol+0x42>
    12d2:	5e 01       	movw	r10, r28
    12d4:	f5 cf       	rjmp	.-22     	; 0x12c0 <strtol+0x2c>
    12d6:	1d 32       	cpi	r17, 0x2D	; 45
    12d8:	29 f4       	brne	.+10     	; 0x12e4 <strtol+0x50>
    12da:	21 96       	adiw	r28, 0x01	; 1
    12dc:	f5 01       	movw	r30, r10
    12de:	11 81       	ldd	r17, Z+1	; 0x01
    12e0:	01 e0       	ldi	r16, 0x01	; 1
    12e2:	07 c0       	rjmp	.+14     	; 0x12f2 <strtol+0x5e>
    12e4:	1b 32       	cpi	r17, 0x2B	; 43
    12e6:	21 f4       	brne	.+8      	; 0x12f0 <strtol+0x5c>
    12e8:	e5 01       	movw	r28, r10
    12ea:	22 96       	adiw	r28, 0x02	; 2
    12ec:	f5 01       	movw	r30, r10
    12ee:	11 81       	ldd	r17, Z+1	; 0x01
    12f0:	00 e0       	ldi	r16, 0x00	; 0
    12f2:	e1 14       	cp	r14, r1
    12f4:	f1 04       	cpc	r15, r1
    12f6:	09 f1       	breq	.+66     	; 0x133a <strtol+0xa6>
    12f8:	f0 e1       	ldi	r31, 0x10	; 16
    12fa:	ef 16       	cp	r14, r31
    12fc:	f1 04       	cpc	r15, r1
    12fe:	29 f4       	brne	.+10     	; 0x130a <strtol+0x76>
    1300:	3e c0       	rjmp	.+124    	; 0x137e <strtol+0xea>
    1302:	10 e3       	ldi	r17, 0x30	; 48
    1304:	e1 14       	cp	r14, r1
    1306:	f1 04       	cpc	r15, r1
    1308:	21 f1       	breq	.+72     	; 0x1352 <strtol+0xbe>
    130a:	28 e0       	ldi	r18, 0x08	; 8
    130c:	e2 16       	cp	r14, r18
    130e:	f1 04       	cpc	r15, r1
    1310:	01 f1       	breq	.+64     	; 0x1352 <strtol+0xbe>
    1312:	54 f4       	brge	.+20     	; 0x1328 <strtol+0x94>
    1314:	e2 e0       	ldi	r30, 0x02	; 2
    1316:	ee 16       	cp	r14, r30
    1318:	f1 04       	cpc	r15, r1
    131a:	21 f5       	brne	.+72     	; 0x1364 <strtol+0xd0>
    131c:	81 2c       	mov	r8, r1
    131e:	91 2c       	mov	r9, r1
    1320:	a1 2c       	mov	r10, r1
    1322:	b0 e4       	ldi	r27, 0x40	; 64
    1324:	bb 2e       	mov	r11, r27
    1326:	3d c0       	rjmp	.+122    	; 0x13a2 <strtol+0x10e>
    1328:	fa e0       	ldi	r31, 0x0A	; 10
    132a:	ef 16       	cp	r14, r31
    132c:	f1 04       	cpc	r15, r1
    132e:	39 f0       	breq	.+14     	; 0x133e <strtol+0xaa>
    1330:	20 e1       	ldi	r18, 0x10	; 16
    1332:	e2 16       	cp	r14, r18
    1334:	f1 04       	cpc	r15, r1
    1336:	b1 f4       	brne	.+44     	; 0x1364 <strtol+0xd0>
    1338:	2f c0       	rjmp	.+94     	; 0x1398 <strtol+0x104>
    133a:	10 33       	cpi	r17, 0x30	; 48
    133c:	11 f1       	breq	.+68     	; 0x1382 <strtol+0xee>
    133e:	fa e0       	ldi	r31, 0x0A	; 10
    1340:	ef 2e       	mov	r14, r31
    1342:	f1 2c       	mov	r15, r1
    1344:	ac ec       	ldi	r26, 0xCC	; 204
    1346:	8a 2e       	mov	r8, r26
    1348:	98 2c       	mov	r9, r8
    134a:	a8 2c       	mov	r10, r8
    134c:	ac e0       	ldi	r26, 0x0C	; 12
    134e:	ba 2e       	mov	r11, r26
    1350:	28 c0       	rjmp	.+80     	; 0x13a2 <strtol+0x10e>
    1352:	78 e0       	ldi	r23, 0x08	; 8
    1354:	e7 2e       	mov	r14, r23
    1356:	f1 2c       	mov	r15, r1
    1358:	81 2c       	mov	r8, r1
    135a:	91 2c       	mov	r9, r1
    135c:	a1 2c       	mov	r10, r1
    135e:	e0 e1       	ldi	r30, 0x10	; 16
    1360:	be 2e       	mov	r11, r30
    1362:	1f c0       	rjmp	.+62     	; 0x13a2 <strtol+0x10e>
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e8       	ldi	r25, 0x80	; 128
    136c:	97 01       	movw	r18, r14
    136e:	0f 2c       	mov	r0, r15
    1370:	00 0c       	add	r0, r0
    1372:	44 0b       	sbc	r20, r20
    1374:	55 0b       	sbc	r21, r21
    1376:	de d0       	rcall	.+444    	; 0x1534 <__udivmodsi4>
    1378:	49 01       	movw	r8, r18
    137a:	5a 01       	movw	r10, r20
    137c:	12 c0       	rjmp	.+36     	; 0x13a2 <strtol+0x10e>
    137e:	10 33       	cpi	r17, 0x30	; 48
    1380:	59 f4       	brne	.+22     	; 0x1398 <strtol+0x104>
    1382:	88 81       	ld	r24, Y
    1384:	8f 7d       	andi	r24, 0xDF	; 223
    1386:	88 35       	cpi	r24, 0x58	; 88
    1388:	09 f0       	breq	.+2      	; 0x138c <strtol+0xf8>
    138a:	bb cf       	rjmp	.-138    	; 0x1302 <strtol+0x6e>
    138c:	19 81       	ldd	r17, Y+1	; 0x01
    138e:	22 96       	adiw	r28, 0x02	; 2
    1390:	02 60       	ori	r16, 0x02	; 2
    1392:	80 e1       	ldi	r24, 0x10	; 16
    1394:	e8 2e       	mov	r14, r24
    1396:	f1 2c       	mov	r15, r1
    1398:	81 2c       	mov	r8, r1
    139a:	91 2c       	mov	r9, r1
    139c:	a1 2c       	mov	r10, r1
    139e:	68 e0       	ldi	r22, 0x08	; 8
    13a0:	b6 2e       	mov	r11, r22
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	cb 01       	movw	r24, r22
    13aa:	27 01       	movw	r4, r14
    13ac:	0f 2c       	mov	r0, r15
    13ae:	00 0c       	add	r0, r0
    13b0:	66 08       	sbc	r6, r6
    13b2:	77 08       	sbc	r7, r7
    13b4:	fe 01       	movw	r30, r28
    13b6:	50 ed       	ldi	r21, 0xD0	; 208
    13b8:	35 2e       	mov	r3, r21
    13ba:	31 0e       	add	r3, r17
    13bc:	29 e0       	ldi	r18, 0x09	; 9
    13be:	23 15       	cp	r18, r3
    13c0:	70 f4       	brcc	.+28     	; 0x13de <strtol+0x14a>
    13c2:	2f eb       	ldi	r18, 0xBF	; 191
    13c4:	21 0f       	add	r18, r17
    13c6:	2a 31       	cpi	r18, 0x1A	; 26
    13c8:	18 f4       	brcc	.+6      	; 0x13d0 <strtol+0x13c>
    13ca:	39 ec       	ldi	r19, 0xC9	; 201
    13cc:	33 2e       	mov	r3, r19
    13ce:	06 c0       	rjmp	.+12     	; 0x13dc <strtol+0x148>
    13d0:	2f e9       	ldi	r18, 0x9F	; 159
    13d2:	21 0f       	add	r18, r17
    13d4:	2a 31       	cpi	r18, 0x1A	; 26
    13d6:	10 f5       	brcc	.+68     	; 0x141c <strtol+0x188>
    13d8:	29 ea       	ldi	r18, 0xA9	; 169
    13da:	32 2e       	mov	r3, r18
    13dc:	31 0e       	add	r3, r17
    13de:	23 2d       	mov	r18, r3
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	2e 15       	cp	r18, r14
    13e4:	3f 05       	cpc	r19, r15
    13e6:	d4 f4       	brge	.+52     	; 0x141c <strtol+0x188>
    13e8:	47 fd       	sbrc	r20, 7
    13ea:	15 c0       	rjmp	.+42     	; 0x1416 <strtol+0x182>
    13ec:	86 16       	cp	r8, r22
    13ee:	97 06       	cpc	r9, r23
    13f0:	a8 06       	cpc	r10, r24
    13f2:	b9 06       	cpc	r11, r25
    13f4:	68 f0       	brcs	.+26     	; 0x1410 <strtol+0x17c>
    13f6:	a3 01       	movw	r20, r6
    13f8:	92 01       	movw	r18, r4
    13fa:	8d d0       	rcall	.+282    	; 0x1516 <__mulsi3>
    13fc:	63 0d       	add	r22, r3
    13fe:	71 1d       	adc	r23, r1
    1400:	81 1d       	adc	r24, r1
    1402:	91 1d       	adc	r25, r1
    1404:	61 30       	cpi	r22, 0x01	; 1
    1406:	71 05       	cpc	r23, r1
    1408:	81 05       	cpc	r24, r1
    140a:	20 e8       	ldi	r18, 0x80	; 128
    140c:	92 07       	cpc	r25, r18
    140e:	10 f0       	brcs	.+4      	; 0x1414 <strtol+0x180>
    1410:	4f ef       	ldi	r20, 0xFF	; 255
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <strtol+0x182>
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	21 96       	adiw	r28, 0x01	; 1
    1418:	10 81       	ld	r17, Z
    141a:	cc cf       	rjmp	.-104    	; 0x13b4 <strtol+0x120>
    141c:	20 2f       	mov	r18, r16
    141e:	21 70       	andi	r18, 0x01	; 1
    1420:	c1 14       	cp	r12, r1
    1422:	d1 04       	cpc	r13, r1
    1424:	71 f0       	breq	.+28     	; 0x1442 <strtol+0x1ae>
    1426:	44 23       	and	r20, r20
    1428:	29 f0       	breq	.+10     	; 0x1434 <strtol+0x1a0>
    142a:	21 97       	sbiw	r28, 0x01	; 1
    142c:	f6 01       	movw	r30, r12
    142e:	d1 83       	std	Z+1, r29	; 0x01
    1430:	c0 83       	st	Z, r28
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <strtol+0x1ae>
    1434:	01 ff       	sbrs	r16, 1
    1436:	19 c0       	rjmp	.+50     	; 0x146a <strtol+0x1d6>
    1438:	22 97       	sbiw	r28, 0x02	; 2
    143a:	f6 01       	movw	r30, r12
    143c:	d1 83       	std	Z+1, r29	; 0x01
    143e:	c0 83       	st	Z, r28
    1440:	14 c0       	rjmp	.+40     	; 0x146a <strtol+0x1d6>
    1442:	47 ff       	sbrs	r20, 7
    1444:	12 c0       	rjmp	.+36     	; 0x146a <strtol+0x1d6>
    1446:	22 23       	and	r18, r18
    1448:	29 f0       	breq	.+10     	; 0x1454 <strtol+0x1c0>
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e8       	ldi	r25, 0x80	; 128
    1452:	04 c0       	rjmp	.+8      	; 0x145c <strtol+0x1c8>
    1454:	6f ef       	ldi	r22, 0xFF	; 255
    1456:	7f ef       	ldi	r23, 0xFF	; 255
    1458:	8f ef       	ldi	r24, 0xFF	; 255
    145a:	9f e7       	ldi	r25, 0x7F	; 127
    145c:	22 e2       	ldi	r18, 0x22	; 34
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <errno+0x1>
    1464:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <errno>
    1468:	09 c0       	rjmp	.+18     	; 0x147c <strtol+0x1e8>
    146a:	22 23       	and	r18, r18
    146c:	81 f0       	breq	.+32     	; 0x148e <strtol+0x1fa>
    146e:	90 95       	com	r25
    1470:	80 95       	com	r24
    1472:	70 95       	com	r23
    1474:	61 95       	neg	r22
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	8f 4f       	sbci	r24, 0xFF	; 255
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	46 2f       	mov	r20, r22
    147e:	37 2f       	mov	r19, r23
    1480:	28 2f       	mov	r18, r24
    1482:	12 c0       	rjmp	.+36     	; 0x14a8 <strtol+0x214>
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0d c0       	rjmp	.+26     	; 0x14a8 <strtol+0x214>
    148e:	97 ff       	sbrs	r25, 7
    1490:	f5 cf       	rjmp	.-22     	; 0x147c <strtol+0x1e8>
    1492:	82 e2       	ldi	r24, 0x22	; 34
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <errno+0x1>
    149a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <errno>
    149e:	6f ef       	ldi	r22, 0xFF	; 255
    14a0:	7f ef       	ldi	r23, 0xFF	; 255
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	9f e7       	ldi	r25, 0x7F	; 127
    14a6:	ea cf       	rjmp	.-44     	; 0x147c <strtol+0x1e8>
    14a8:	64 2f       	mov	r22, r20
    14aa:	73 2f       	mov	r23, r19
    14ac:	82 2f       	mov	r24, r18
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	e1 e1       	ldi	r30, 0x11	; 17
    14b4:	88 c0       	rjmp	.+272    	; 0x15c6 <__epilogue_restores__+0x2>

000014b6 <atoi>:
    14b6:	fc 01       	movw	r30, r24
    14b8:	88 27       	eor	r24, r24
    14ba:	99 27       	eor	r25, r25
    14bc:	e8 94       	clt
    14be:	21 91       	ld	r18, Z+
    14c0:	20 32       	cpi	r18, 0x20	; 32
    14c2:	e9 f3       	breq	.-6      	; 0x14be <atoi+0x8>
    14c4:	29 30       	cpi	r18, 0x09	; 9
    14c6:	10 f0       	brcs	.+4      	; 0x14cc <atoi+0x16>
    14c8:	2e 30       	cpi	r18, 0x0E	; 14
    14ca:	c8 f3       	brcs	.-14     	; 0x14be <atoi+0x8>
    14cc:	2b 32       	cpi	r18, 0x2B	; 43
    14ce:	39 f0       	breq	.+14     	; 0x14de <atoi+0x28>
    14d0:	2d 32       	cpi	r18, 0x2D	; 45
    14d2:	31 f4       	brne	.+12     	; 0x14e0 <atoi+0x2a>
    14d4:	68 94       	set
    14d6:	03 c0       	rjmp	.+6      	; 0x14de <atoi+0x28>
    14d8:	13 d0       	rcall	.+38     	; 0x1500 <__mulhi_const_10>
    14da:	82 0f       	add	r24, r18
    14dc:	91 1d       	adc	r25, r1
    14de:	21 91       	ld	r18, Z+
    14e0:	20 53       	subi	r18, 0x30	; 48
    14e2:	2a 30       	cpi	r18, 0x0A	; 10
    14e4:	c8 f3       	brcs	.-14     	; 0x14d8 <atoi+0x22>
    14e6:	1e f4       	brtc	.+6      	; 0x14ee <atoi+0x38>
    14e8:	90 95       	com	r25
    14ea:	81 95       	neg	r24
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	08 95       	ret

000014f0 <isspace>:
    14f0:	91 11       	cpse	r25, r1
    14f2:	0e c0       	rjmp	.+28     	; 0x1510 <__ctype_isfalse>
    14f4:	80 32       	cpi	r24, 0x20	; 32
    14f6:	19 f0       	breq	.+6      	; 0x14fe <isspace+0xe>
    14f8:	89 50       	subi	r24, 0x09	; 9
    14fa:	85 50       	subi	r24, 0x05	; 5
    14fc:	d0 f7       	brcc	.-12     	; 0x14f2 <isspace+0x2>
    14fe:	08 95       	ret

00001500 <__mulhi_const_10>:
    1500:	7a e0       	ldi	r23, 0x0A	; 10
    1502:	97 9f       	mul	r25, r23
    1504:	90 2d       	mov	r25, r0
    1506:	87 9f       	mul	r24, r23
    1508:	80 2d       	mov	r24, r0
    150a:	91 0d       	add	r25, r1
    150c:	11 24       	eor	r1, r1
    150e:	08 95       	ret

00001510 <__ctype_isfalse>:
    1510:	99 27       	eor	r25, r25
    1512:	88 27       	eor	r24, r24

00001514 <__ctype_istrue>:
    1514:	08 95       	ret

00001516 <__mulsi3>:
    1516:	db 01       	movw	r26, r22
    1518:	8f 93       	push	r24
    151a:	9f 93       	push	r25
    151c:	2d d0       	rcall	.+90     	; 0x1578 <__muluhisi3>
    151e:	bf 91       	pop	r27
    1520:	af 91       	pop	r26
    1522:	a2 9f       	mul	r26, r18
    1524:	80 0d       	add	r24, r0
    1526:	91 1d       	adc	r25, r1
    1528:	a3 9f       	mul	r26, r19
    152a:	90 0d       	add	r25, r0
    152c:	b2 9f       	mul	r27, r18
    152e:	90 0d       	add	r25, r0
    1530:	11 24       	eor	r1, r1
    1532:	08 95       	ret

00001534 <__udivmodsi4>:
    1534:	a1 e2       	ldi	r26, 0x21	; 33
    1536:	1a 2e       	mov	r1, r26
    1538:	aa 1b       	sub	r26, r26
    153a:	bb 1b       	sub	r27, r27
    153c:	fd 01       	movw	r30, r26
    153e:	0d c0       	rjmp	.+26     	; 0x155a <__udivmodsi4_ep>

00001540 <__udivmodsi4_loop>:
    1540:	aa 1f       	adc	r26, r26
    1542:	bb 1f       	adc	r27, r27
    1544:	ee 1f       	adc	r30, r30
    1546:	ff 1f       	adc	r31, r31
    1548:	a2 17       	cp	r26, r18
    154a:	b3 07       	cpc	r27, r19
    154c:	e4 07       	cpc	r30, r20
    154e:	f5 07       	cpc	r31, r21
    1550:	20 f0       	brcs	.+8      	; 0x155a <__udivmodsi4_ep>
    1552:	a2 1b       	sub	r26, r18
    1554:	b3 0b       	sbc	r27, r19
    1556:	e4 0b       	sbc	r30, r20
    1558:	f5 0b       	sbc	r31, r21

0000155a <__udivmodsi4_ep>:
    155a:	66 1f       	adc	r22, r22
    155c:	77 1f       	adc	r23, r23
    155e:	88 1f       	adc	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	1a 94       	dec	r1
    1564:	69 f7       	brne	.-38     	; 0x1540 <__udivmodsi4_loop>
    1566:	60 95       	com	r22
    1568:	70 95       	com	r23
    156a:	80 95       	com	r24
    156c:	90 95       	com	r25
    156e:	9b 01       	movw	r18, r22
    1570:	ac 01       	movw	r20, r24
    1572:	bd 01       	movw	r22, r26
    1574:	cf 01       	movw	r24, r30
    1576:	08 95       	ret

00001578 <__muluhisi3>:
    1578:	40 d0       	rcall	.+128    	; 0x15fa <__umulhisi3>
    157a:	a5 9f       	mul	r26, r21
    157c:	90 0d       	add	r25, r0
    157e:	b4 9f       	mul	r27, r20
    1580:	90 0d       	add	r25, r0
    1582:	a4 9f       	mul	r26, r20
    1584:	80 0d       	add	r24, r0
    1586:	91 1d       	adc	r25, r1
    1588:	11 24       	eor	r1, r1
    158a:	08 95       	ret

0000158c <__prologue_saves__>:
    158c:	2f 92       	push	r2
    158e:	3f 92       	push	r3
    1590:	4f 92       	push	r4
    1592:	5f 92       	push	r5
    1594:	6f 92       	push	r6
    1596:	7f 92       	push	r7
    1598:	8f 92       	push	r8
    159a:	9f 92       	push	r9
    159c:	af 92       	push	r10
    159e:	bf 92       	push	r11
    15a0:	cf 92       	push	r12
    15a2:	df 92       	push	r13
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	ca 1b       	sub	r28, r26
    15b6:	db 0b       	sbc	r29, r27
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	09 94       	ijmp

000015c4 <__epilogue_restores__>:
    15c4:	2a 88       	ldd	r2, Y+18	; 0x12
    15c6:	39 88       	ldd	r3, Y+17	; 0x11
    15c8:	48 88       	ldd	r4, Y+16	; 0x10
    15ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    15cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    15ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    15d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    15d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    15d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    15d6:	b9 84       	ldd	r11, Y+9	; 0x09
    15d8:	c8 84       	ldd	r12, Y+8	; 0x08
    15da:	df 80       	ldd	r13, Y+7	; 0x07
    15dc:	ee 80       	ldd	r14, Y+6	; 0x06
    15de:	fd 80       	ldd	r15, Y+5	; 0x05
    15e0:	0c 81       	ldd	r16, Y+4	; 0x04
    15e2:	1b 81       	ldd	r17, Y+3	; 0x03
    15e4:	aa 81       	ldd	r26, Y+2	; 0x02
    15e6:	b9 81       	ldd	r27, Y+1	; 0x01
    15e8:	ce 0f       	add	r28, r30
    15ea:	d1 1d       	adc	r29, r1
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	ed 01       	movw	r28, r26
    15f8:	08 95       	ret

000015fa <__umulhisi3>:
    15fa:	a2 9f       	mul	r26, r18
    15fc:	b0 01       	movw	r22, r0
    15fe:	b3 9f       	mul	r27, r19
    1600:	c0 01       	movw	r24, r0
    1602:	a3 9f       	mul	r26, r19
    1604:	01 d0       	rcall	.+2      	; 0x1608 <__umulhisi3+0xe>
    1606:	b2 9f       	mul	r27, r18
    1608:	70 0d       	add	r23, r0
    160a:	81 1d       	adc	r24, r1
    160c:	11 24       	eor	r1, r1
    160e:	91 1d       	adc	r25, r1
    1610:	08 95       	ret

00001612 <_exit>:
    1612:	f8 94       	cli

00001614 <__stop_program>:
    1614:	ff cf       	rjmp	.-2      	; 0x1614 <__stop_program>
