   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	USART_Receive
  12               	USART_Receive:
  13               	.LFB12:
  14               		.file 1 "setup.c"
   1:setup.c       **** /*
   2:setup.c       ****  GBxCart RW
   3:setup.c       ****  PCB version: 1.1 or 1.2
   4:setup.c       ****  Firmware version: R15
   5:setup.c       ****  Author: Alex from insideGadgets (www.insidegadgets.com)
   6:setup.c       ****  Created: 7/11/2016
   7:setup.c       ****  Last Modified: 8/08/2019
   8:setup.c       ****  
   9:setup.c       ****  */
  10:setup.c       ****  
  11:setup.c       **** #ifndef cbi
  12:setup.c       **** #define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
  13:setup.c       **** #endif
  14:setup.c       **** #ifndef sbi
  15:setup.c       **** #define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
  16:setup.c       **** #endif
  17:setup.c       **** 
  18:setup.c       **** #ifndef NULL
  19:setup.c       **** #define NULL ((void *)0)
  20:setup.c       **** #endif
  21:setup.c       **** 
  22:setup.c       **** #define LOW 0
  23:setup.c       **** #define HIGH 1
  24:setup.c       **** #define false 0
  25:setup.c       **** #define true 1
  26:setup.c       **** 
  27:setup.c       **** #define SWITCH_DETECT PD2
  28:setup.c       **** #define ACTIVITY_LED PD3
  29:setup.c       **** #define LED_5V PD7
  30:setup.c       **** #define LED_3V PE0
  31:setup.c       **** 
  32:setup.c       **** #define WR_PIN PD6
  33:setup.c       **** #define RD_PIN PD5
  34:setup.c       **** #define CS_MREQ_PIN PD4
  35:setup.c       **** #define CS2_PIN PE2
  36:setup.c       **** #define AUDIO_PIN PE1
  37:setup.c       **** 
  38:setup.c       **** #define wrPin_high	PORTD |= (1<<WR_PIN);
  39:setup.c       **** #define wrPin_low		PORTD &= ~(1<<WR_PIN);
  40:setup.c       **** #define rdPin_high	PORTD |= (1<<RD_PIN);
  41:setup.c       **** #define rdPin_low		PORTD &= ~(1<<RD_PIN);
  42:setup.c       **** #define cs_mreqPin_high		PORTD |= (1<<CS_MREQ_PIN);
  43:setup.c       **** #define cs_mreqPin_low		PORTD &= ~(1<<CS_MREQ_PIN);
  44:setup.c       **** #define cs2Pin_high		PORTE |= (1<<CS2_PIN);
  45:setup.c       **** #define cs2Pin_low		PORTE &= ~(1<<CS2_PIN);
  46:setup.c       **** #define audioPin_high	PORTE |= (1<<AUDIO_PIN);
  47:setup.c       **** #define audioPin_low		PORTE &= ~(1<<AUDIO_PIN);
  48:setup.c       **** 
  49:setup.c       **** #define GB_MODE 1
  50:setup.c       **** #define GBA_MODE 2
  51:setup.c       **** 
  52:setup.c       **** // GB/GBC
  53:setup.c       **** #define PORT_ADDR7_0 PORTB
  54:setup.c       **** #define PORT_ADDR15_8 PORTA
  55:setup.c       **** #define PORT_DATA7_0 PORTC
  56:setup.c       **** 
  57:setup.c       **** #define DDR_ADDR7_0 DDRB
  58:setup.c       **** #define DDR_ADDR15_8 DDRA
  59:setup.c       **** #define DDR_DATA7_0 DDRC
  60:setup.c       **** 
  61:setup.c       **** #define PIN_ADDR7_0 PINB
  62:setup.c       **** #define PIN_ADDR15_8 PINA
  63:setup.c       **** #define PIN_DATA7_0 PINC
  64:setup.c       **** 
  65:setup.c       **** #define BANK_WRITE 0
  66:setup.c       **** #define MEMORY_WRITE 1
  67:setup.c       **** 
  68:setup.c       **** // GBA
  69:setup.c       **** #define EEPROM_WRITE 1
  70:setup.c       **** #define EEPROM_READ 0
  71:setup.c       **** 
  72:setup.c       **** #define EEPROM_NONE 0
  73:setup.c       **** #define EEPROM_4KBIT 1
  74:setup.c       **** #define EEPROM_64KBIT 2
  75:setup.c       **** 
  76:setup.c       **** #define AD0 PB0
  77:setup.c       **** #define ad0Pin_high		PORTB |= (1<<AD0);
  78:setup.c       **** #define ad0Pin_low		PORTB &= ~(1<<AD0);
  79:setup.c       **** 
  80:setup.c       **** #define A23 PC7
  81:setup.c       **** #define a23Pin_high		PORTC |= (1<<A23);
  82:setup.c       **** #define a23Pin_low		PORTC &= ~(1<<A23);
  83:setup.c       **** 
  84:setup.c       **** #define GBA_DDR_ROM_ADDR7_0 DDRB
  85:setup.c       **** #define GBA_DDR_ROM_ADDR15_8 DDRA
  86:setup.c       **** #define GBA_DDR_ROM_ADDR23_16 DDRC
  87:setup.c       **** #define GBA_DDR_ROM_DATA7_0 DDRB
  88:setup.c       **** #define GBA_DDR_ROM_DATA15_8 DDRA
  89:setup.c       **** #define GBA_DDR_RAM_DATA7_0 DDRC
  90:setup.c       **** #define GBA_DDR_EEPROM_DATA7_0 DDRB
  91:setup.c       **** 
  92:setup.c       **** #define GBA_PORT_ROM_ADDR7_0 PORTB
  93:setup.c       **** #define GBA_PORT_ROM_ADDR15_8 PORTA
  94:setup.c       **** #define GBA_PORT_ROM_ADDR23_16 PORTC
  95:setup.c       **** #define GBA_PORT_ROM_DATA7_0 PORTB
  96:setup.c       **** #define GBA_PORT_ROM_DATA15_8 PORTA
  97:setup.c       **** #define GBA_PORT_RAM_DATA7_0 PORTC
  98:setup.c       **** #define GBA_PORT_EEPROM_DATA7_0 PORTB
  99:setup.c       **** 
 100:setup.c       **** #define GBA_PIN_ROM_DATA7_0 PINB
 101:setup.c       **** #define GBA_PIN_ROM_DATA15_8 PINA
 102:setup.c       **** #define GBA_PIN_RAM_DATA7_0 PINC
 103:setup.c       **** #define GBA_PIN_EEPROM_DATA7_0 PINB
 104:setup.c       **** 
 105:setup.c       **** // GB/GBC commands
 106:setup.c       **** #define SET_START_ADDRESS 'A'
 107:setup.c       **** #define READ_ROM_RAM 'R'
 108:setup.c       **** #define WRITE_RAM 'W'
 109:setup.c       **** #define SET_BANK 'B'
 110:setup.c       **** #define GB_CART_MODE 'G'
 111:setup.c       **** 
 112:setup.c       **** // GBA commands
 113:setup.c       **** #define GBA_READ_ROM 'r'
 114:setup.c       **** #define GBA_READ_ROM_256BYTE 'j'
 115:setup.c       **** #define GBA_READ_SRAM 'm'
 116:setup.c       **** #define GBA_WRITE_SRAM 'w'
 117:setup.c       **** #define GBA_WRITE_ONE_BYTE_SRAM 'o'
 118:setup.c       **** #define GBA_CART_MODE 'g'
 119:setup.c       **** 
 120:setup.c       **** #define GBA_FLASH_READ_ID 'i'
 121:setup.c       **** #define GBA_FLASH_SET_BANK 'k'
 122:setup.c       **** #define GBA_FLASH_4K_SECTOR_ERASE 's'
 123:setup.c       **** #define GBA_FLASH_WRITE_BYTE 'b'
 124:setup.c       **** #define GBA_FLASH_WRITE_ATMEL 'a'
 125:setup.c       **** 
 126:setup.c       **** #define GBA_SET_EEPROM_SIZE 'S'
 127:setup.c       **** #define GBA_READ_EEPROM 'e'
 128:setup.c       **** #define GBA_WRITE_EEPROM 'p'
 129:setup.c       **** 
 130:setup.c       **** // Flash Cart commands
 131:setup.c       **** #define GB_FLASH_WE_PIN 'P'
 132:setup.c       **** 	#define WE_AS_AUDIO_PIN 'A'
 133:setup.c       **** 	#define WE_AS_WR_PIN 'W'
 134:setup.c       **** 
 135:setup.c       **** #define GB_FLASH_PROGRAM_METHOD 'E'
 136:setup.c       **** 	#define GB_FLASH_PROGRAM_555 0
 137:setup.c       **** 	#define GB_FLASH_PROGRAM_AAA 1
 138:setup.c       **** 	#define GB_FLASH_PROGRAM_555_BIT01_SWAPPED 2
 139:setup.c       **** 	#define GB_FLASH_PROGRAM_AAA_BIT01_SWAPPED 3
 140:setup.c       **** 	#define GB_FLASH_PROGRAM_5555 4
 141:setup.c       **** 
 142:setup.c       **** #define GB_FLASH_WRITE_BYTE 'F'
 143:setup.c       **** #define GB_FLASH_WRITE_BUFFERED_32BYTE 'Y'
 144:setup.c       **** #define GB_FLASH_WRITE_64BYTE 'T'
 145:setup.c       **** #define GB_FLASH_WRITE_256BYTE 'X'
 146:setup.c       **** #define GB_FLASH_WRITE_NP_128BYTE 'Z'
 147:setup.c       **** 
 148:setup.c       **** #define GB_FLASH_BANK_1_COMMAND_WRITES 'N'
 149:setup.c       **** 
 150:setup.c       **** #define GBA_FLASH_CART_WRITE_BYTE 'n'
 151:setup.c       **** #define GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 'q'
 152:setup.c       **** #define GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1 't'
 153:setup.c       **** #define GBA_FLASH_WRITE_256BYTE 'f'
 154:setup.c       **** #define GBA_FLASH_WRITE_INTEL_64BYTE 'l'
 155:setup.c       **** #define GBA_FLASH_WRITE_INTEL_64BYTE_WORD 'u'
 156:setup.c       **** 
 157:setup.c       **** #define D0D1_NOT_SWAPPED 0
 158:setup.c       **** #define D0D1_SWAPPED 1
 159:setup.c       **** 
 160:setup.c       **** // General commands
 161:setup.c       **** #define SEND_ACK '1'
 162:setup.c       **** #define CART_MODE 'C'
 163:setup.c       **** #define SET_INPUT 'I'
 164:setup.c       **** #define SET_OUTPUT 'O'
 165:setup.c       **** #define SET_OUTPUT_LOW 'L'
 166:setup.c       **** #define SET_OUTPUT_HIGH 'H'
 167:setup.c       **** #define READ_INPUT 'D'
 168:setup.c       **** #define RESET_COMMON_LINES 'M'
 169:setup.c       **** #define READ_FIRMWARE_VERSION 'V'
 170:setup.c       **** #define READ_PCB_VERSION 'h'
 171:setup.c       **** 
 172:setup.c       **** #define RESET_AVR '*'
 173:setup.c       **** #define RESET_VALUE 0x7E5E1
 174:setup.c       **** 
 175:setup.c       **** 
 176:setup.c       **** char receivedBuffer[256];
 177:setup.c       **** char receivedChar;
 178:setup.c       **** uint8_t eepromBuffer[8];
 179:setup.c       **** uint8_t flashChipIdBuffer[2];
 180:setup.c       **** 
 181:setup.c       **** char flashWriteWePin;
 182:setup.c       **** uint16_t flashWriteCycle[3][2];
 183:setup.c       **** uint8_t flashBank1CommandWrites = 0;
 184:setup.c       **** uint8_t lastBankAccessed = 0;
 185:setup.c       **** 
 186:setup.c       **** 
 187:setup.c       **** // Receive USART data
 188:setup.c       **** uint8_t USART_Receive(void) {
  15               		.loc 1 188 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.L2:
 189:setup.c       **** 	while ( !(UCSRA & (1<<RXC)) ); // Wait for data to be received
  22               		.loc 1 189 0 discriminator 1
  23 0000 5F9B      		sbis 0xb,7
  24 0002 00C0      		rjmp .L2
 190:setup.c       **** 	return UDR; // Get and return received data from buffer
  25               		.loc 1 190 0
  26 0004 8CB1      		in r24,0xc
 191:setup.c       **** }
  27               		.loc 1 191 0
  28 0006 0895      		ret
  29               		.cfi_endproc
  30               	.LFE12:
  32               	.global	USART_Transmit
  34               	USART_Transmit:
  35               	.LFB13:
 192:setup.c       **** 
 193:setup.c       **** // Transmit USART data
 194:setup.c       **** void USART_Transmit(unsigned char data) {
  36               		.loc 1 194 0
  37               		.cfi_startproc
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 0 */
  41               	.L__stack_usage = 0
  42               	.LVL0:
  43               	.L6:
 195:setup.c       **** 	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer
  44               		.loc 1 195 0 discriminator 1
  45 0008 5D9B      		sbis 0xb,5
  46 000a 00C0      		rjmp .L6
 196:setup.c       **** 	UDR = data;
  47               		.loc 1 196 0
  48 000c 8CB9      		out 0xc,r24
  49 000e 0895      		ret
  50               		.cfi_endproc
  51               	.LFE13:
  53               	.global	usart_read_bytes
  55               	usart_read_bytes:
  56               	.LFB14:
 197:setup.c       **** }
 198:setup.c       **** 
 199:setup.c       **** // Read 1-256 bytes from the USART 
 200:setup.c       **** void usart_read_bytes(int count) {
  57               		.loc 1 200 0
  58               		.cfi_startproc
  59               	.LVL1:
  60 0010 0F93      		push r16
  61               	.LCFI0:
  62               		.cfi_def_cfa_offset 3
  63               		.cfi_offset 16, -2
  64 0012 1F93      		push r17
  65               	.LCFI1:
  66               		.cfi_def_cfa_offset 4
  67               		.cfi_offset 17, -3
  68 0014 CF93      		push r28
  69               	.LCFI2:
  70               		.cfi_def_cfa_offset 5
  71               		.cfi_offset 28, -4
  72 0016 DF93      		push r29
  73               	.LCFI3:
  74               		.cfi_def_cfa_offset 6
  75               		.cfi_offset 29, -5
  76               	/* prologue: function */
  77               	/* frame size = 0 */
  78               	/* stack size = 4 */
  79               	.L__stack_usage = 4
  80 0018 8C01      		movw r16,r24
  81               	.LVL2:
  82               	.LBB127:
 201:setup.c       **** 	for (int x = 0; x < count; x++) {
  83               		.loc 1 201 0
  84 001a C0E0      		ldi r28,lo8(receivedBuffer)
  85 001c D0E0      		ldi r29,hi8(receivedBuffer)
  86               	.LVL3:
  87               	.L10:
  88               		.loc 1 201 0 is_stmt 0 discriminator 1
  89 001e CE01      		movw r24,r28
  90 0020 8050      		subi r24,lo8(receivedBuffer)
  91 0022 9040      		sbci r25,hi8(receivedBuffer)
  92               	.LVL4:
  93 0024 8017      		cp r24,r16
  94 0026 9107      		cpc r25,r17
  95 0028 04F4      		brge .L12
 202:setup.c       **** 		receivedBuffer[x] = USART_Receive();
  96               		.loc 1 202 0 is_stmt 1 discriminator 3
  97 002a 00D0      		rcall USART_Receive
  98               	.LVL5:
  99 002c 8993      		st Y+,r24
 100               	.LVL6:
 101 002e 00C0      		rjmp .L10
 102               	.LVL7:
 103               	.L12:
 104               	/* epilogue start */
 105               	.LBE127:
 203:setup.c       **** 	}
 204:setup.c       **** }
 106               		.loc 1 204 0
 107 0030 DF91      		pop r29
 108 0032 CF91      		pop r28
 109 0034 1F91      		pop r17
 110 0036 0F91      		pop r16
 111               	.LVL8:
 112 0038 0895      		ret
 113               		.cfi_endproc
 114               	.LFE14:
 116               	.global	usart_read_chars
 118               	usart_read_chars:
 119               	.LFB15:
 205:setup.c       **** 
 206:setup.c       **** // Read the USART until a 0 (string terminator byte) is received
 207:setup.c       **** void usart_read_chars(void) {
 120               		.loc 1 207 0
 121               		.cfi_startproc
 122 003a CF93      		push r28
 123               	.LCFI4:
 124               		.cfi_def_cfa_offset 3
 125               		.cfi_offset 28, -2
 126 003c DF93      		push r29
 127               	.LCFI5:
 128               		.cfi_def_cfa_offset 4
 129               		.cfi_offset 29, -3
 130               	/* prologue: function */
 131               	/* frame size = 0 */
 132               	/* stack size = 2 */
 133               	.L__stack_usage = 2
 134               	.LVL9:
 135 003e C0E0      		ldi r28,lo8(receivedBuffer)
 136 0040 D0E0      		ldi r29,hi8(receivedBuffer)
 137               	.LVL10:
 138               	.L14:
 208:setup.c       **** 	int x = 0;
 209:setup.c       **** 	while (1) {
 210:setup.c       **** 		receivedBuffer[x] = USART_Receive();
 139               		.loc 1 210 0
 140 0042 00D0      		rcall USART_Receive
 141               	.LVL11:
 142 0044 8993      		st Y+,r24
 143               	.LVL12:
 211:setup.c       **** 		if (receivedBuffer[x] == 0) {
 144               		.loc 1 211 0
 145 0046 8111      		cpse r24,__zero_reg__
 146 0048 00C0      		rjmp .L14
 147               	/* epilogue start */
 212:setup.c       **** 			break;
 213:setup.c       **** 		}
 214:setup.c       **** 		x++;
 215:setup.c       **** 	}
 216:setup.c       **** }
 148               		.loc 1 216 0
 149 004a DF91      		pop r29
 150 004c CF91      		pop r28
 151               	.LVL13:
 152 004e 0895      		ret
 153               		.cfi_endproc
 154               	.LFE15:
 156               	.global	rd_wr_csmreq_cs2_reset
 158               	rd_wr_csmreq_cs2_reset:
 159               	.LFB16:
 217:setup.c       **** 
 218:setup.c       **** // Turn RD, WR, CS/MREQ and CS2 to high so they are deselected (reset state)
 219:setup.c       **** void rd_wr_csmreq_cs2_reset(void) {
 160               		.loc 1 219 0
 161               		.cfi_startproc
 162               	/* prologue: function */
 163               	/* frame size = 0 */
 164               	/* stack size = 0 */
 165               	.L__stack_usage = 0
 220:setup.c       **** 	cs2Pin_high; // CS2 off
 166               		.loc 1 220 0
 167 0050 3A9A      		sbi 0x7,2
 221:setup.c       **** 	cs_mreqPin_high; // CS/MREQ off
 168               		.loc 1 221 0
 169 0052 949A      		sbi 0x12,4
 222:setup.c       **** 	rdPin_high; // RD off
 170               		.loc 1 222 0
 171 0054 959A      		sbi 0x12,5
 223:setup.c       **** 	wrPin_high; // WR off
 172               		.loc 1 223 0
 173 0056 969A      		sbi 0x12,6
 174 0058 0895      		ret
 175               		.cfi_endproc
 176               	.LFE16:
 178               	.global	gb_mode
 180               	gb_mode:
 181               	.LFB17:
 224:setup.c       **** }
 225:setup.c       **** 
 226:setup.c       **** 
 227:setup.c       **** 
 228:setup.c       **** // ****** Gameboy / Gameboy Colour functions ******
 229:setup.c       **** 
 230:setup.c       **** // Set Gameboy mode
 231:setup.c       **** void gb_mode(void) {
 182               		.loc 1 231 0
 183               		.cfi_startproc
 184               	/* prologue: function */
 185               	/* frame size = 0 */
 186               	/* stack size = 0 */
 187               	.L__stack_usage = 0
 232:setup.c       **** 	// Set inputs
 233:setup.c       **** 	PORT_DATA7_0 = 0;
 188               		.loc 1 233 0
 189 005a 15BA      		out 0x15,__zero_reg__
 234:setup.c       **** 	DDR_DATA7_0 = 0;
 190               		.loc 1 234 0
 191 005c 14BA      		out 0x14,__zero_reg__
 235:setup.c       **** 	
 236:setup.c       **** 	// Set outputs
 237:setup.c       **** 	PORT_ADDR7_0 = 0;
 192               		.loc 1 237 0
 193 005e 18BA      		out 0x18,__zero_reg__
 238:setup.c       **** 	PORT_ADDR15_8 = 0;
 194               		.loc 1 238 0
 195 0060 1BBA      		out 0x1b,__zero_reg__
 239:setup.c       **** 	DDR_ADDR7_0 = 0xFF;
 196               		.loc 1 239 0
 197 0062 8FEF      		ldi r24,lo8(-1)
 198 0064 87BB      		out 0x17,r24
 240:setup.c       **** 	DDR_ADDR15_8 = 0xFF;
 199               		.loc 1 240 0
 200 0066 8ABB      		out 0x1a,r24
 201 0068 0895      		ret
 202               		.cfi_endproc
 203               	.LFE17:
 205               	.global	set_16bit_address
 207               	set_16bit_address:
 208               	.LFB18:
 241:setup.c       **** }
 242:setup.c       **** 
 243:setup.c       **** // Set the 16 bit address on A15-0
 244:setup.c       **** void set_16bit_address(uint16_t address) {
 209               		.loc 1 244 0
 210               		.cfi_startproc
 211               	.LVL14:
 212               	/* prologue: function */
 213               	/* frame size = 0 */
 214               	/* stack size = 0 */
 215               	.L__stack_usage = 0
 245:setup.c       **** 	PORT_ADDR15_8 = (address >> 8);
 216               		.loc 1 245 0
 217 006a 9BBB      		out 0x1b,r25
 246:setup.c       **** 	PORT_ADDR7_0 = (address & 0xFF);
 218               		.loc 1 246 0
 219 006c 88BB      		out 0x18,r24
 220 006e 0895      		ret
 221               		.cfi_endproc
 222               	.LFE18:
 224               	.global	read_8bit_data
 226               	read_8bit_data:
 227               	.LFB19:
 247:setup.c       **** }
 248:setup.c       **** 
 249:setup.c       **** // Set the address and read a byte from the 8 bit data line
 250:setup.c       **** uint8_t read_8bit_data(uint16_t address) {
 228               		.loc 1 250 0
 229               		.cfi_startproc
 230               	.LVL15:
 231               	/* prologue: function */
 232               	/* frame size = 0 */
 233               	/* stack size = 0 */
 234               	.L__stack_usage = 0
 251:setup.c       **** 	set_16bit_address(address);
 235               		.loc 1 251 0
 236 0070 00D0      		rcall set_16bit_address
 237               	.LVL16:
 252:setup.c       **** 	
 253:setup.c       **** 	cs_mreqPin_low;
 238               		.loc 1 253 0
 239 0072 9498      		cbi 0x12,4
 254:setup.c       **** 	rdPin_low;
 240               		.loc 1 254 0
 241 0074 9598      		cbi 0x12,5
 255:setup.c       **** 	
 256:setup.c       **** 	asm volatile("nop"); // Delay a little (minimum needed is 1 nops, 2 nops for GB camera)
 242               		.loc 1 256 0
 243               	/* #APP */
 244               	 ;  256 "setup.c" 1
 245 0076 0000      		nop
 246               	 ;  0 "" 2
 257:setup.c       **** 	asm volatile("nop");
 247               		.loc 1 257 0
 248               	 ;  257 "setup.c" 1
 249 0078 0000      		nop
 250               	 ;  0 "" 2
 258:setup.c       **** 	uint8_t data = PIN_DATA7_0; // Read data
 251               		.loc 1 258 0
 252               	/* #NOAPP */
 253 007a 83B3      		in r24,0x13
 254               	.LVL17:
 259:setup.c       **** 	
 260:setup.c       **** 	rdPin_high;
 255               		.loc 1 260 0
 256 007c 959A      		sbi 0x12,5
 261:setup.c       **** 	cs_mreqPin_high;
 257               		.loc 1 261 0
 258 007e 949A      		sbi 0x12,4
 262:setup.c       **** 	
 263:setup.c       **** 	return data;
 264:setup.c       **** }
 259               		.loc 1 264 0
 260 0080 0895      		ret
 261               		.cfi_endproc
 262               	.LFE19:
 264               	.global	write_8bit_data
 266               	write_8bit_data:
 267               	.LFB20:
 265:setup.c       **** 
 266:setup.c       **** // Set the address and write a byte to the 8 bit data line and pulse cs/mREQ if writing to RAM
 267:setup.c       **** void write_8bit_data(uint16_t address, uint8_t data, uint8_t type) {
 268               		.loc 1 267 0
 269               		.cfi_startproc
 270               	.LVL18:
 271 0082 CF93      		push r28
 272               	.LCFI6:
 273               		.cfi_def_cfa_offset 3
 274               		.cfi_offset 28, -2
 275 0084 DF93      		push r29
 276               	.LCFI7:
 277               		.cfi_def_cfa_offset 4
 278               		.cfi_offset 29, -3
 279               	/* prologue: function */
 280               	/* frame size = 0 */
 281               	/* stack size = 2 */
 282               	.L__stack_usage = 2
 283 0086 D62F      		mov r29,r22
 284 0088 C42F      		mov r28,r20
 268:setup.c       **** 	set_16bit_address(address);
 285               		.loc 1 268 0
 286 008a 00D0      		rcall set_16bit_address
 287               	.LVL19:
 269:setup.c       **** 	
 270:setup.c       **** 	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
 288               		.loc 1 270 0
 289 008c 8FEF      		ldi r24,lo8(-1)
 290 008e 84BB      		out 0x14,r24
 271:setup.c       **** 	PORT_DATA7_0 = data; // Set data
 291               		.loc 1 271 0
 292 0090 D5BB      		out 0x15,r29
 272:setup.c       **** 	
 273:setup.c       **** 	// Pulse WR and mREQ if the type matches
 274:setup.c       **** 	wrPin_low;
 293               		.loc 1 274 0
 294 0092 9698      		cbi 0x12,6
 275:setup.c       **** 	if (type == MEMORY_WRITE) {
 295               		.loc 1 275 0
 296 0094 C130      		cpi r28,lo8(1)
 297 0096 01F4      		brne .L21
 276:setup.c       **** 		cs_mreqPin_low;
 298               		.loc 1 276 0
 299 0098 9498      		cbi 0x12,4
 300               	.L21:
 277:setup.c       **** 	}
 278:setup.c       **** 	
 279:setup.c       **** 	asm volatile("nop");
 301               		.loc 1 279 0
 302               	/* #APP */
 303               	 ;  279 "setup.c" 1
 304 009a 0000      		nop
 305               	 ;  0 "" 2
 280:setup.c       **** 	
 281:setup.c       **** 	if (type == MEMORY_WRITE) {
 306               		.loc 1 281 0
 307               	/* #NOAPP */
 308 009c C130      		cpi r28,lo8(1)
 309 009e 01F4      		brne .L22
 282:setup.c       **** 		cs_mreqPin_high;
 310               		.loc 1 282 0
 311 00a0 949A      		sbi 0x12,4
 312               	.L22:
 283:setup.c       **** 	}
 284:setup.c       **** 	wrPin_high;
 313               		.loc 1 284 0
 314 00a2 969A      		sbi 0x12,6
 285:setup.c       **** 	
 286:setup.c       **** 	// Clear data outputs and set data pins as inputs
 287:setup.c       **** 	PORT_DATA7_0 = 0;
 315               		.loc 1 287 0
 316 00a4 15BA      		out 0x15,__zero_reg__
 288:setup.c       **** 	DDR_DATA7_0 = 0;
 317               		.loc 1 288 0
 318 00a6 14BA      		out 0x14,__zero_reg__
 319               	/* epilogue start */
 289:setup.c       **** }
 320               		.loc 1 289 0
 321 00a8 DF91      		pop r29
 322               	.LVL20:
 323 00aa CF91      		pop r28
 324               	.LVL21:
 325 00ac 0895      		ret
 326               		.cfi_endproc
 327               	.LFE20:
 329               	.global	gba_mode
 331               	gba_mode:
 332               	.LFB21:
 290:setup.c       **** 
 291:setup.c       **** 
 292:setup.c       **** 
 293:setup.c       **** // ****** Gameboy Advance functions ****** 
 294:setup.c       **** 
 295:setup.c       **** // Set GBA mode
 296:setup.c       **** void gba_mode(void) {
 333               		.loc 1 296 0
 334               		.cfi_startproc
 335               	/* prologue: function */
 336               	/* frame size = 0 */
 337               	/* stack size = 0 */
 338               	.L__stack_usage = 0
 297:setup.c       **** 	// Set outputs for reading ROM addresses as default
 298:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0;
 339               		.loc 1 298 0
 340 00ae 18BA      		out 0x18,__zero_reg__
 299:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0;
 341               		.loc 1 299 0
 342 00b0 1BBA      		out 0x1b,__zero_reg__
 300:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0;
 343               		.loc 1 300 0
 344 00b2 15BA      		out 0x15,__zero_reg__
 301:setup.c       **** 	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 345               		.loc 1 301 0
 346 00b4 8FEF      		ldi r24,lo8(-1)
 347 00b6 87BB      		out 0x17,r24
 302:setup.c       **** 	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 348               		.loc 1 302 0
 349 00b8 8ABB      		out 0x1a,r24
 303:setup.c       **** 	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 350               		.loc 1 303 0
 351 00ba 84BB      		out 0x14,r24
 352 00bc 0895      		ret
 353               		.cfi_endproc
 354               	.LFE21:
 356               	.global	gba_set_24bit_address
 358               	gba_set_24bit_address:
 359               	.LFB22:
 304:setup.c       **** }
 305:setup.c       **** 
 306:setup.c       **** // Set the 24 bit address on A23-0
 307:setup.c       **** void gba_set_24bit_address(uint32_t address) {	
 360               		.loc 1 307 0
 361               		.cfi_startproc
 362               	.LVL22:
 363 00be 0F93      		push r16
 364               	.LCFI8:
 365               		.cfi_def_cfa_offset 3
 366               		.cfi_offset 16, -2
 367 00c0 1F93      		push r17
 368               	.LCFI9:
 369               		.cfi_def_cfa_offset 4
 370               		.cfi_offset 17, -3
 371               	/* prologue: function */
 372               	/* frame size = 0 */
 373               	/* stack size = 2 */
 374               	.L__stack_usage = 2
 308:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0; // Set 0-23 address lines low and set as outputs
 375               		.loc 1 308 0
 376 00c2 15BA      		out 0x15,__zero_reg__
 309:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0;
 377               		.loc 1 309 0
 378 00c4 1BBA      		out 0x1b,__zero_reg__
 310:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0;
 379               		.loc 1 310 0
 380 00c6 18BA      		out 0x18,__zero_reg__
 311:setup.c       **** 	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 381               		.loc 1 311 0
 382 00c8 2FEF      		ldi r18,lo8(-1)
 383 00ca 24BB      		out 0x14,r18
 312:setup.c       **** 	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 384               		.loc 1 312 0
 385 00cc 2ABB      		out 0x1a,r18
 313:setup.c       **** 	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 386               		.loc 1 313 0
 387 00ce 27BB      		out 0x17,r18
 314:setup.c       **** 	
 315:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
 388               		.loc 1 315 0
 389 00d0 8C01      		movw r16,r24
 390 00d2 2227      		clr r18
 391 00d4 3327      		clr r19
 392 00d6 05BB      		out 0x15,r16
 316:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
 393               		.loc 1 316 0
 394 00d8 072F      		mov r16,r23
 395 00da 182F      		mov r17,r24
 396 00dc 292F      		mov r18,r25
 397 00de 3327      		clr r19
 398 00e0 0BBB      		out 0x1b,r16
 317:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
 399               		.loc 1 317 0
 400 00e2 68BB      		out 0x18,r22
 401               	/* epilogue start */
 318:setup.c       **** }
 402               		.loc 1 318 0
 403 00e4 1F91      		pop r17
 404 00e6 0F91      		pop r16
 405 00e8 0895      		ret
 406               		.cfi_endproc
 407               	.LFE22:
 409               	.global	gba_read_16bit_data
 411               	gba_read_16bit_data:
 412               	.LFB23:
 319:setup.c       **** 
 320:setup.c       **** 
 321:setup.c       **** 
 322:setup.c       **** // ---------- ROM/SRAM ----------
 323:setup.c       **** 
 324:setup.c       **** // Read a byte from the 16 bit data line non-sequentially
 325:setup.c       **** uint16_t gba_read_16bit_data(uint32_t address) {
 413               		.loc 1 325 0
 414               		.cfi_startproc
 415               	.LVL23:
 416               	/* prologue: function */
 417               	/* frame size = 0 */
 418               	/* stack size = 0 */
 419               	.L__stack_usage = 0
 326:setup.c       **** 	gba_set_24bit_address(address);
 420               		.loc 1 326 0
 421 00ea 00D0      		rcall gba_set_24bit_address
 422               	.LVL24:
 327:setup.c       **** 	
 328:setup.c       **** 	cs_mreqPin_low;
 423               		.loc 1 328 0
 424 00ec 9498      		cbi 0x12,4
 329:setup.c       **** 	
 330:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0; // Set A16-A0 address lines low and set as inputs for the data to be re
 425               		.loc 1 330 0
 426 00ee 1BBA      		out 0x1b,__zero_reg__
 331:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0;
 427               		.loc 1 331 0
 428 00f0 18BA      		out 0x18,__zero_reg__
 332:setup.c       **** 	GBA_DDR_ROM_ADDR15_8 = 0;
 429               		.loc 1 332 0
 430 00f2 1ABA      		out 0x1a,__zero_reg__
 333:setup.c       **** 	GBA_DDR_ROM_ADDR7_0 = 0;
 431               		.loc 1 333 0
 432 00f4 17BA      		out 0x17,__zero_reg__
 334:setup.c       **** 	
 335:setup.c       **** 	rdPin_low;
 433               		.loc 1 335 0
 434 00f6 9598      		cbi 0x12,5
 336:setup.c       **** 	asm volatile("nop");
 435               		.loc 1 336 0
 436               	/* #APP */
 437               	 ;  336 "setup.c" 1
 438 00f8 0000      		nop
 439               	 ;  0 "" 2
 337:setup.c       **** 	
 338:setup.c       **** 	uint16_t data = (GBA_PIN_ROM_DATA15_8 << 8) | GBA_PIN_ROM_DATA7_0; // Read data
 440               		.loc 1 338 0
 441               	/* #NOAPP */
 442 00fa 29B3      		in r18,0x19
 443 00fc 86B3      		in r24,0x16
 444               	.LVL25:
 339:setup.c       **** 	
 340:setup.c       **** 	rdPin_high;
 445               		.loc 1 340 0
 446 00fe 959A      		sbi 0x12,5
 341:setup.c       **** 	cs_mreqPin_high;
 447               		.loc 1 341 0
 448 0100 949A      		sbi 0x12,4
 342:setup.c       **** 	
 343:setup.c       **** 	return data;
 449               		.loc 1 343 0
 450 0102 90E0      		ldi r25,0
 344:setup.c       **** }
 451               		.loc 1 344 0
 452 0104 922B      		or r25,r18
 453 0106 0895      		ret
 454               		.cfi_endproc
 455               	.LFE23:
 457               	.global	gba_read_ram_8bit_data
 459               	gba_read_ram_8bit_data:
 460               	.LFB24:
 345:setup.c       **** 
 346:setup.c       **** // Set the address and read a byte from the 8 bit data line
 347:setup.c       **** uint8_t gba_read_ram_8bit_data(uint16_t address) {
 461               		.loc 1 347 0
 462               		.cfi_startproc
 463               	.LVL26:
 464               	/* prologue: function */
 465               	/* frame size = 0 */
 466               	/* stack size = 0 */
 467               	.L__stack_usage = 0
 348:setup.c       **** 	set_16bit_address(address);
 468               		.loc 1 348 0
 469 0108 00D0      		rcall set_16bit_address
 470               	.LVL27:
 349:setup.c       **** 	
 350:setup.c       **** 	rdPin_low;
 471               		.loc 1 350 0
 472 010a 9598      		cbi 0x12,5
 351:setup.c       **** 	cs2Pin_low; // CS2 pin low for SRAM/Flash select
 473               		.loc 1 351 0
 474 010c 3A98      		cbi 0x7,2
 352:setup.c       **** 	
 353:setup.c       **** 	asm volatile("nop"); // Delay a little (minimum needed is 2)
 475               		.loc 1 353 0
 476               	/* #APP */
 477               	 ;  353 "setup.c" 1
 478 010e 0000      		nop
 479               	 ;  0 "" 2
 354:setup.c       **** 	asm volatile("nop");
 480               		.loc 1 354 0
 481               	 ;  354 "setup.c" 1
 482 0110 0000      		nop
 483               	 ;  0 "" 2
 355:setup.c       **** 	
 356:setup.c       **** 	uint8_t data = GBA_PIN_RAM_DATA7_0; // Read data
 484               		.loc 1 356 0
 485               	/* #NOAPP */
 486 0112 83B3      		in r24,0x13
 487               	.LVL28:
 357:setup.c       **** 	
 358:setup.c       **** 	cs2Pin_high;
 488               		.loc 1 358 0
 489 0114 3A9A      		sbi 0x7,2
 359:setup.c       **** 	rdPin_high;
 490               		.loc 1 359 0
 491 0116 959A      		sbi 0x12,5
 360:setup.c       **** 	
 361:setup.c       **** 	return data;
 362:setup.c       **** }
 492               		.loc 1 362 0
 493 0118 0895      		ret
 494               		.cfi_endproc
 495               	.LFE24:
 497               	.global	gba_write_ram_8bit_data
 499               	gba_write_ram_8bit_data:
 500               	.LFB25:
 363:setup.c       **** 
 364:setup.c       **** // Set the address and write a byte to the 8 bit data line 
 365:setup.c       **** void gba_write_ram_8bit_data(uint16_t address, uint8_t data) {
 501               		.loc 1 365 0
 502               		.cfi_startproc
 503               	.LVL29:
 504 011a CF93      		push r28
 505               	.LCFI10:
 506               		.cfi_def_cfa_offset 3
 507               		.cfi_offset 28, -2
 508               	/* prologue: function */
 509               	/* frame size = 0 */
 510               	/* stack size = 1 */
 511               	.L__stack_usage = 1
 512 011c C62F      		mov r28,r22
 366:setup.c       **** 	set_16bit_address(address);
 513               		.loc 1 366 0
 514 011e 00D0      		rcall set_16bit_address
 515               	.LVL30:
 367:setup.c       **** 	
 368:setup.c       **** 	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
 516               		.loc 1 368 0
 517 0120 8FEF      		ldi r24,lo8(-1)
 518 0122 84BB      		out 0x14,r24
 369:setup.c       **** 	GBA_PORT_RAM_DATA7_0 = data; // Set data
 519               		.loc 1 369 0
 520 0124 C5BB      		out 0x15,r28
 370:setup.c       **** 	
 371:setup.c       **** 	// Pulse WR
 372:setup.c       **** 	wrPin_low;
 521               		.loc 1 372 0
 522 0126 9698      		cbi 0x12,6
 373:setup.c       **** 	cs2Pin_low; // CS2 pin low for SRAM/Flash select
 523               		.loc 1 373 0
 524 0128 3A98      		cbi 0x7,2
 374:setup.c       **** 	
 375:setup.c       **** 	asm volatile("nop");
 525               		.loc 1 375 0
 526               	/* #APP */
 527               	 ;  375 "setup.c" 1
 528 012a 0000      		nop
 529               	 ;  0 "" 2
 376:setup.c       **** 	asm volatile("nop");
 530               		.loc 1 376 0
 531               	 ;  376 "setup.c" 1
 532 012c 0000      		nop
 533               	 ;  0 "" 2
 377:setup.c       **** 	
 378:setup.c       **** 	cs2Pin_high;
 534               		.loc 1 378 0
 535               	/* #NOAPP */
 536 012e 3A9A      		sbi 0x7,2
 379:setup.c       **** 	wrPin_high;
 537               		.loc 1 379 0
 538 0130 969A      		sbi 0x12,6
 380:setup.c       **** 	
 381:setup.c       **** 	// Clear data outputs and set data pins as inputs
 382:setup.c       **** 	GBA_PORT_RAM_DATA7_0 = 0;
 539               		.loc 1 382 0
 540 0132 15BA      		out 0x15,__zero_reg__
 383:setup.c       **** 	GBA_DDR_RAM_DATA7_0 = 0;
 541               		.loc 1 383 0
 542 0134 14BA      		out 0x14,__zero_reg__
 543               	/* epilogue start */
 384:setup.c       **** }
 544               		.loc 1 384 0
 545 0136 CF91      		pop r28
 546               	.LVL31:
 547 0138 0895      		ret
 548               		.cfi_endproc
 549               	.LFE25:
 551               	.global	gba_eeprom_mode
 553               	gba_eeprom_mode:
 554               	.LFB26:
 385:setup.c       **** 
 386:setup.c       **** 
 387:setup.c       **** 
 388:setup.c       **** // ---------- EEPROM ----------
 389:setup.c       **** 
 390:setup.c       **** // Set address/data all high (includes AD0/A23)
 391:setup.c       **** void gba_eeprom_mode (void) {
 555               		.loc 1 391 0
 556               		.cfi_startproc
 557               	/* prologue: function */
 558               	/* frame size = 0 */
 559               	/* stack size = 0 */
 560               	.L__stack_usage = 0
 392:setup.c       **** 	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 561               		.loc 1 392 0
 562 013a 8FEF      		ldi r24,lo8(-1)
 563 013c 87BB      		out 0x17,r24
 393:setup.c       **** 	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 564               		.loc 1 393 0
 565 013e 8ABB      		out 0x1a,r24
 394:setup.c       **** 	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 566               		.loc 1 394 0
 567 0140 84BB      		out 0x14,r24
 395:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0x80;
 568               		.loc 1 395 0
 569 0142 90E8      		ldi r25,lo8(-128)
 570 0144 98BB      		out 0x18,r25
 396:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0xFF;
 571               		.loc 1 396 0
 572 0146 8BBB      		out 0x1b,r24
 397:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0xFF;
 573               		.loc 1 397 0
 574 0148 85BB      		out 0x15,r24
 575 014a 0895      		ret
 576               		.cfi_endproc
 577               	.LFE26:
 579               	.global	gba_eeprom_set_address
 581               	gba_eeprom_set_address:
 582               	.LFB27:
 398:setup.c       **** }
 399:setup.c       **** 
 400:setup.c       **** // Send out EEPROM address serially (WR clock, AD0 data out)
 401:setup.c       **** void gba_eeprom_set_address(uint16_t address, uint8_t eepromSize, uint8_t command) {
 583               		.loc 1 401 0
 584               		.cfi_startproc
 585               	.LVL32:
 586               	/* prologue: function */
 587               	/* frame size = 0 */
 588               	/* stack size = 0 */
 589               	.L__stack_usage = 0
 402:setup.c       **** 	cs_mreqPin_low;
 590               		.loc 1 402 0
 591 014c 9498      		cbi 0x12,4
 592               	.LVL33:
 403:setup.c       **** 	
 404:setup.c       **** 	int8_t x = 0;
 405:setup.c       **** 	if (eepromSize == EEPROM_64KBIT) {
 593               		.loc 1 405 0
 594 014e 6230      		cpi r22,lo8(2)
 595 0150 01F4      		brne .L30
 406:setup.c       **** 		if (command == EEPROM_READ) {
 596               		.loc 1 406 0
 597 0152 4111      		cpse r20,__zero_reg__
 598 0154 00C0      		rjmp .L31
 407:setup.c       **** 			address |= (1<<15) | (1<<14); // Set upper 2 bits high for read request
 599               		.loc 1 407 0
 600 0156 906C      		ori r25,192
 601               	.LVL34:
 602               	.L40:
 408:setup.c       **** 		}
 409:setup.c       **** 		else {
 410:setup.c       **** 			address |= (1<<15); // Set upper 1 bit high for write request
 411:setup.c       **** 		}
 412:setup.c       **** 		x = 15;
 603               		.loc 1 412 0
 604 0158 2FE0      		ldi r18,lo8(15)
 605               	.L33:
 606               	.LVL35:
 413:setup.c       **** 	}
 414:setup.c       **** 	else {
 415:setup.c       **** 		if (command == EEPROM_READ) {
 416:setup.c       **** 			address |= (1<<7) | (1<<6);
 417:setup.c       **** 		}
 418:setup.c       **** 		else {
 419:setup.c       **** 			address |= (1<<7);
 420:setup.c       **** 		}
 421:setup.c       **** 		x = 7;
 422:setup.c       **** 	}
 423:setup.c       **** 	
 424:setup.c       **** 	// Loop through address, 8 or 16 bits depending on EEPROM (includes the 2 bits for request type)
 425:setup.c       **** 	while (x >= 0) {
 426:setup.c       **** 		if (address & (1<<x)) {
 607               		.loc 1 426 0
 608 015a E1E0      		ldi r30,lo8(1)
 609 015c F0E0      		ldi r31,0
 610 015e 00C0      		rjmp .L32
 611               	.LVL36:
 612               	.L31:
 410:setup.c       **** 		}
 613               		.loc 1 410 0
 614 0160 9068      		ori r25,128
 615               	.LVL37:
 616 0162 00C0      		rjmp .L40
 617               	.L30:
 415:setup.c       **** 			address |= (1<<7) | (1<<6);
 618               		.loc 1 415 0
 619 0164 4111      		cpse r20,__zero_reg__
 620 0166 00C0      		rjmp .L34
 416:setup.c       **** 		}
 621               		.loc 1 416 0
 622 0168 806C      		ori r24,192
 623               	.LVL38:
 624 016a 00C0      		rjmp .L39
 625               	.L34:
 419:setup.c       **** 		}
 626               		.loc 1 419 0
 627 016c 8068      		ori r24,128
 628               	.LVL39:
 629               	.L39:
 421:setup.c       **** 	}
 630               		.loc 1 421 0
 631 016e 27E0      		ldi r18,lo8(7)
 632 0170 00C0      		rjmp .L33
 633               	.LVL40:
 634               	.L35:
 427:setup.c       **** 			ad0Pin_high;
 428:setup.c       **** 		}
 429:setup.c       **** 		else {
 430:setup.c       **** 			ad0Pin_low;
 635               		.loc 1 430 0
 636 0172 C098      		cbi 0x18,0
 637               	.L36:
 431:setup.c       **** 		}
 432:setup.c       **** 		
 433:setup.c       **** 		wrPin_low; // CLK
 638               		.loc 1 433 0
 639 0174 9698      		cbi 0x12,6
 434:setup.c       **** 		asm ("nop");
 640               		.loc 1 434 0
 641               	/* #APP */
 642               	 ;  434 "setup.c" 1
 643 0176 0000      		nop
 644               	 ;  0 "" 2
 435:setup.c       **** 		asm ("nop");
 645               		.loc 1 435 0
 646               	 ;  435 "setup.c" 1
 647 0178 0000      		nop
 648               	 ;  0 "" 2
 436:setup.c       **** 		wrPin_high; 
 649               		.loc 1 436 0
 650               	/* #NOAPP */
 651 017a 969A      		sbi 0x12,6
 437:setup.c       **** 		asm ("nop");
 652               		.loc 1 437 0
 653               	/* #APP */
 654               	 ;  437 "setup.c" 1
 655 017c 0000      		nop
 656               	 ;  0 "" 2
 438:setup.c       **** 		asm ("nop");
 657               		.loc 1 438 0
 658               	 ;  438 "setup.c" 1
 659 017e 0000      		nop
 660               	 ;  0 "" 2
 661               	/* #NOAPP */
 662 0180 2150      		subi r18,lo8(-(-1))
 663               	.LVL41:
 425:setup.c       **** 		if (address & (1<<x)) {
 664               		.loc 1 425 0
 665 0182 27FD      		sbrc r18,7
 666 0184 00C0      		rjmp .L41
 667               	.L32:
 426:setup.c       **** 			ad0Pin_high;
 668               		.loc 1 426 0
 669 0186 BF01      		movw r22,r30
 670 0188 022E      		mov r0,r18
 671 018a 00C0      		rjmp 2f
 672               		1:
 673 018c 660F      		lsl r22
 674 018e 771F      		rol r23
 675               		2:
 676 0190 0A94      		dec r0
 677 0192 02F4      		brpl 1b
 678 0194 6823      		and r22,r24
 679 0196 7923      		and r23,r25
 680 0198 672B      		or r22,r23
 681 019a 01F0      		breq .L35
 427:setup.c       **** 		}
 682               		.loc 1 427 0
 683 019c C09A      		sbi 0x18,0
 684 019e 00C0      		rjmp .L36
 685               	.L41:
 439:setup.c       **** 		
 440:setup.c       **** 		x--;
 441:setup.c       **** 	}
 442:setup.c       **** 	
 443:setup.c       **** 	// Only send stop bit (0) and WR/CS high if reading, as writing is done in 1 continuous chunk
 444:setup.c       **** 	if (command == EEPROM_READ) {  
 686               		.loc 1 444 0
 687 01a0 4111      		cpse r20,__zero_reg__
 688 01a2 00C0      		rjmp .L29
 445:setup.c       **** 		ad0Pin_low;
 689               		.loc 1 445 0
 690 01a4 C098      		cbi 0x18,0
 446:setup.c       **** 		asm ("nop");
 691               		.loc 1 446 0
 692               	/* #APP */
 693               	 ;  446 "setup.c" 1
 694 01a6 0000      		nop
 695               	 ;  0 "" 2
 447:setup.c       **** 		wrPin_low;
 696               		.loc 1 447 0
 697               	/* #NOAPP */
 698 01a8 9698      		cbi 0x12,6
 448:setup.c       **** 		asm ("nop");
 699               		.loc 1 448 0
 700               	/* #APP */
 701               	 ;  448 "setup.c" 1
 702 01aa 0000      		nop
 703               	 ;  0 "" 2
 449:setup.c       **** 		asm ("nop");
 704               		.loc 1 449 0
 705               	 ;  449 "setup.c" 1
 706 01ac 0000      		nop
 707               	 ;  0 "" 2
 450:setup.c       **** 		
 451:setup.c       **** 		wrPin_high;
 708               		.loc 1 451 0
 709               	/* #NOAPP */
 710 01ae 969A      		sbi 0x12,6
 452:setup.c       **** 		cs_mreqPin_high;
 711               		.loc 1 452 0
 712 01b0 949A      		sbi 0x12,4
 713               	.L29:
 714 01b2 0895      		ret
 715               		.cfi_endproc
 716               	.LFE27:
 718               	.global	gba_eeprom_read
 720               	gba_eeprom_read:
 721               	.LFB28:
 453:setup.c       **** 	}
 454:setup.c       **** }
 455:setup.c       **** 
 456:setup.c       **** // Read 8 bytes from the EEPROM address, data is valid on rising edge
 457:setup.c       **** void gba_eeprom_read(uint16_t address, uint8_t eepromSize) {
 722               		.loc 1 457 0
 723               		.cfi_startproc
 724               	.LVL42:
 725               	/* prologue: function */
 726               	/* frame size = 0 */
 727               	/* stack size = 0 */
 728               	.L__stack_usage = 0
 458:setup.c       **** 	gba_eeprom_set_address(address, eepromSize, EEPROM_READ);
 729               		.loc 1 458 0
 730 01b4 40E0      		ldi r20,0
 731 01b6 00D0      		rcall gba_eeprom_set_address
 732               	.LVL43:
 459:setup.c       **** 	
 460:setup.c       **** 	// Set AD0 pin as input
 461:setup.c       **** 	GBA_PORT_EEPROM_DATA7_0 &= ~(1<<AD0);
 733               		.loc 1 461 0
 734 01b8 C098      		cbi 0x18,0
 462:setup.c       **** 	GBA_DDR_EEPROM_DATA7_0 &= ~(1<<AD0);
 735               		.loc 1 462 0
 736 01ba B898      		cbi 0x17,0
 463:setup.c       **** 	
 464:setup.c       **** 	cs_mreqPin_low;
 737               		.loc 1 464 0
 738 01bc 9498      		cbi 0x12,4
 739               	.LVL44:
 740 01be 84E0      		ldi r24,lo8(4)
 741               	.LVL45:
 742               	.L43:
 743               	.LBB128:
 465:setup.c       **** 	
 466:setup.c       **** 	// Ignore first 4 bits
 467:setup.c       **** 	for (int8_t x = 0; x < 4; x++) {
 468:setup.c       **** 		rdPin_low; // CLK
 744               		.loc 1 468 0 discriminator 3
 745 01c0 9598      		cbi 0x12,5
 469:setup.c       **** 		asm ("nop");
 746               		.loc 1 469 0 discriminator 3
 747               	/* #APP */
 748               	 ;  469 "setup.c" 1
 749 01c2 0000      		nop
 750               	 ;  0 "" 2
 470:setup.c       **** 		asm ("nop");
 751               		.loc 1 470 0 discriminator 3
 752               	 ;  470 "setup.c" 1
 753 01c4 0000      		nop
 754               	 ;  0 "" 2
 471:setup.c       **** 		rdPin_high; 
 755               		.loc 1 471 0 discriminator 3
 756               	/* #NOAPP */
 757 01c6 959A      		sbi 0x12,5
 472:setup.c       **** 		asm ("nop");
 758               		.loc 1 472 0 discriminator 3
 759               	/* #APP */
 760               	 ;  472 "setup.c" 1
 761 01c8 0000      		nop
 762               	 ;  0 "" 2
 473:setup.c       **** 		asm ("nop");
 763               		.loc 1 473 0 discriminator 3
 764               	 ;  473 "setup.c" 1
 765 01ca 0000      		nop
 766               	 ;  0 "" 2
 767               	.LVL46:
 768               	/* #NOAPP */
 769 01cc 8150      		subi r24,lo8(-(-1))
 770               	.LVL47:
 467:setup.c       **** 		rdPin_low; // CLK
 771               		.loc 1 467 0 discriminator 3
 772 01ce 01F4      		brne .L43
 773 01d0 E0E0      		ldi r30,lo8(eepromBuffer)
 774 01d2 F0E0      		ldi r31,hi8(eepromBuffer)
 775               	.LBE128:
 776               	.LBB129:
 777               	.LBB130:
 778               	.LBB131:
 474:setup.c       **** 	}
 475:setup.c       **** 	
 476:setup.c       **** 	// Read out 64 bits
 477:setup.c       **** 	for (uint8_t c = 0; c < 8; c++) {
 478:setup.c       **** 		uint8_t data = 0;
 479:setup.c       **** 		for (int8_t x = 7; x >= 0; x--) {
 480:setup.c       **** 			rdPin_low; // CLK
 481:setup.c       **** 			asm ("nop");
 482:setup.c       **** 			asm ("nop");
 483:setup.c       **** 			rdPin_high;
 484:setup.c       **** 			
 485:setup.c       **** 			if (GBA_PIN_EEPROM_DATA7_0 & (1<<AD0)) {
 486:setup.c       **** 				data |= (1<<x);
 779               		.loc 1 486 0
 780 01d4 41E0      		ldi r20,lo8(1)
 781 01d6 50E0      		ldi r21,0
 782               	.LVL48:
 783               	.L44:
 784               	.LBE131:
 785               	.LBE130:
 786               	.LBE129:
 464:setup.c       **** 	
 787               		.loc 1 464 0
 788 01d8 87E0      		ldi r24,lo8(7)
 789 01da 90E0      		ldi r25,0
 790 01dc 20E0      		ldi r18,0
 791               	.LVL49:
 792               	.L46:
 793               	.LBB134:
 794               	.LBB133:
 795               	.LBB132:
 480:setup.c       **** 			asm ("nop");
 796               		.loc 1 480 0
 797 01de 9598      		cbi 0x12,5
 481:setup.c       **** 			asm ("nop");
 798               		.loc 1 481 0
 799               	/* #APP */
 800               	 ;  481 "setup.c" 1
 801 01e0 0000      		nop
 802               	 ;  0 "" 2
 482:setup.c       **** 			rdPin_high;
 803               		.loc 1 482 0
 804               	 ;  482 "setup.c" 1
 805 01e2 0000      		nop
 806               	 ;  0 "" 2
 483:setup.c       **** 			
 807               		.loc 1 483 0
 808               	/* #NOAPP */
 809 01e4 959A      		sbi 0x12,5
 485:setup.c       **** 				data |= (1<<x);
 810               		.loc 1 485 0
 811 01e6 B09B      		sbis 0x16,0
 812 01e8 00C0      		rjmp .L45
 813               		.loc 1 486 0
 814 01ea BA01      		movw r22,r20
 815 01ec 082E      		mov r0,r24
 816 01ee 00C0      		rjmp 2f
 817               		1:
 818 01f0 660F      		lsl r22
 819               		2:
 820 01f2 0A94      		dec r0
 821 01f4 02F4      		brpl 1b
 822 01f6 262B      		or r18,r22
 823               	.LVL50:
 824               	.L45:
 825               	.LVL51:
 826 01f8 0197      		sbiw r24,1
 827 01fa 00F4      		brcc .L46
 828               	.LBE132:
 487:setup.c       **** 			}
 488:setup.c       **** 		}
 489:setup.c       **** 		eepromBuffer[c] = data;
 829               		.loc 1 489 0 discriminator 2
 830 01fc 2193      		st Z+,r18
 831               	.LVL52:
 832               	.LBE133:
 477:setup.c       **** 		uint8_t data = 0;
 833               		.loc 1 477 0 discriminator 2
 834 01fe 80E0      		ldi r24,hi8(eepromBuffer+8)
 835 0200 E030      		cpi r30,lo8(eepromBuffer+8)
 836 0202 F807      		cpc r31,r24
 837               	.LVL53:
 838 0204 01F4      		brne .L44
 839               	.LBE134:
 490:setup.c       **** 	}
 491:setup.c       **** 	
 492:setup.c       **** 	cs_mreqPin_high;
 840               		.loc 1 492 0
 841 0206 949A      		sbi 0x12,4
 493:setup.c       **** 	
 494:setup.c       **** 	// Set AD0 pin as output
 495:setup.c       **** 	GBA_PORT_EEPROM_DATA7_0 |= (1<<AD0);
 842               		.loc 1 495 0
 843 0208 C09A      		sbi 0x18,0
 496:setup.c       **** 	GBA_DDR_EEPROM_DATA7_0 |= (1<<AD0);
 844               		.loc 1 496 0
 845 020a B89A      		sbi 0x17,0
 846 020c 0895      		ret
 847               		.cfi_endproc
 848               	.LFE28:
 850               	.global	gba_eeprom_write
 852               	gba_eeprom_write:
 853               	.LFB29:
 497:setup.c       **** }
 498:setup.c       **** 
 499:setup.c       **** // Write 8 bytes to the EEPROM address
 500:setup.c       **** void gba_eeprom_write(uint16_t address, uint8_t eepromSize) {
 854               		.loc 1 500 0
 855               		.cfi_startproc
 856               	.LVL54:
 857               	/* prologue: function */
 858               	/* frame size = 0 */
 859               	/* stack size = 0 */
 860               	.L__stack_usage = 0
 501:setup.c       **** 	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
 861               		.loc 1 501 0
 862 020e 41E0      		ldi r20,lo8(1)
 863 0210 00D0      		rcall gba_eeprom_set_address
 864               	.LVL55:
 865 0212 E0E0      		ldi r30,lo8(eepromBuffer)
 866 0214 F0E0      		ldi r31,hi8(eepromBuffer)
 867 0216 48E0      		ldi r20,lo8(8)
 868               	.LVL56:
 869               	.L54:
 500:setup.c       **** 	gba_eeprom_set_address(address, eepromSize, EEPROM_WRITE);
 870               		.loc 1 500 0
 871 0218 27E0      		ldi r18,lo8(7)
 872 021a 30E0      		ldi r19,0
 873               	.LVL57:
 874               	.L57:
 875               	.LBB135:
 876               	.LBB136:
 502:setup.c       **** 	
 503:setup.c       **** 	// Write 64 bits
 504:setup.c       **** 	for (uint8_t c = 0; c < 8; c++) {
 505:setup.c       **** 		for (int8_t x = 7; x >= 0; x--) {
 506:setup.c       **** 			if (eepromBuffer[c] & (1<<x)) {
 877               		.loc 1 506 0
 878 021c 8081      		ld r24,Z
 879 021e 90E0      		ldi r25,0
 880 0220 022E      		mov r0,r18
 881 0222 00C0      		rjmp 2f
 882               		1:
 883 0224 9595      		asr r25
 884 0226 8795      		ror r24
 885               		2:
 886 0228 0A94      		dec r0
 887 022a 02F4      		brpl 1b
 888 022c 80FF      		sbrs r24,0
 889 022e 00C0      		rjmp .L55
 507:setup.c       **** 				ad0Pin_high;
 890               		.loc 1 507 0
 891 0230 C09A      		sbi 0x18,0
 892 0232 00C0      		rjmp .L56
 893               	.L55:
 508:setup.c       **** 			}
 509:setup.c       **** 			else {
 510:setup.c       **** 				ad0Pin_low;
 894               		.loc 1 510 0
 895 0234 C098      		cbi 0x18,0
 896               	.L56:
 511:setup.c       **** 			}
 512:setup.c       **** 			
 513:setup.c       **** 			wrPin_low; // CLK
 897               		.loc 1 513 0 discriminator 2
 898 0236 9698      		cbi 0x12,6
 514:setup.c       **** 			asm ("nop");
 899               		.loc 1 514 0 discriminator 2
 900               	/* #APP */
 901               	 ;  514 "setup.c" 1
 902 0238 0000      		nop
 903               	 ;  0 "" 2
 515:setup.c       **** 			asm ("nop");
 904               		.loc 1 515 0 discriminator 2
 905               	 ;  515 "setup.c" 1
 906 023a 0000      		nop
 907               	 ;  0 "" 2
 516:setup.c       **** 			wrPin_high; 
 908               		.loc 1 516 0 discriminator 2
 909               	/* #NOAPP */
 910 023c 969A      		sbi 0x12,6
 517:setup.c       **** 			asm ("nop");
 911               		.loc 1 517 0 discriminator 2
 912               	/* #APP */
 913               	 ;  517 "setup.c" 1
 914 023e 0000      		nop
 915               	 ;  0 "" 2
 518:setup.c       **** 			asm ("nop");
 916               		.loc 1 518 0 discriminator 2
 917               	 ;  518 "setup.c" 1
 918 0240 0000      		nop
 919               	 ;  0 "" 2
 920               	.LVL58:
 921               	/* #NOAPP */
 922               	.LVL59:
 923 0242 2150      		subi r18,1
 924 0244 3109      		sbc r19,__zero_reg__
 925 0246 00F4      		brcc .L57
 926 0248 4150      		subi r20,lo8(-(-1))
 927 024a 3196      		adiw r30,1
 928               	.LVL60:
 929               	.LBE136:
 504:setup.c       **** 		for (int8_t x = 7; x >= 0; x--) {
 930               		.loc 1 504 0 discriminator 2
 931 024c 4111      		cpse r20,__zero_reg__
 932 024e 00C0      		rjmp .L54
 933               	.LBE135:
 519:setup.c       **** 		}
 520:setup.c       **** 	}
 521:setup.c       **** 	
 522:setup.c       **** 	// Last bit low
 523:setup.c       **** 	ad0Pin_low;
 934               		.loc 1 523 0
 935 0250 C098      		cbi 0x18,0
 524:setup.c       **** 	wrPin_low; // CLK
 936               		.loc 1 524 0
 937 0252 9698      		cbi 0x12,6
 525:setup.c       **** 	asm ("nop");
 938               		.loc 1 525 0
 939               	/* #APP */
 940               	 ;  525 "setup.c" 1
 941 0254 0000      		nop
 942               	 ;  0 "" 2
 526:setup.c       **** 	asm ("nop");
 943               		.loc 1 526 0
 944               	 ;  526 "setup.c" 1
 945 0256 0000      		nop
 946               	 ;  0 "" 2
 527:setup.c       **** 	wrPin_high; 
 947               		.loc 1 527 0
 948               	/* #NOAPP */
 949 0258 969A      		sbi 0x12,6
 528:setup.c       **** 	asm ("nop");
 950               		.loc 1 528 0
 951               	/* #APP */
 952               	 ;  528 "setup.c" 1
 953 025a 0000      		nop
 954               	 ;  0 "" 2
 529:setup.c       **** 	asm ("nop");
 955               		.loc 1 529 0
 956               	 ;  529 "setup.c" 1
 957 025c 0000      		nop
 958               	 ;  0 "" 2
 530:setup.c       **** 	
 531:setup.c       **** 	cs_mreqPin_high;
 959               		.loc 1 531 0
 960               	/* #NOAPP */
 961 025e 949A      		sbi 0x12,4
 962 0260 0895      		ret
 963               		.cfi_endproc
 964               	.LFE29:
 966               	.global	flash_write_bus_cycle
 968               	flash_write_bus_cycle:
 969               	.LFB30:
 532:setup.c       **** }
 533:setup.c       **** 
 534:setup.c       **** 
 535:setup.c       **** 
 536:setup.c       **** // ---------- FLASH ----------
 537:setup.c       **** 
 538:setup.c       **** // Set the address and data for the write byte cycle to the flash
 539:setup.c       **** void flash_write_bus_cycle(uint16_t address, uint8_t data) {
 970               		.loc 1 539 0
 971               		.cfi_startproc
 972               	.LVL61:
 973 0262 CF93      		push r28
 974               	.LCFI11:
 975               		.cfi_def_cfa_offset 3
 976               		.cfi_offset 28, -2
 977               	/* prologue: function */
 978               	/* frame size = 0 */
 979               	/* stack size = 1 */
 980               	.L__stack_usage = 1
 981 0264 C62F      		mov r28,r22
 540:setup.c       **** 	GBA_DDR_RAM_DATA7_0 = 0xFF; // Set data pins as outputs
 982               		.loc 1 540 0
 983 0266 2FEF      		ldi r18,lo8(-1)
 984 0268 24BB      		out 0x14,r18
 541:setup.c       **** 	set_16bit_address(address);
 985               		.loc 1 541 0
 986 026a 00D0      		rcall set_16bit_address
 987               	.LVL62:
 542:setup.c       **** 	GBA_PORT_RAM_DATA7_0 = data;
 988               		.loc 1 542 0
 989 026c C5BB      		out 0x15,r28
 543:setup.c       **** 	
 544:setup.c       **** 	wrPin_low;
 990               		.loc 1 544 0
 991 026e 9698      		cbi 0x12,6
 545:setup.c       **** 	cs2Pin_low;
 992               		.loc 1 545 0
 993 0270 3A98      		cbi 0x7,2
 546:setup.c       **** 	asm volatile("nop");
 994               		.loc 1 546 0
 995               	/* #APP */
 996               	 ;  546 "setup.c" 1
 997 0272 0000      		nop
 998               	 ;  0 "" 2
 547:setup.c       **** 	wrPin_high;
 999               		.loc 1 547 0
 1000               	/* #NOAPP */
 1001 0274 969A      		sbi 0x12,6
 548:setup.c       **** 	cs2Pin_high;
 1002               		.loc 1 548 0
 1003 0276 3A9A      		sbi 0x7,2
 1004               	/* epilogue start */
 549:setup.c       **** }
 1005               		.loc 1 549 0
 1006 0278 CF91      		pop r28
 1007               	.LVL63:
 1008 027a 0895      		ret
 1009               		.cfi_endproc
 1010               	.LFE30:
 1012               	.global	flash_read_chip_id
 1014               	flash_read_chip_id:
 1015               	.LFB31:
 550:setup.c       **** 
 551:setup.c       **** // Read the flash manufacturer and device ID (Software ID)
 552:setup.c       **** void flash_read_chip_id(void) {
 1016               		.loc 1 552 0
 1017               		.cfi_startproc
 1018 027c CF93      		push r28
 1019               	.LCFI12:
 1020               		.cfi_def_cfa_offset 3
 1021               		.cfi_offset 28, -2
 1022 027e DF93      		push r29
 1023               	.LCFI13:
 1024               		.cfi_def_cfa_offset 4
 1025               		.cfi_offset 29, -3
 1026               	/* prologue: function */
 1027               	/* frame size = 0 */
 1028               	/* stack size = 2 */
 1029               	.L__stack_usage = 2
 553:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xAA);
 1030               		.loc 1 553 0
 1031 0280 6AEA      		ldi r22,lo8(-86)
 1032 0282 85E5      		ldi r24,lo8(85)
 1033 0284 95E5      		ldi r25,lo8(85)
 1034 0286 00D0      		rcall flash_write_bus_cycle
 1035               	.LVL64:
 554:setup.c       **** 	flash_write_bus_cycle(0x2AAA, 0x55);
 1036               		.loc 1 554 0
 1037 0288 65E5      		ldi r22,lo8(85)
 1038 028a 8AEA      		ldi r24,lo8(-86)
 1039 028c 9AE2      		ldi r25,lo8(42)
 1040 028e 00D0      		rcall flash_write_bus_cycle
 1041               	.LVL65:
 555:setup.c       **** 	flash_write_bus_cycle(0x5555, 0x90); // Software ID entry
 1042               		.loc 1 555 0
 1043 0290 60E9      		ldi r22,lo8(-112)
 1044 0292 85E5      		ldi r24,lo8(85)
 1045 0294 95E5      		ldi r25,lo8(85)
 1046 0296 00D0      		rcall flash_write_bus_cycle
 1047               	.LVL66:
 1048               	.LBB137:
 1049               	.LBB138:
 1050               		.file 2 "c:\\winavr-20100110\\avr\\include\\util\\delay.h"
   1:c:\winavr-20100110\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\winavr-20100110\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\winavr-20100110\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\winavr-20100110\avr\include\util\delay.h ****    All rights reserved.
   5:c:\winavr-20100110\avr\include\util\delay.h **** 
   6:c:\winavr-20100110\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\winavr-20100110\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\winavr-20100110\avr\include\util\delay.h **** 
   9:c:\winavr-20100110\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\winavr-20100110\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\winavr-20100110\avr\include\util\delay.h **** 
  12:c:\winavr-20100110\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\winavr-20100110\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\winavr-20100110\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\winavr-20100110\avr\include\util\delay.h ****      distribution.
  16:c:\winavr-20100110\avr\include\util\delay.h **** 
  17:c:\winavr-20100110\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\winavr-20100110\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\winavr-20100110\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\winavr-20100110\avr\include\util\delay.h **** 
  21:c:\winavr-20100110\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\winavr-20100110\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\winavr-20100110\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\winavr-20100110\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\winavr-20100110\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\winavr-20100110\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\winavr-20100110\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\winavr-20100110\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\winavr-20100110\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\winavr-20100110\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\winavr-20100110\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\winavr-20100110\avr\include\util\delay.h **** 
  33:c:\winavr-20100110\avr\include\util\delay.h **** /* $Id$ */
  34:c:\winavr-20100110\avr\include\util\delay.h **** 
  35:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\winavr-20100110\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\winavr-20100110\avr\include\util\delay.h **** 
  38:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\winavr-20100110\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\winavr-20100110\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\winavr-20100110\avr\include\util\delay.h **** #  endif
  42:c:\winavr-20100110\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\winavr-20100110\avr\include\util\delay.h **** 
  44:c:\winavr-20100110\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\winavr-20100110\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\winavr-20100110\avr\include\util\delay.h **** #include <math.h>
  47:c:\winavr-20100110\avr\include\util\delay.h **** 
  48:c:\winavr-20100110\avr\include\util\delay.h **** /** \file */
  49:c:\winavr-20100110\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\winavr-20100110\avr\include\util\delay.h ****     \code
  51:c:\winavr-20100110\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\winavr-20100110\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\winavr-20100110\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\winavr-20100110\avr\include\util\delay.h ****     \endcode
  55:c:\winavr-20100110\avr\include\util\delay.h **** 
  56:c:\winavr-20100110\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\winavr-20100110\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\winavr-20100110\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\winavr-20100110\avr\include\util\delay.h ****     used.
  60:c:\winavr-20100110\avr\include\util\delay.h **** 
  61:c:\winavr-20100110\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\winavr-20100110\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\winavr-20100110\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\winavr-20100110\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\winavr-20100110\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\winavr-20100110\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\winavr-20100110\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\winavr-20100110\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\winavr-20100110\avr\include\util\delay.h **** 
  70:c:\winavr-20100110\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\winavr-20100110\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\winavr-20100110\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\winavr-20100110\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\winavr-20100110\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\winavr-20100110\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\winavr-20100110\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\winavr-20100110\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\winavr-20100110\avr\include\util\delay.h **** 
  79:c:\winavr-20100110\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\winavr-20100110\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\winavr-20100110\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\winavr-20100110\avr\include\util\delay.h **** 
  83:c:\winavr-20100110\avr\include\util\delay.h **** */
  84:c:\winavr-20100110\avr\include\util\delay.h **** 
  85:c:\winavr-20100110\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\winavr-20100110\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\winavr-20100110\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\winavr-20100110\avr\include\util\delay.h **** #endif
  89:c:\winavr-20100110\avr\include\util\delay.h **** 
  90:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\winavr-20100110\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\winavr-20100110\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\winavr-20100110\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\winavr-20100110\avr\include\util\delay.h ****     \def F_CPU
  95:c:\winavr-20100110\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\winavr-20100110\avr\include\util\delay.h **** 
  97:c:\winavr-20100110\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\winavr-20100110\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\winavr-20100110\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\winavr-20100110\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\winavr-20100110\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\winavr-20100110\avr\include\util\delay.h **** 
 103:c:\winavr-20100110\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\winavr-20100110\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\winavr-20100110\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\winavr-20100110\avr\include\util\delay.h ****     integer value.
 107:c:\winavr-20100110\avr\include\util\delay.h ****  */
 108:c:\winavr-20100110\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 110:c:\winavr-20100110\avr\include\util\delay.h **** 
 111:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\winavr-20100110\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 114:c:\winavr-20100110\avr\include\util\delay.h **** 
 115:c:\winavr-20100110\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\winavr-20100110\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\winavr-20100110\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\winavr-20100110\avr\include\util\delay.h **** #  include <math.h>
 119:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 120:c:\winavr-20100110\avr\include\util\delay.h **** 
 121:c:\winavr-20100110\avr\include\util\delay.h **** /**
 122:c:\winavr-20100110\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\winavr-20100110\avr\include\util\delay.h **** 
 124:c:\winavr-20100110\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\winavr-20100110\avr\include\util\delay.h **** 
 126:c:\winavr-20100110\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\winavr-20100110\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\winavr-20100110\avr\include\util\delay.h **** 
 129:c:\winavr-20100110\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\winavr-20100110\avr\include\util\delay.h **** 
 131:c:\winavr-20100110\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\winavr-20100110\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\winavr-20100110\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\winavr-20100110\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\winavr-20100110\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\winavr-20100110\avr\include\util\delay.h **** 
 137:c:\winavr-20100110\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\winavr-20100110\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\winavr-20100110\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\winavr-20100110\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\winavr-20100110\avr\include\util\delay.h **** 
 142:c:\winavr-20100110\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\winavr-20100110\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\winavr-20100110\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\winavr-20100110\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\winavr-20100110\avr\include\util\delay.h **** 
 147:c:\winavr-20100110\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\winavr-20100110\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\winavr-20100110\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\winavr-20100110\avr\include\util\delay.h ****    respectively.
 151:c:\winavr-20100110\avr\include\util\delay.h **** 
 152:c:\winavr-20100110\avr\include\util\delay.h ****    \note
 153:c:\winavr-20100110\avr\include\util\delay.h **** 
 154:c:\winavr-20100110\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\winavr-20100110\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\winavr-20100110\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\winavr-20100110\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\winavr-20100110\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\winavr-20100110\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\winavr-20100110\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\winavr-20100110\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\winavr-20100110\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\winavr-20100110\avr\include\util\delay.h **** 
 164:c:\winavr-20100110\avr\include\util\delay.h ****  */
 165:c:\winavr-20100110\avr\include\util\delay.h **** void
 166:c:\winavr-20100110\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\winavr-20100110\avr\include\util\delay.h **** {
 168:c:\winavr-20100110\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\winavr-20100110\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\winavr-20100110\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\winavr-20100110\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\winavr-20100110\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\winavr-20100110\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\winavr-20100110\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\winavr-20100110\avr\include\util\delay.h **** 
 176:c:\winavr-20100110\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\winavr-20100110\avr\include\util\delay.h **** 
 179:c:\winavr-20100110\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\winavr-20100110\avr\include\util\delay.h **** 
 182:c:\winavr-20100110\avr\include\util\delay.h **** 	#else
 183:c:\winavr-20100110\avr\include\util\delay.h **** 		//round up by default
 184:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\winavr-20100110\avr\include\util\delay.h **** 	#endif
 186:c:\winavr-20100110\avr\include\util\delay.h **** 
 187:c:\winavr-20100110\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1051               		.loc 2 187 0
 1052 0298 8FE3      		ldi r24,lo8(-25537)
 1053 029a 9CE9      		ldi r25,hi8(-25537)
 1054 029c 0197      	1:	sbiw r24,1
 1055 029e 01F4      		brne 1b
 1056 02a0 00C0      		rjmp .
 1057 02a2 0000      		nop
 1058               	.LVL67:
 1059               	.LBE138:
 1060               	.LBE137:
 556:setup.c       **** 	_delay_ms(20); // Wait a little (for Atmel chip)
 557:setup.c       **** 	
 558:setup.c       **** 	// Set data as inputs
 559:setup.c       **** 	GBA_PORT_RAM_DATA7_0 = 0;
 1061               		.loc 1 559 0
 1062 02a4 15BA      		out 0x15,__zero_reg__
 560:setup.c       **** 	GBA_DDR_RAM_DATA7_0 = 0;
 1063               		.loc 1 560 0
 1064 02a6 14BA      		out 0x14,__zero_reg__
 561:setup.c       **** 	
 562:setup.c       **** 	// Read and transmit the 2 bytes
 563:setup.c       **** 	flashChipIdBuffer[0] = gba_read_ram_8bit_data(0x0000);
 1065               		.loc 1 563 0
 1066 02a8 80E0      		ldi r24,0
 1067 02aa 90E0      		ldi r25,0
 1068 02ac 00D0      		rcall gba_read_ram_8bit_data
 1069               	.LVL68:
 1070 02ae C0E0      		ldi r28,lo8(flashChipIdBuffer)
 1071 02b0 D0E0      		ldi r29,hi8(flashChipIdBuffer)
 1072 02b2 8883      		st Y,r24
 564:setup.c       **** 	flashChipIdBuffer[1] = gba_read_ram_8bit_data(0x0001);
 1073               		.loc 1 564 0
 1074 02b4 81E0      		ldi r24,lo8(1)
 1075 02b6 90E0      		ldi r25,0
 1076 02b8 00D0      		rcall gba_read_ram_8bit_data
 1077               	.LVL69:
 1078 02ba 8983      		std Y+1,r24
 565:setup.c       **** 	
 566:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xAA);
 1079               		.loc 1 566 0
 1080 02bc 6AEA      		ldi r22,lo8(-86)
 1081 02be 85E5      		ldi r24,lo8(85)
 1082 02c0 95E5      		ldi r25,lo8(85)
 1083 02c2 00D0      		rcall flash_write_bus_cycle
 1084               	.LVL70:
 567:setup.c       **** 	flash_write_bus_cycle(0x2AAA, 0x55);
 1085               		.loc 1 567 0
 1086 02c4 65E5      		ldi r22,lo8(85)
 1087 02c6 8AEA      		ldi r24,lo8(-86)
 1088 02c8 9AE2      		ldi r25,lo8(42)
 1089 02ca 00D0      		rcall flash_write_bus_cycle
 1090               	.LVL71:
 568:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xF0); // Software ID exit
 1091               		.loc 1 568 0
 1092 02cc 60EF      		ldi r22,lo8(-16)
 1093 02ce 85E5      		ldi r24,lo8(85)
 1094 02d0 95E5      		ldi r25,lo8(85)
 1095 02d2 00D0      		rcall flash_write_bus_cycle
 1096               	.LVL72:
 1097               	.LBB139:
 1098               	.LBB140:
 1099               		.loc 2 187 0
 1100 02d4 8FE3      		ldi r24,lo8(-25537)
 1101 02d6 9CE9      		ldi r25,hi8(-25537)
 1102 02d8 0197      	1:	sbiw r24,1
 1103 02da 01F4      		brne 1b
 1104 02dc 00C0      		rjmp .
 1105 02de 0000      		nop
 1106               	.LVL73:
 1107               	/* epilogue start */
 1108               	.LBE140:
 1109               	.LBE139:
 569:setup.c       **** 	_delay_ms(20); // Wait a little (for Atmel chip)
 570:setup.c       **** }
 1110               		.loc 1 570 0
 1111 02e0 DF91      		pop r29
 1112 02e2 CF91      		pop r28
 1113 02e4 0895      		ret
 1114               		.cfi_endproc
 1115               	.LFE31:
 1117               	.global	flash_switch_bank
 1119               	flash_switch_bank:
 1120               	.LFB32:
 571:setup.c       **** 
 572:setup.c       **** // Switch banks on the Flash
 573:setup.c       **** void flash_switch_bank(uint8_t bank) {
 1121               		.loc 1 573 0
 1122               		.cfi_startproc
 1123               	.LVL74:
 1124 02e6 CF93      		push r28
 1125               	.LCFI14:
 1126               		.cfi_def_cfa_offset 3
 1127               		.cfi_offset 28, -2
 1128               	/* prologue: function */
 1129               	/* frame size = 0 */
 1130               	/* stack size = 1 */
 1131               	.L__stack_usage = 1
 1132 02e8 C82F      		mov r28,r24
 574:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xAA);
 1133               		.loc 1 574 0
 1134 02ea 6AEA      		ldi r22,lo8(-86)
 1135 02ec 85E5      		ldi r24,lo8(85)
 1136 02ee 95E5      		ldi r25,lo8(85)
 1137               	.LVL75:
 1138 02f0 00D0      		rcall flash_write_bus_cycle
 1139               	.LVL76:
 575:setup.c       **** 	flash_write_bus_cycle(0x2AAA, 0x55);
 1140               		.loc 1 575 0
 1141 02f2 65E5      		ldi r22,lo8(85)
 1142 02f4 8AEA      		ldi r24,lo8(-86)
 1143 02f6 9AE2      		ldi r25,lo8(42)
 1144 02f8 00D0      		rcall flash_write_bus_cycle
 1145               	.LVL77:
 576:setup.c       **** 	
 577:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xB0);
 1146               		.loc 1 577 0
 1147 02fa 60EB      		ldi r22,lo8(-80)
 1148 02fc 85E5      		ldi r24,lo8(85)
 1149 02fe 95E5      		ldi r25,lo8(85)
 1150 0300 00D0      		rcall flash_write_bus_cycle
 1151               	.LVL78:
 578:setup.c       **** 	flash_write_bus_cycle(0x0000, bank);
 1152               		.loc 1 578 0
 1153 0302 6C2F      		mov r22,r28
 1154 0304 80E0      		ldi r24,0
 1155 0306 90E0      		ldi r25,0
 1156               	/* epilogue start */
 579:setup.c       **** }
 1157               		.loc 1 579 0
 1158 0308 CF91      		pop r28
 1159               	.LVL79:
 578:setup.c       **** 	flash_write_bus_cycle(0x0000, bank);
 1160               		.loc 1 578 0
 1161 030a 00C0      		rjmp flash_write_bus_cycle
 1162               	.LVL80:
 1163               		.cfi_endproc
 1164               	.LFE32:
 1166               	.global	flash_erase_4k_sector
 1168               	flash_erase_4k_sector:
 1169               	.LFB33:
 580:setup.c       **** 
 581:setup.c       **** // Erase 4K sector on Flash, expects first sector to start at 0, left shifts by 12 (A15-A12 to sele
 582:setup.c       **** // Takes 25ms after last command to erase sector
 583:setup.c       **** void flash_erase_4k_sector(uint8_t sector) {
 1170               		.loc 1 583 0
 1171               		.cfi_startproc
 1172               	.LVL81:
 1173 030c CF93      		push r28
 1174               	.LCFI15:
 1175               		.cfi_def_cfa_offset 3
 1176               		.cfi_offset 28, -2
 1177               	/* prologue: function */
 1178               	/* frame size = 0 */
 1179               	/* stack size = 1 */
 1180               	.L__stack_usage = 1
 1181 030e C82F      		mov r28,r24
 584:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xAA);
 1182               		.loc 1 584 0
 1183 0310 6AEA      		ldi r22,lo8(-86)
 1184 0312 85E5      		ldi r24,lo8(85)
 1185 0314 95E5      		ldi r25,lo8(85)
 1186               	.LVL82:
 1187 0316 00D0      		rcall flash_write_bus_cycle
 1188               	.LVL83:
 585:setup.c       **** 	flash_write_bus_cycle(0x2AAA, 0x55);
 1189               		.loc 1 585 0
 1190 0318 65E5      		ldi r22,lo8(85)
 1191 031a 8AEA      		ldi r24,lo8(-86)
 1192 031c 9AE2      		ldi r25,lo8(42)
 1193 031e 00D0      		rcall flash_write_bus_cycle
 1194               	.LVL84:
 586:setup.c       **** 	flash_write_bus_cycle(0x5555, 0x80);
 1195               		.loc 1 586 0
 1196 0320 60E8      		ldi r22,lo8(-128)
 1197 0322 85E5      		ldi r24,lo8(85)
 1198 0324 95E5      		ldi r25,lo8(85)
 1199 0326 00D0      		rcall flash_write_bus_cycle
 1200               	.LVL85:
 587:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xAA);
 1201               		.loc 1 587 0
 1202 0328 6AEA      		ldi r22,lo8(-86)
 1203 032a 85E5      		ldi r24,lo8(85)
 1204 032c 95E5      		ldi r25,lo8(85)
 1205 032e 00D0      		rcall flash_write_bus_cycle
 1206               	.LVL86:
 588:setup.c       **** 	flash_write_bus_cycle(0x2AAA, 0x55);
 1207               		.loc 1 588 0
 1208 0330 65E5      		ldi r22,lo8(85)
 1209 0332 8AEA      		ldi r24,lo8(-86)
 1210 0334 9AE2      		ldi r25,lo8(42)
 1211 0336 00D0      		rcall flash_write_bus_cycle
 1212               	.LVL87:
 589:setup.c       **** 	
 590:setup.c       **** 	flash_write_bus_cycle((uint16_t) sector << 12, 0x30);
 1213               		.loc 1 590 0
 1214 0338 60E3      		ldi r22,lo8(48)
 1215 033a 80E0      		ldi r24,0
 1216 033c 9C2F      		mov r25,r28
 1217 033e 9295      		swap r25
 1218 0340 907F      		andi r25,lo8(-16)
 1219 0342 00D0      		rcall flash_write_bus_cycle
 1220               	.LVL88:
 1221               	.LBB141:
 1222               	.LBB142:
 1223               		.loc 2 187 0
 1224 0344 8FE4      		ldi r24,lo8(-15537)
 1225 0346 93EC      		ldi r25,hi8(-15537)
 1226 0348 0197      	1:	sbiw r24,1
 1227 034a 01F4      		brne 1b
 1228 034c 00C0      		rjmp .
 1229 034e 0000      		nop
 1230               	.LVL89:
 1231               	/* epilogue start */
 1232               	.LBE142:
 1233               	.LBE141:
 591:setup.c       **** 	_delay_ms(25); // Wait 25ms for sector erase
 592:setup.c       **** }
 1234               		.loc 1 592 0
 1235 0350 CF91      		pop r28
 1236               	.LVL90:
 1237 0352 0895      		ret
 1238               		.cfi_endproc
 1239               	.LFE33:
 1241               	.global	flash_write_byte
 1243               	flash_write_byte:
 1244               	.LFB34:
 593:setup.c       **** 
 594:setup.c       **** // Write a single byte to the Flash address
 595:setup.c       **** // Takes 20us to program Flash
 596:setup.c       **** void flash_write_byte(uint16_t address, uint8_t data) {
 1245               		.loc 1 596 0
 1246               		.cfi_startproc
 1247               	.LVL91:
 1248 0354 1F93      		push r17
 1249               	.LCFI16:
 1250               		.cfi_def_cfa_offset 3
 1251               		.cfi_offset 17, -2
 1252 0356 CF93      		push r28
 1253               	.LCFI17:
 1254               		.cfi_def_cfa_offset 4
 1255               		.cfi_offset 28, -3
 1256 0358 DF93      		push r29
 1257               	.LCFI18:
 1258               		.cfi_def_cfa_offset 5
 1259               		.cfi_offset 29, -4
 1260               	/* prologue: function */
 1261               	/* frame size = 0 */
 1262               	/* stack size = 3 */
 1263               	.L__stack_usage = 3
 1264 035a EC01      		movw r28,r24
 1265 035c 162F      		mov r17,r22
 597:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xAA);
 1266               		.loc 1 597 0
 1267 035e 6AEA      		ldi r22,lo8(-86)
 1268               	.LVL92:
 1269 0360 85E5      		ldi r24,lo8(85)
 1270 0362 95E5      		ldi r25,lo8(85)
 1271               	.LVL93:
 1272 0364 00D0      		rcall flash_write_bus_cycle
 1273               	.LVL94:
 598:setup.c       **** 	flash_write_bus_cycle(0x2AAA, 0x55);
 1274               		.loc 1 598 0
 1275 0366 65E5      		ldi r22,lo8(85)
 1276 0368 8AEA      		ldi r24,lo8(-86)
 1277 036a 9AE2      		ldi r25,lo8(42)
 1278 036c 00D0      		rcall flash_write_bus_cycle
 1279               	.LVL95:
 599:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xA0);
 1280               		.loc 1 599 0
 1281 036e 60EA      		ldi r22,lo8(-96)
 1282 0370 85E5      		ldi r24,lo8(85)
 1283 0372 95E5      		ldi r25,lo8(85)
 1284 0374 00D0      		rcall flash_write_bus_cycle
 1285               	.LVL96:
 600:setup.c       **** 	
 601:setup.c       **** 	flash_write_bus_cycle(address, data);
 1286               		.loc 1 601 0
 1287 0376 612F      		mov r22,r17
 1288 0378 CE01      		movw r24,r28
 1289 037a 00D0      		rcall flash_write_bus_cycle
 1290               	.LVL97:
 1291               	.LBB143:
 1292               	.LBB144:
 188:c:\winavr-20100110\avr\include\util\delay.h **** 
 189:c:\winavr-20100110\avr\include\util\delay.h **** #else
 190:c:\winavr-20100110\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:c:\winavr-20100110\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:c:\winavr-20100110\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks = 1;
 194:c:\winavr-20100110\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:c:\winavr-20100110\avr\include\util\delay.h **** 	{
 196:c:\winavr-20100110\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:c:\winavr-20100110\avr\include\util\delay.h **** 		while(__ticks)
 199:c:\winavr-20100110\avr\include\util\delay.h **** 		{
 200:c:\winavr-20100110\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:c:\winavr-20100110\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:c:\winavr-20100110\avr\include\util\delay.h **** 			__ticks --;
 203:c:\winavr-20100110\avr\include\util\delay.h **** 		}
 204:c:\winavr-20100110\avr\include\util\delay.h **** 		return;
 205:c:\winavr-20100110\avr\include\util\delay.h **** 	}
 206:c:\winavr-20100110\avr\include\util\delay.h **** 	else
 207:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:c:\winavr-20100110\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 210:c:\winavr-20100110\avr\include\util\delay.h **** }
 211:c:\winavr-20100110\avr\include\util\delay.h **** 
 212:c:\winavr-20100110\avr\include\util\delay.h **** /**
 213:c:\winavr-20100110\avr\include\util\delay.h ****    \ingroup util_delay
 214:c:\winavr-20100110\avr\include\util\delay.h **** 
 215:c:\winavr-20100110\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:c:\winavr-20100110\avr\include\util\delay.h **** 
 217:c:\winavr-20100110\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:c:\winavr-20100110\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:c:\winavr-20100110\avr\include\util\delay.h **** 
 220:c:\winavr-20100110\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:c:\winavr-20100110\avr\include\util\delay.h **** 
 222:c:\winavr-20100110\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:c:\winavr-20100110\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:c:\winavr-20100110\avr\include\util\delay.h ****    will not be informed about this case.
 225:c:\winavr-20100110\avr\include\util\delay.h **** 
 226:c:\winavr-20100110\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:c:\winavr-20100110\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:c:\winavr-20100110\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:c:\winavr-20100110\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:c:\winavr-20100110\avr\include\util\delay.h **** 
 231:c:\winavr-20100110\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:c:\winavr-20100110\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:c:\winavr-20100110\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:c:\winavr-20100110\avr\include\util\delay.h ****    microseconds of delay.
 235:c:\winavr-20100110\avr\include\util\delay.h **** 
 236:c:\winavr-20100110\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:c:\winavr-20100110\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:c:\winavr-20100110\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:c:\winavr-20100110\avr\include\util\delay.h ****    respectively.
 240:c:\winavr-20100110\avr\include\util\delay.h **** 
 241:c:\winavr-20100110\avr\include\util\delay.h ****    \note
 242:c:\winavr-20100110\avr\include\util\delay.h **** 
 243:c:\winavr-20100110\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:c:\winavr-20100110\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:c:\winavr-20100110\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:c:\winavr-20100110\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:c:\winavr-20100110\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:c:\winavr-20100110\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:c:\winavr-20100110\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:c:\winavr-20100110\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:c:\winavr-20100110\avr\include\util\delay.h ****    not available to the compiler then.
 252:c:\winavr-20100110\avr\include\util\delay.h **** 
 253:c:\winavr-20100110\avr\include\util\delay.h ****  */
 254:c:\winavr-20100110\avr\include\util\delay.h **** void
 255:c:\winavr-20100110\avr\include\util\delay.h **** _delay_us(double __us)
 256:c:\winavr-20100110\avr\include\util\delay.h **** {
 257:c:\winavr-20100110\avr\include\util\delay.h **** 	double __tmp ;
 258:c:\winavr-20100110\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:c:\winavr-20100110\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:c:\winavr-20100110\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:c:\winavr-20100110\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 262:c:\winavr-20100110\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:c:\winavr-20100110\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:c:\winavr-20100110\avr\include\util\delay.h **** 
 265:c:\winavr-20100110\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:c:\winavr-20100110\avr\include\util\delay.h **** 
 268:c:\winavr-20100110\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:c:\winavr-20100110\avr\include\util\delay.h **** 
 271:c:\winavr-20100110\avr\include\util\delay.h **** 	#else
 272:c:\winavr-20100110\avr\include\util\delay.h **** 		//round up by default
 273:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:c:\winavr-20100110\avr\include\util\delay.h **** 	#endif
 275:c:\winavr-20100110\avr\include\util\delay.h **** 
 276:c:\winavr-20100110\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1293               		.loc 2 276 0
 1294 037c 85E3      		ldi r24,lo8(53)
 1295 037e 8A95      	1:	dec r24
 1296 0380 01F4      		brne 1b
 1297 0382 0000      		nop
 1298               	.LVL98:
 1299               	/* epilogue start */
 1300               	.LBE144:
 1301               	.LBE143:
 602:setup.c       **** 	_delay_us(20); // Wait byte program time
 603:setup.c       **** }
 1302               		.loc 1 603 0
 1303 0384 DF91      		pop r29
 1304 0386 CF91      		pop r28
 1305               	.LVL99:
 1306 0388 1F91      		pop r17
 1307               	.LVL100:
 1308 038a 0895      		ret
 1309               		.cfi_endproc
 1310               	.LFE34:
 1312               	.global	flash_write_sector
 1314               	flash_write_sector:
 1315               	.LFB35:
 604:setup.c       **** 
 605:setup.c       **** // Write a sector (128 bytes) to the Atmel flash
 606:setup.c       **** // Takes 20ms for write cycle
 607:setup.c       **** void flash_write_sector(uint16_t sector) {
 1316               		.loc 1 607 0
 1317               		.cfi_startproc
 1318               	.LVL101:
 1319 038c EF92      		push r14
 1320               	.LCFI19:
 1321               		.cfi_def_cfa_offset 3
 1322               		.cfi_offset 14, -2
 1323 038e FF92      		push r15
 1324               	.LCFI20:
 1325               		.cfi_def_cfa_offset 4
 1326               		.cfi_offset 15, -3
 1327 0390 0F93      		push r16
 1328               	.LCFI21:
 1329               		.cfi_def_cfa_offset 5
 1330               		.cfi_offset 16, -4
 1331 0392 1F93      		push r17
 1332               	.LCFI22:
 1333               		.cfi_def_cfa_offset 6
 1334               		.cfi_offset 17, -5
 1335 0394 CF93      		push r28
 1336               	.LCFI23:
 1337               		.cfi_def_cfa_offset 7
 1338               		.cfi_offset 28, -6
 1339 0396 DF93      		push r29
 1340               	.LCFI24:
 1341               		.cfi_def_cfa_offset 8
 1342               		.cfi_offset 29, -7
 1343               	/* prologue: function */
 1344               	/* frame size = 0 */
 1345               	/* stack size = 6 */
 1346               	.L__stack_usage = 6
 1347 0398 8C01      		movw r16,r24
 608:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xAA);
 1348               		.loc 1 608 0
 1349 039a 6AEA      		ldi r22,lo8(-86)
 1350 039c 85E5      		ldi r24,lo8(85)
 1351 039e 95E5      		ldi r25,lo8(85)
 1352               	.LVL102:
 1353 03a0 00D0      		rcall flash_write_bus_cycle
 1354               	.LVL103:
 609:setup.c       **** 	flash_write_bus_cycle(0x2AAA, 0x55);
 1355               		.loc 1 609 0
 1356 03a2 65E5      		ldi r22,lo8(85)
 1357 03a4 8AEA      		ldi r24,lo8(-86)
 1358 03a6 9AE2      		ldi r25,lo8(42)
 1359 03a8 00D0      		rcall flash_write_bus_cycle
 1360               	.LVL104:
 610:setup.c       **** 	flash_write_bus_cycle(0x5555, 0xA0);
 1361               		.loc 1 610 0
 1362 03aa 60EA      		ldi r22,lo8(-96)
 1363 03ac 85E5      		ldi r24,lo8(85)
 1364 03ae 95E5      		ldi r25,lo8(85)
 1365 03b0 00D0      		rcall flash_write_bus_cycle
 1366               	.LVL105:
 1367               	.LBB145:
 611:setup.c       **** 	
 612:setup.c       **** 	// Write the bytes (A0-A6 byte address, A7-A15 sector address)
 613:setup.c       **** 	for (uint8_t x = 0; x < 128; x++) {
 614:setup.c       **** 		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
 1368               		.loc 1 614 0
 1369 03b2 1695      		lsr r17
 1370 03b4 102F      		mov r17,r16
 1371 03b6 0027      		clr r16
 1372 03b8 1795      		ror r17
 1373 03ba 0795      		ror r16
 1374               	.LVL106:
 1375 03bc 90E0      		ldi r25,lo8(receivedBuffer)
 1376 03be E92E      		mov r14,r25
 1377 03c0 90E0      		ldi r25,hi8(receivedBuffer)
 1378 03c2 F92E      		mov r15,r25
 1379 03c4 C0E0      		ldi r28,0
 1380 03c6 D0E0      		ldi r29,0
 1381               	.LVL107:
 1382               	.L66:
 1383               		.loc 1 614 0 is_stmt 0 discriminator 3
 1384 03c8 F701      		movw r30,r14
 1385 03ca 6191      		ld r22,Z+
 1386 03cc 7F01      		movw r14,r30
 1387 03ce CE01      		movw r24,r28
 1388 03d0 802B      		or r24,r16
 1389 03d2 912B      		or r25,r17
 1390 03d4 00D0      		rcall flash_write_bus_cycle
 1391               	.LVL108:
 1392 03d6 2196      		adiw r28,1
 1393               	.LVL109:
 613:setup.c       **** 		flash_write_bus_cycle((uint16_t) (sector << 7) | (uint16_t) x, receivedBuffer[x]);
 1394               		.loc 1 613 0 is_stmt 1 discriminator 3
 1395 03d8 C038      		cpi r28,-128
 1396 03da D105      		cpc r29,__zero_reg__
 1397 03dc 01F4      		brne .L66
 1398               	.LVL110:
 1399               	.LBE145:
 1400               	.LBB146:
 1401               	.LBB147:
 187:c:\winavr-20100110\avr\include\util\delay.h **** 
 1402               		.loc 2 187 0
 1403 03de 8FE3      		ldi r24,lo8(-25537)
 1404 03e0 9CE9      		ldi r25,hi8(-25537)
 1405 03e2 0197      	1:	sbiw r24,1
 1406 03e4 01F4      		brne 1b
 1407 03e6 00C0      		rjmp .
 1408 03e8 0000      		nop
 1409               	.LVL111:
 1410               	/* epilogue start */
 1411               	.LBE147:
 1412               	.LBE146:
 615:setup.c       **** 	}
 616:setup.c       **** 	_delay_ms(20); // Wait sector program time
 617:setup.c       **** }
 1413               		.loc 1 617 0
 1414 03ea DF91      		pop r29
 1415 03ec CF91      		pop r28
 1416               	.LVL112:
 1417 03ee 1F91      		pop r17
 1418 03f0 0F91      		pop r16
 1419 03f2 FF90      		pop r15
 1420 03f4 EF90      		pop r14
 1421 03f6 0895      		ret
 1422               		.cfi_endproc
 1423               	.LFE35:
 1425               	.global	gb_flash_read_byte
 1427               	gb_flash_read_byte:
 1428               	.LFB36:
 618:setup.c       **** 
 619:setup.c       **** 
 620:setup.c       **** 
 621:setup.c       **** // ---------- GB FLASH CARTS ----------
 622:setup.c       **** 
 623:setup.c       **** // Read a byte from the flash (No CS pin pulse)
 624:setup.c       **** uint8_t gb_flash_read_byte(uint16_t address) {
 1429               		.loc 1 624 0
 1430               		.cfi_startproc
 1431               	.LVL113:
 1432               	/* prologue: function */
 1433               	/* frame size = 0 */
 1434               	/* stack size = 0 */
 1435               	.L__stack_usage = 0
 625:setup.c       **** 	PORT_DATA7_0 = 0;
 1436               		.loc 1 625 0
 1437 03f8 15BA      		out 0x15,__zero_reg__
 626:setup.c       **** 	DDR_DATA7_0 = 0;
 1438               		.loc 1 626 0
 1439 03fa 14BA      		out 0x14,__zero_reg__
 627:setup.c       **** 	
 628:setup.c       **** 	set_16bit_address(address);
 1440               		.loc 1 628 0
 1441 03fc 00D0      		rcall set_16bit_address
 1442               	.LVL114:
 629:setup.c       **** 	
 630:setup.c       **** 	rdPin_low;
 1443               		.loc 1 630 0
 1444 03fe 9598      		cbi 0x12,5
 631:setup.c       **** 	asm volatile("nop"); // Delay a little
 1445               		.loc 1 631 0
 1446               	/* #APP */
 1447               	 ;  631 "setup.c" 1
 1448 0400 0000      		nop
 1449               	 ;  0 "" 2
 632:setup.c       **** 	asm volatile("nop");
 1450               		.loc 1 632 0
 1451               	 ;  632 "setup.c" 1
 1452 0402 0000      		nop
 1453               	 ;  0 "" 2
 633:setup.c       **** 	uint8_t data = PIN_DATA7_0; // Read data
 1454               		.loc 1 633 0
 1455               	/* #NOAPP */
 1456 0404 83B3      		in r24,0x13
 1457               	.LVL115:
 634:setup.c       **** 	rdPin_high;
 1458               		.loc 1 634 0
 1459 0406 959A      		sbi 0x12,5
 635:setup.c       **** 	
 636:setup.c       **** 	return data;
 637:setup.c       **** }
 1460               		.loc 1 637 0
 1461 0408 0895      		ret
 1462               		.cfi_endproc
 1463               	.LFE36:
 1465               	.global	gb_flash_write_bus_cycle
 1467               	gb_flash_write_bus_cycle:
 1468               	.LFB37:
 638:setup.c       **** 
 639:setup.c       **** // Set the address and data for the write byte cycle to the flash
 640:setup.c       **** void gb_flash_write_bus_cycle(uint16_t address, uint8_t data) {
 1469               		.loc 1 640 0
 1470               		.cfi_startproc
 1471               	.LVL116:
 1472 040a CF93      		push r28
 1473               	.LCFI25:
 1474               		.cfi_def_cfa_offset 3
 1475               		.cfi_offset 28, -2
 1476               	/* prologue: function */
 1477               	/* frame size = 0 */
 1478               	/* stack size = 1 */
 1479               	.L__stack_usage = 1
 1480 040c C62F      		mov r28,r22
 641:setup.c       **** 	DDR_DATA7_0 = 0xFF; // Set data pins as outputs
 1481               		.loc 1 641 0
 1482 040e 2FEF      		ldi r18,lo8(-1)
 1483 0410 24BB      		out 0x14,r18
 642:setup.c       **** 	set_16bit_address(address);
 1484               		.loc 1 642 0
 1485 0412 00D0      		rcall set_16bit_address
 1486               	.LVL117:
 643:setup.c       **** 	PORT_DATA7_0 = data;
 1487               		.loc 1 643 0
 1488 0414 C5BB      		out 0x15,r28
 644:setup.c       **** 	
 645:setup.c       **** 	if (flashWriteWePin == WE_AS_AUDIO_PIN) { // Audio pin
 1489               		.loc 1 645 0
 1490 0416 8091 0000 		lds r24,flashWriteWePin
 1491 041a 8134      		cpi r24,lo8(65)
 1492 041c 01F4      		brne .L70
 646:setup.c       **** 		audioPin_low; // WE low
 1493               		.loc 1 646 0
 1494 041e 3998      		cbi 0x7,1
 647:setup.c       **** 		asm volatile("nop");
 1495               		.loc 1 647 0
 1496               	/* #APP */
 1497               	 ;  647 "setup.c" 1
 1498 0420 0000      		nop
 1499               	 ;  0 "" 2
 648:setup.c       **** 		asm volatile("nop");
 1500               		.loc 1 648 0
 1501               	 ;  648 "setup.c" 1
 1502 0422 0000      		nop
 1503               	 ;  0 "" 2
 649:setup.c       **** 		asm volatile("nop");
 1504               		.loc 1 649 0
 1505               	 ;  649 "setup.c" 1
 1506 0424 0000      		nop
 1507               	 ;  0 "" 2
 650:setup.c       **** 		audioPin_high; // WE high
 1508               		.loc 1 650 0
 1509               	/* #NOAPP */
 1510 0426 399A      		sbi 0x7,1
 1511 0428 00C0      		rjmp .L71
 1512               	.L70:
 651:setup.c       **** 	}
 652:setup.c       **** 	else { // WR pin
 653:setup.c       **** 		wrPin_low; // WE low
 1513               		.loc 1 653 0
 1514 042a 9698      		cbi 0x12,6
 654:setup.c       **** 		asm volatile("nop");
 1515               		.loc 1 654 0
 1516               	/* #APP */
 1517               	 ;  654 "setup.c" 1
 1518 042c 0000      		nop
 1519               	 ;  0 "" 2
 655:setup.c       **** 		asm volatile("nop");
 1520               		.loc 1 655 0
 1521               	 ;  655 "setup.c" 1
 1522 042e 0000      		nop
 1523               	 ;  0 "" 2
 656:setup.c       **** 		asm volatile("nop");
 1524               		.loc 1 656 0
 1525               	 ;  656 "setup.c" 1
 1526 0430 0000      		nop
 1527               	 ;  0 "" 2
 657:setup.c       **** 		wrPin_high; // WE high
 1528               		.loc 1 657 0
 1529               	/* #NOAPP */
 1530 0432 969A      		sbi 0x12,6
 1531               	.L71:
 658:setup.c       **** 	}
 659:setup.c       **** 	
 660:setup.c       **** 	// Clear data outputs and set data pins as inputs
 661:setup.c       **** 	PORT_DATA7_0 = 0;
 1532               		.loc 1 661 0
 1533 0434 15BA      		out 0x15,__zero_reg__
 662:setup.c       **** 	DDR_DATA7_0 = 0;
 1534               		.loc 1 662 0
 1535 0436 14BA      		out 0x14,__zero_reg__
 1536               	/* epilogue start */
 663:setup.c       **** }
 1537               		.loc 1 663 0
 1538 0438 CF91      		pop r28
 1539               	.LVL118:
 1540 043a 0895      		ret
 1541               		.cfi_endproc
 1542               	.LFE37:
 1544               	.global	gb_flash_write_byte
 1546               	gb_flash_write_byte:
 1547               	.LFB38:
 664:setup.c       **** 
 665:setup.c       **** // Write a single byte to the Flash address. Takes 10-50us to program each byte.
 666:setup.c       **** void gb_flash_write_byte(uint16_t address, uint8_t data) {
 1548               		.loc 1 666 0
 1549               		.cfi_startproc
 1550               	.LVL119:
 1551 043c 1F93      		push r17
 1552               	.LCFI26:
 1553               		.cfi_def_cfa_offset 3
 1554               		.cfi_offset 17, -2
 1555 043e CF93      		push r28
 1556               	.LCFI27:
 1557               		.cfi_def_cfa_offset 4
 1558               		.cfi_offset 28, -3
 1559 0440 DF93      		push r29
 1560               	.LCFI28:
 1561               		.cfi_def_cfa_offset 5
 1562               		.cfi_offset 29, -4
 1563               	/* prologue: function */
 1564               	/* frame size = 0 */
 1565               	/* stack size = 3 */
 1566               	.L__stack_usage = 3
 1567 0442 EC01      		movw r28,r24
 1568 0444 162F      		mov r17,r22
 667:setup.c       **** 	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
 1569               		.loc 1 667 0
 1570 0446 6091 0000 		lds r22,flashWriteCycle+2
 1571               	.LVL120:
 1572 044a 8091 0000 		lds r24,flashWriteCycle
 1573 044e 9091 0000 		lds r25,flashWriteCycle+1
 1574               	.LVL121:
 1575 0452 00D0      		rcall gb_flash_write_bus_cycle
 1576               	.LVL122:
 668:setup.c       **** 	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
 1577               		.loc 1 668 0
 1578 0454 6091 0000 		lds r22,flashWriteCycle+6
 1579 0458 8091 0000 		lds r24,flashWriteCycle+4
 1580 045c 9091 0000 		lds r25,flashWriteCycle+4+1
 1581 0460 00D0      		rcall gb_flash_write_bus_cycle
 1582               	.LVL123:
 669:setup.c       **** 	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
 1583               		.loc 1 669 0
 1584 0462 6091 0000 		lds r22,flashWriteCycle+10
 1585 0466 8091 0000 		lds r24,flashWriteCycle+8
 1586 046a 9091 0000 		lds r25,flashWriteCycle+8+1
 1587 046e 00D0      		rcall gb_flash_write_bus_cycle
 1588               	.LVL124:
 670:setup.c       **** 	gb_flash_write_bus_cycle(address, data);
 1589               		.loc 1 670 0
 1590 0470 612F      		mov r22,r17
 1591 0472 CE01      		movw r24,r28
 1592 0474 00D0      		rcall gb_flash_write_bus_cycle
 1593               	.LVL125:
 1594               	.LBB148:
 1595               	.LBB149:
 1596               		.loc 2 276 0
 1597 0476 8AE1      		ldi r24,lo8(26)
 1598 0478 8A95      	1:	dec r24
 1599 047a 01F4      		brne 1b
 1600 047c 00C0      		rjmp .
 1601               	.LVL126:
 1602               	.LBE149:
 1603               	.LBE148:
 671:setup.c       **** 	_delay_us(10); // Wait byte program time
 672:setup.c       **** 	
 673:setup.c       **** 	// Set data pins inputs
 674:setup.c       **** 	PORT_DATA7_0 = 0;
 1604               		.loc 1 674 0
 1605 047e 15BA      		out 0x15,__zero_reg__
 675:setup.c       **** 	DDR_DATA7_0 = 0;
 1606               		.loc 1 675 0
 1607 0480 14BA      		out 0x14,__zero_reg__
 676:setup.c       **** 	
 677:setup.c       **** 	// Verify data
 678:setup.c       **** 	uint8_t dataVerify = gb_flash_read_byte(address);
 1608               		.loc 1 678 0
 1609 0482 CE01      		movw r24,r28
 1610 0484 00D0      		rcall gb_flash_read_byte
 1611               	.LVL127:
 1612               	.L73:
 679:setup.c       **** 	while (data != dataVerify) {
 1613               		.loc 1 679 0
 1614 0486 8117      		cp r24,r17
 1615 0488 01F0      		breq .L75
 680:setup.c       **** 		dataVerify = gb_flash_read_byte(address);
 1616               		.loc 1 680 0
 1617 048a CE01      		movw r24,r28
 1618               	.LVL128:
 1619 048c 00D0      		rcall gb_flash_read_byte
 1620               	.LVL129:
 1621               	.LBB150:
 1622               	.LBB151:
 1623               		.loc 2 276 0
 1624 048e 9DE0      		ldi r25,lo8(13)
 1625 0490 9A95      	1:	dec r25
 1626 0492 01F4      		brne 1b
 1627 0494 0000      		nop
 1628 0496 00C0      		rjmp .L73
 1629               	.LVL130:
 1630               	.L75:
 1631               	/* epilogue start */
 1632               	.LBE151:
 1633               	.LBE150:
 681:setup.c       **** 		_delay_us(5);
 682:setup.c       **** 	}
 683:setup.c       **** }
 1634               		.loc 1 683 0
 1635 0498 DF91      		pop r29
 1636 049a CF91      		pop r28
 1637               	.LVL131:
 1638 049c 1F91      		pop r17
 1639               	.LVL132:
 1640 049e 0895      		ret
 1641               		.cfi_endproc
 1642               	.LFE38:
 1644               	.global	gb_flash_write_byte_bank1_commands
 1646               	gb_flash_write_byte_bank1_commands:
 1647               	.LFB39:
 684:setup.c       **** 
 685:setup.c       **** // Write a single byte to the Flash address. Takes 10-50us to program each byte. 
 686:setup.c       **** // Switch to bank 1 to issue flash commands, then switch back to the bank we were at before
 687:setup.c       **** void gb_flash_write_byte_bank1_commands(uint16_t address, uint8_t data) {
 1648               		.loc 1 687 0
 1649               		.cfi_startproc
 1650               	.LVL133:
 1651 04a0 FF92      		push r15
 1652               	.LCFI29:
 1653               		.cfi_def_cfa_offset 3
 1654               		.cfi_offset 15, -2
 1655 04a2 0F93      		push r16
 1656               	.LCFI30:
 1657               		.cfi_def_cfa_offset 4
 1658               		.cfi_offset 16, -3
 1659 04a4 1F93      		push r17
 1660               	.LCFI31:
 1661               		.cfi_def_cfa_offset 5
 1662               		.cfi_offset 17, -4
 1663 04a6 CF93      		push r28
 1664               	.LCFI32:
 1665               		.cfi_def_cfa_offset 6
 1666               		.cfi_offset 28, -5
 1667 04a8 DF93      		push r29
 1668               	.LCFI33:
 1669               		.cfi_def_cfa_offset 7
 1670               		.cfi_offset 29, -6
 1671               	/* prologue: function */
 1672               	/* frame size = 0 */
 1673               	/* stack size = 5 */
 1674               	.L__stack_usage = 5
 1675 04aa EC01      		movw r28,r24
 1676 04ac 162F      		mov r17,r22
 688:setup.c       **** 	// Set bank 1
 689:setup.c       **** 	DDR_DATA7_0 = 0xFF;
 1677               		.loc 1 689 0
 1678 04ae FF24      		clr r15
 1679 04b0 FA94      		dec r15
 1680 04b2 F4BA      		out 0x14,r15
 1681               	.LVL134:
 1682               	.LBB152:
 1683               	.LBB153:
 245:setup.c       **** 	PORT_ADDR7_0 = (address & 0xFF);
 1684               		.loc 1 245 0
 1685 04b4 01E2      		ldi r16,lo8(33)
 1686 04b6 0BBB      		out 0x1b,r16
 246:setup.c       **** }
 1687               		.loc 1 246 0
 1688 04b8 18BA      		out 0x18,__zero_reg__
 1689               	.LVL135:
 1690               	.LBE153:
 1691               	.LBE152:
 690:setup.c       **** 	set_16bit_address(0x2100);
 691:setup.c       **** 	PORT_DATA7_0 = 1;
 1692               		.loc 1 691 0
 1693 04ba 81E0      		ldi r24,lo8(1)
 1694               	.LVL136:
 1695 04bc 85BB      		out 0x15,r24
 692:setup.c       **** 	wrPin_low; // Pulse WR
 1696               		.loc 1 692 0
 1697 04be 9698      		cbi 0x12,6
 693:setup.c       **** 	asm volatile("nop");
 1698               		.loc 1 693 0
 1699               	/* #APP */
 1700               	 ;  693 "setup.c" 1
 1701 04c0 0000      		nop
 1702               	 ;  0 "" 2
 694:setup.c       **** 	wrPin_high;
 1703               		.loc 1 694 0
 1704               	/* #NOAPP */
 1705 04c2 969A      		sbi 0x12,6
 695:setup.c       **** 	
 696:setup.c       **** 	gb_flash_write_bus_cycle(flashWriteCycle[0][0], flashWriteCycle[0][1]);
 1706               		.loc 1 696 0
 1707 04c4 6091 0000 		lds r22,flashWriteCycle+2
 1708               	.LVL137:
 1709 04c8 8091 0000 		lds r24,flashWriteCycle
 1710 04cc 9091 0000 		lds r25,flashWriteCycle+1
 1711 04d0 00D0      		rcall gb_flash_write_bus_cycle
 1712               	.LVL138:
 697:setup.c       **** 	gb_flash_write_bus_cycle(flashWriteCycle[1][0], flashWriteCycle[1][1]);
 1713               		.loc 1 697 0
 1714 04d2 6091 0000 		lds r22,flashWriteCycle+6
 1715 04d6 8091 0000 		lds r24,flashWriteCycle+4
 1716 04da 9091 0000 		lds r25,flashWriteCycle+4+1
 1717 04de 00D0      		rcall gb_flash_write_bus_cycle
 1718               	.LVL139:
 698:setup.c       **** 	gb_flash_write_bus_cycle(flashWriteCycle[2][0], flashWriteCycle[2][1]);
 1719               		.loc 1 698 0
 1720 04e0 6091 0000 		lds r22,flashWriteCycle+10
 1721 04e4 8091 0000 		lds r24,flashWriteCycle+8
 1722 04e8 9091 0000 		lds r25,flashWriteCycle+8+1
 1723 04ec 00D0      		rcall gb_flash_write_bus_cycle
 1724               	.LVL140:
 699:setup.c       **** 	
 700:setup.c       **** 	
 701:setup.c       **** 	// Set bank back
 702:setup.c       **** 	DDR_DATA7_0 = 0xFF;
 1725               		.loc 1 702 0
 1726 04ee F4BA      		out 0x14,r15
 1727               	.LVL141:
 1728               	.LBB154:
 1729               	.LBB155:
 245:setup.c       **** 	PORT_ADDR7_0 = (address & 0xFF);
 1730               		.loc 1 245 0
 1731 04f0 0BBB      		out 0x1b,r16
 246:setup.c       **** }
 1732               		.loc 1 246 0
 1733 04f2 18BA      		out 0x18,__zero_reg__
 1734               	.LVL142:
 1735               	.LBE155:
 1736               	.LBE154:
 703:setup.c       **** 	set_16bit_address(0x2100);
 704:setup.c       **** 	PORT_DATA7_0 = lastBankAccessed;
 1737               		.loc 1 704 0
 1738 04f4 8091 0000 		lds r24,lastBankAccessed
 1739 04f8 85BB      		out 0x15,r24
 705:setup.c       **** 	wrPin_low; // Pulse WR
 1740               		.loc 1 705 0
 1741 04fa 9698      		cbi 0x12,6
 706:setup.c       **** 	asm volatile("nop");
 1742               		.loc 1 706 0
 1743               	/* #APP */
 1744               	 ;  706 "setup.c" 1
 1745 04fc 0000      		nop
 1746               	 ;  0 "" 2
 707:setup.c       **** 	wrPin_high;
 1747               		.loc 1 707 0
 1748               	/* #NOAPP */
 1749 04fe 969A      		sbi 0x12,6
 708:setup.c       **** 	
 709:setup.c       **** 	gb_flash_write_bus_cycle(address, data);
 1750               		.loc 1 709 0
 1751 0500 612F      		mov r22,r17
 1752 0502 CE01      		movw r24,r28
 1753 0504 00D0      		rcall gb_flash_write_bus_cycle
 1754               	.LVL143:
 1755               	.LBB156:
 1756               	.LBB157:
 1757               		.loc 2 276 0
 1758 0506 8AE1      		ldi r24,lo8(26)
 1759 0508 8A95      	1:	dec r24
 1760 050a 01F4      		brne 1b
 1761 050c 00C0      		rjmp .
 1762               	.LVL144:
 1763               	.LBE157:
 1764               	.LBE156:
 710:setup.c       **** 	_delay_us(10); // Wait byte program time
 711:setup.c       **** 	
 712:setup.c       **** 	// Set data pins inputs
 713:setup.c       **** 	PORT_DATA7_0 = 0;
 1765               		.loc 1 713 0
 1766 050e 15BA      		out 0x15,__zero_reg__
 714:setup.c       **** 	DDR_DATA7_0 = 0;
 1767               		.loc 1 714 0
 1768 0510 14BA      		out 0x14,__zero_reg__
 715:setup.c       **** 	
 716:setup.c       **** 	// Verify data
 717:setup.c       **** 	uint8_t dataVerify = gb_flash_read_byte(address);
 1769               		.loc 1 717 0
 1770 0512 CE01      		movw r24,r28
 1771 0514 00D0      		rcall gb_flash_read_byte
 1772               	.LVL145:
 1773               	.L77:
 718:setup.c       **** 	while (data != dataVerify) {
 1774               		.loc 1 718 0
 1775 0516 8117      		cp r24,r17
 1776 0518 01F0      		breq .L79
 719:setup.c       **** 		dataVerify = gb_flash_read_byte(address);
 1777               		.loc 1 719 0
 1778 051a CE01      		movw r24,r28
 1779               	.LVL146:
 1780 051c 00D0      		rcall gb_flash_read_byte
 1781               	.LVL147:
 1782               	.LBB158:
 1783               	.LBB159:
 1784               		.loc 2 276 0
 1785 051e 9DE0      		ldi r25,lo8(13)
 1786 0520 9A95      	1:	dec r25
 1787 0522 01F4      		brne 1b
 1788 0524 0000      		nop
 1789 0526 00C0      		rjmp .L77
 1790               	.LVL148:
 1791               	.L79:
 1792               	/* epilogue start */
 1793               	.LBE159:
 1794               	.LBE158:
 720:setup.c       **** 		_delay_us(5);
 721:setup.c       **** 	}
 722:setup.c       **** }
 1795               		.loc 1 722 0
 1796 0528 DF91      		pop r29
 1797 052a CF91      		pop r28
 1798               	.LVL149:
 1799 052c 1F91      		pop r17
 1800               	.LVL150:
 1801 052e 0F91      		pop r16
 1802 0530 FF90      		pop r15
 1803 0532 0895      		ret
 1804               		.cfi_endproc
 1805               	.LFE39:
 1807               	.global	gba_flash_write_bus_cycle
 1809               	gba_flash_write_bus_cycle:
 1810               	.LFB40:
 723:setup.c       **** 
 724:setup.c       **** 
 725:setup.c       **** 
 726:setup.c       **** // ---------- GBA FLASH CARTS ----------
 727:setup.c       **** 
 728:setup.c       **** // Set the 24 bit address and 16 bit data for the write byte cycle to the flash (pulse WR pin)
 729:setup.c       **** void gba_flash_write_bus_cycle(uint32_t address, uint16_t data) {
 1811               		.loc 1 729 0
 1812               		.cfi_startproc
 1813               	.LVL151:
 1814 0534 0F93      		push r16
 1815               	.LCFI34:
 1816               		.cfi_def_cfa_offset 3
 1817               		.cfi_offset 16, -2
 1818 0536 1F93      		push r17
 1819               	.LCFI35:
 1820               		.cfi_def_cfa_offset 4
 1821               		.cfi_offset 17, -3
 1822               	/* prologue: function */
 1823               	/* frame size = 0 */
 1824               	/* stack size = 2 */
 1825               	.L__stack_usage = 2
 730:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = (address >> 16);
 1826               		.loc 1 730 0
 1827 0538 8C01      		movw r16,r24
 1828 053a 2227      		clr r18
 1829 053c 3327      		clr r19
 1830 053e 05BB      		out 0x15,r16
 731:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = (address >> 8);
 1831               		.loc 1 731 0
 1832 0540 072F      		mov r16,r23
 1833 0542 182F      		mov r17,r24
 1834 0544 292F      		mov r18,r25
 1835 0546 3327      		clr r19
 1836 0548 0BBB      		out 0x1b,r16
 732:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = (address & 0xFF);
 1837               		.loc 1 732 0
 1838 054a 68BB      		out 0x18,r22
 733:setup.c       **** 	
 734:setup.c       **** 	cs_mreqPin_low;
 1839               		.loc 1 734 0
 1840 054c 9498      		cbi 0x12,4
 735:setup.c       **** 	
 736:setup.c       **** 	GBA_PORT_ROM_DATA15_8 = data >> 8; // Set data
 1841               		.loc 1 736 0
 1842 054e 5BBB      		out 0x1b,r21
 737:setup.c       **** 	GBA_PORT_ROM_DATA7_0 = data & 0xFF;
 1843               		.loc 1 737 0
 1844 0550 48BB      		out 0x18,r20
 738:setup.c       **** 	
 739:setup.c       **** 	wrPin_low;
 1845               		.loc 1 739 0
 1846 0552 9698      		cbi 0x12,6
 740:setup.c       **** 	asm volatile("nop");
 1847               		.loc 1 740 0
 1848               	/* #APP */
 1849               	 ;  740 "setup.c" 1
 1850 0554 0000      		nop
 1851               	 ;  0 "" 2
 741:setup.c       **** 	asm volatile("nop");
 1852               		.loc 1 741 0
 1853               	 ;  741 "setup.c" 1
 1854 0556 0000      		nop
 1855               	 ;  0 "" 2
 742:setup.c       **** 	asm volatile("nop");
 1856               		.loc 1 742 0
 1857               	 ;  742 "setup.c" 1
 1858 0558 0000      		nop
 1859               	 ;  0 "" 2
 743:setup.c       **** 	wrPin_high;
 1860               		.loc 1 743 0
 1861               	/* #NOAPP */
 1862 055a 969A      		sbi 0x12,6
 744:setup.c       **** 	cs_mreqPin_high;
 1863               		.loc 1 744 0
 1864 055c 949A      		sbi 0x12,4
 1865               	/* epilogue start */
 745:setup.c       **** }
 1866               		.loc 1 745 0
 1867 055e 1F91      		pop r17
 1868 0560 0F91      		pop r16
 1869 0562 0895      		ret
 1870               		.cfi_endproc
 1871               	.LFE40:
 1873               	.global	gba_flash_write_cycle_start_swapped
 1875               	gba_flash_write_cycle_start_swapped:
 1876               	.LFB41:
 746:setup.c       **** 
 747:setup.c       **** // Send the first 3 write cycles to the flash (swapped D0/D1)
 748:setup.c       **** void gba_flash_write_cycle_start_swapped(void) {
 1877               		.loc 1 748 0
 1878               		.cfi_startproc
 1879               	/* prologue: function */
 1880               	/* frame size = 0 */
 1881               	/* stack size = 0 */
 1882               	.L__stack_usage = 0
 749:setup.c       **** 	// Set outputs
 750:setup.c       **** 	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 1883               		.loc 1 750 0
 1884 0564 8FEF      		ldi r24,lo8(-1)
 1885 0566 84BB      		out 0x14,r24
 751:setup.c       **** 	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 1886               		.loc 1 751 0
 1887 0568 8ABB      		out 0x1a,r24
 752:setup.c       **** 	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 1888               		.loc 1 752 0
 1889 056a 87BB      		out 0x17,r24
 753:setup.c       **** 	
 754:setup.c       **** 	// 0x555, 0xA9
 755:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0;
 1890               		.loc 1 755 0
 1891 056c 15BA      		out 0x15,__zero_reg__
 756:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0x05;
 1892               		.loc 1 756 0
 1893 056e 95E0      		ldi r25,lo8(5)
 1894 0570 9BBB      		out 0x1b,r25
 757:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0x55;
 1895               		.loc 1 757 0
 1896 0572 85E5      		ldi r24,lo8(85)
 1897 0574 88BB      		out 0x18,r24
 758:setup.c       **** 	cs_mreqPin_low;
 1898               		.loc 1 758 0
 1899 0576 9498      		cbi 0x12,4
 759:setup.c       **** 	GBA_PORT_ROM_DATA15_8 = 0; // Set data
 1900               		.loc 1 759 0
 1901 0578 1BBA      		out 0x1b,__zero_reg__
 760:setup.c       **** 	GBA_PORT_ROM_DATA7_0 = 0xA9;
 1902               		.loc 1 760 0
 1903 057a 29EA      		ldi r18,lo8(-87)
 1904 057c 28BB      		out 0x18,r18
 761:setup.c       **** 	wrPin_low;
 1905               		.loc 1 761 0
 1906 057e 9698      		cbi 0x12,6
 762:setup.c       **** 	asm volatile("nop");
 1907               		.loc 1 762 0
 1908               	/* #APP */
 1909               	 ;  762 "setup.c" 1
 1910 0580 0000      		nop
 1911               	 ;  0 "" 2
 763:setup.c       **** 	asm volatile("nop");
 1912               		.loc 1 763 0
 1913               	 ;  763 "setup.c" 1
 1914 0582 0000      		nop
 1915               	 ;  0 "" 2
 764:setup.c       **** 	asm volatile("nop");
 1916               		.loc 1 764 0
 1917               	 ;  764 "setup.c" 1
 1918 0584 0000      		nop
 1919               	 ;  0 "" 2
 765:setup.c       **** 	wrPin_high;
 1920               		.loc 1 765 0
 1921               	/* #NOAPP */
 1922 0586 969A      		sbi 0x12,6
 766:setup.c       **** 	cs_mreqPin_high;
 1923               		.loc 1 766 0
 1924 0588 949A      		sbi 0x12,4
 767:setup.c       **** 	
 768:setup.c       **** 	// 0x2AA, 0x56
 769:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0;
 1925               		.loc 1 769 0
 1926 058a 15BA      		out 0x15,__zero_reg__
 770:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0x02;
 1927               		.loc 1 770 0
 1928 058c 22E0      		ldi r18,lo8(2)
 1929 058e 2BBB      		out 0x1b,r18
 771:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0xAA;
 1930               		.loc 1 771 0
 1931 0590 2AEA      		ldi r18,lo8(-86)
 1932 0592 28BB      		out 0x18,r18
 772:setup.c       **** 	cs_mreqPin_low;
 1933               		.loc 1 772 0
 1934 0594 9498      		cbi 0x12,4
 773:setup.c       **** 	GBA_PORT_ROM_DATA15_8 = 0; // Set data
 1935               		.loc 1 773 0
 1936 0596 1BBA      		out 0x1b,__zero_reg__
 774:setup.c       **** 	GBA_PORT_ROM_DATA7_0 = 0x56;
 1937               		.loc 1 774 0
 1938 0598 26E5      		ldi r18,lo8(86)
 1939 059a 28BB      		out 0x18,r18
 775:setup.c       **** 	wrPin_low;
 1940               		.loc 1 775 0
 1941 059c 9698      		cbi 0x12,6
 776:setup.c       **** 	asm volatile("nop");
 1942               		.loc 1 776 0
 1943               	/* #APP */
 1944               	 ;  776 "setup.c" 1
 1945 059e 0000      		nop
 1946               	 ;  0 "" 2
 777:setup.c       **** 	asm volatile("nop");
 1947               		.loc 1 777 0
 1948               	 ;  777 "setup.c" 1
 1949 05a0 0000      		nop
 1950               	 ;  0 "" 2
 778:setup.c       **** 	asm volatile("nop");
 1951               		.loc 1 778 0
 1952               	 ;  778 "setup.c" 1
 1953 05a2 0000      		nop
 1954               	 ;  0 "" 2
 779:setup.c       **** 	wrPin_high;
 1955               		.loc 1 779 0
 1956               	/* #NOAPP */
 1957 05a4 969A      		sbi 0x12,6
 780:setup.c       **** 	cs_mreqPin_high;
 1958               		.loc 1 780 0
 1959 05a6 949A      		sbi 0x12,4
 781:setup.c       **** 	
 782:setup.c       **** 	// 0x555, 0xA0;
 783:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0;
 1960               		.loc 1 783 0
 1961 05a8 15BA      		out 0x15,__zero_reg__
 784:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0x05;
 1962               		.loc 1 784 0
 1963 05aa 9BBB      		out 0x1b,r25
 785:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0x55;
 1964               		.loc 1 785 0
 1965 05ac 88BB      		out 0x18,r24
 786:setup.c       **** 	cs_mreqPin_low;
 1966               		.loc 1 786 0
 1967 05ae 9498      		cbi 0x12,4
 787:setup.c       **** 	GBA_PORT_ROM_DATA15_8 = 0; // Set data
 1968               		.loc 1 787 0
 1969 05b0 1BBA      		out 0x1b,__zero_reg__
 788:setup.c       **** 	GBA_PORT_ROM_DATA7_0 = 0xA0;
 1970               		.loc 1 788 0
 1971 05b2 80EA      		ldi r24,lo8(-96)
 1972 05b4 88BB      		out 0x18,r24
 789:setup.c       **** 	wrPin_low;
 1973               		.loc 1 789 0
 1974 05b6 9698      		cbi 0x12,6
 790:setup.c       **** 	asm volatile("nop");
 1975               		.loc 1 790 0
 1976               	/* #APP */
 1977               	 ;  790 "setup.c" 1
 1978 05b8 0000      		nop
 1979               	 ;  0 "" 2
 791:setup.c       **** 	asm volatile("nop");
 1980               		.loc 1 791 0
 1981               	 ;  791 "setup.c" 1
 1982 05ba 0000      		nop
 1983               	 ;  0 "" 2
 792:setup.c       **** 	asm volatile("nop");
 1984               		.loc 1 792 0
 1985               	 ;  792 "setup.c" 1
 1986 05bc 0000      		nop
 1987               	 ;  0 "" 2
 793:setup.c       **** 	wrPin_high;
 1988               		.loc 1 793 0
 1989               	/* #NOAPP */
 1990 05be 969A      		sbi 0x12,6
 794:setup.c       **** 	cs_mreqPin_high;
 1991               		.loc 1 794 0
 1992 05c0 949A      		sbi 0x12,4
 1993 05c2 0895      		ret
 1994               		.cfi_endproc
 1995               	.LFE41:
 1997               	.global	gba_flash_write_cycle_start
 1999               	gba_flash_write_cycle_start:
 2000               	.LFB42:
 795:setup.c       **** }
 796:setup.c       **** 
 797:setup.c       **** 
 798:setup.c       **** // Send the first 3 write cycles to the flash
 799:setup.c       **** void gba_flash_write_cycle_start(void) {
 2001               		.loc 1 799 0
 2002               		.cfi_startproc
 2003               	/* prologue: function */
 2004               	/* frame size = 0 */
 2005               	/* stack size = 0 */
 2006               	.L__stack_usage = 0
 800:setup.c       **** 	// Set outputs
 801:setup.c       **** 	GBA_DDR_ROM_ADDR23_16 = 0xFF;
 2007               		.loc 1 801 0
 2008 05c4 8FEF      		ldi r24,lo8(-1)
 2009 05c6 84BB      		out 0x14,r24
 802:setup.c       **** 	GBA_DDR_ROM_ADDR15_8 = 0xFF;
 2010               		.loc 1 802 0
 2011 05c8 8ABB      		out 0x1a,r24
 803:setup.c       **** 	GBA_DDR_ROM_ADDR7_0 = 0xFF;
 2012               		.loc 1 803 0
 2013 05ca 87BB      		out 0x17,r24
 804:setup.c       **** 	
 805:setup.c       **** 	// 0x555, 0xAA
 806:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0;
 2014               		.loc 1 806 0
 2015 05cc 15BA      		out 0x15,__zero_reg__
 807:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0x05;
 2016               		.loc 1 807 0
 2017 05ce 95E0      		ldi r25,lo8(5)
 2018 05d0 9BBB      		out 0x1b,r25
 808:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0x55;
 2019               		.loc 1 808 0
 2020 05d2 85E5      		ldi r24,lo8(85)
 2021 05d4 88BB      		out 0x18,r24
 809:setup.c       **** 	cs_mreqPin_low;
 2022               		.loc 1 809 0
 2023 05d6 9498      		cbi 0x12,4
 810:setup.c       **** 	GBA_PORT_ROM_DATA15_8 = 0; // Set data
 2024               		.loc 1 810 0
 2025 05d8 1BBA      		out 0x1b,__zero_reg__
 811:setup.c       **** 	GBA_PORT_ROM_DATA7_0 = 0xAA;
 2026               		.loc 1 811 0
 2027 05da 2AEA      		ldi r18,lo8(-86)
 2028 05dc 28BB      		out 0x18,r18
 812:setup.c       **** 	wrPin_low;
 2029               		.loc 1 812 0
 2030 05de 9698      		cbi 0x12,6
 813:setup.c       **** 	asm volatile("nop");
 2031               		.loc 1 813 0
 2032               	/* #APP */
 2033               	 ;  813 "setup.c" 1
 2034 05e0 0000      		nop
 2035               	 ;  0 "" 2
 814:setup.c       **** 	asm volatile("nop");
 2036               		.loc 1 814 0
 2037               	 ;  814 "setup.c" 1
 2038 05e2 0000      		nop
 2039               	 ;  0 "" 2
 815:setup.c       **** 	asm volatile("nop");
 2040               		.loc 1 815 0
 2041               	 ;  815 "setup.c" 1
 2042 05e4 0000      		nop
 2043               	 ;  0 "" 2
 816:setup.c       **** 	wrPin_high;
 2044               		.loc 1 816 0
 2045               	/* #NOAPP */
 2046 05e6 969A      		sbi 0x12,6
 817:setup.c       **** 	cs_mreqPin_high;
 2047               		.loc 1 817 0
 2048 05e8 949A      		sbi 0x12,4
 818:setup.c       **** 	
 819:setup.c       **** 	// 0x2AA, 0x55
 820:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0;
 2049               		.loc 1 820 0
 2050 05ea 15BA      		out 0x15,__zero_reg__
 821:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0x02;
 2051               		.loc 1 821 0
 2052 05ec 32E0      		ldi r19,lo8(2)
 2053 05ee 3BBB      		out 0x1b,r19
 822:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0xAA;
 2054               		.loc 1 822 0
 2055 05f0 28BB      		out 0x18,r18
 823:setup.c       **** 	cs_mreqPin_low;
 2056               		.loc 1 823 0
 2057 05f2 9498      		cbi 0x12,4
 824:setup.c       **** 	GBA_PORT_ROM_DATA15_8 = 0; // Set data
 2058               		.loc 1 824 0
 2059 05f4 1BBA      		out 0x1b,__zero_reg__
 825:setup.c       **** 	GBA_PORT_ROM_DATA7_0 = 0x55;
 2060               		.loc 1 825 0
 2061 05f6 88BB      		out 0x18,r24
 826:setup.c       **** 	wrPin_low;
 2062               		.loc 1 826 0
 2063 05f8 9698      		cbi 0x12,6
 827:setup.c       **** 	asm volatile("nop");
 2064               		.loc 1 827 0
 2065               	/* #APP */
 2066               	 ;  827 "setup.c" 1
 2067 05fa 0000      		nop
 2068               	 ;  0 "" 2
 828:setup.c       **** 	asm volatile("nop");
 2069               		.loc 1 828 0
 2070               	 ;  828 "setup.c" 1
 2071 05fc 0000      		nop
 2072               	 ;  0 "" 2
 829:setup.c       **** 	asm volatile("nop");
 2073               		.loc 1 829 0
 2074               	 ;  829 "setup.c" 1
 2075 05fe 0000      		nop
 2076               	 ;  0 "" 2
 830:setup.c       **** 	wrPin_high;
 2077               		.loc 1 830 0
 2078               	/* #NOAPP */
 2079 0600 969A      		sbi 0x12,6
 831:setup.c       **** 	cs_mreqPin_high;
 2080               		.loc 1 831 0
 2081 0602 949A      		sbi 0x12,4
 832:setup.c       **** 	
 833:setup.c       **** 	// 0x555, 0xA0;
 834:setup.c       **** 	GBA_PORT_ROM_ADDR23_16 = 0;
 2082               		.loc 1 834 0
 2083 0604 15BA      		out 0x15,__zero_reg__
 835:setup.c       **** 	GBA_PORT_ROM_ADDR15_8 = 0x05;
 2084               		.loc 1 835 0
 2085 0606 9BBB      		out 0x1b,r25
 836:setup.c       **** 	GBA_PORT_ROM_ADDR7_0 = 0x55;
 2086               		.loc 1 836 0
 2087 0608 88BB      		out 0x18,r24
 837:setup.c       **** 	cs_mreqPin_low;
 2088               		.loc 1 837 0
 2089 060a 9498      		cbi 0x12,4
 838:setup.c       **** 	GBA_PORT_ROM_DATA15_8 = 0; // Set data
 2090               		.loc 1 838 0
 2091 060c 1BBA      		out 0x1b,__zero_reg__
 839:setup.c       **** 	GBA_PORT_ROM_DATA7_0 = 0xA0;
 2092               		.loc 1 839 0
 2093 060e 80EA      		ldi r24,lo8(-96)
 2094 0610 88BB      		out 0x18,r24
 840:setup.c       **** 	wrPin_low;
 2095               		.loc 1 840 0
 2096 0612 9698      		cbi 0x12,6
 841:setup.c       **** 	asm volatile("nop");
 2097               		.loc 1 841 0
 2098               	/* #APP */
 2099               	 ;  841 "setup.c" 1
 2100 0614 0000      		nop
 2101               	 ;  0 "" 2
 842:setup.c       **** 	asm volatile("nop");
 2102               		.loc 1 842 0
 2103               	 ;  842 "setup.c" 1
 2104 0616 0000      		nop
 2105               	 ;  0 "" 2
 843:setup.c       **** 	asm volatile("nop");
 2106               		.loc 1 843 0
 2107               	 ;  843 "setup.c" 1
 2108 0618 0000      		nop
 2109               	 ;  0 "" 2
 844:setup.c       **** 	wrPin_high;
 2110               		.loc 1 844 0
 2111               	/* #NOAPP */
 2112 061a 969A      		sbi 0x12,6
 845:setup.c       **** 	cs_mreqPin_high;
 2113               		.loc 1 845 0
 2114 061c 949A      		sbi 0x12,4
 2115 061e 0895      		ret
 2116               		.cfi_endproc
 2117               	.LFE42:
 2119               	.global	gba_flash_write_byte
 2121               	gba_flash_write_byte:
 2122               	.LFB43:
 846:setup.c       **** }	
 847:setup.c       **** 
 848:setup.c       **** 
 849:setup.c       **** // Write 2 bytes to the Flash address. Time to wait depends on Flash, we will query it to verify th
 850:setup.c       **** // Address is divided by 2 as we are in GBA mode. 
 851:setup.c       **** void gba_flash_write_byte(uint32_t address, uint16_t data, uint8_t isD0D1Swapped) {
 2123               		.loc 1 851 0
 2124               		.cfi_startproc
 2125               	.LVL152:
 2126 0620 CF92      		push r12
 2127               	.LCFI36:
 2128               		.cfi_def_cfa_offset 3
 2129               		.cfi_offset 12, -2
 2130 0622 DF92      		push r13
 2131               	.LCFI37:
 2132               		.cfi_def_cfa_offset 4
 2133               		.cfi_offset 13, -3
 2134 0624 EF92      		push r14
 2135               	.LCFI38:
 2136               		.cfi_def_cfa_offset 5
 2137               		.cfi_offset 14, -4
 2138 0626 FF92      		push r15
 2139               	.LCFI39:
 2140               		.cfi_def_cfa_offset 6
 2141               		.cfi_offset 15, -5
 2142 0628 CF93      		push r28
 2143               	.LCFI40:
 2144               		.cfi_def_cfa_offset 7
 2145               		.cfi_offset 28, -6
 2146 062a DF93      		push r29
 2147               	.LCFI41:
 2148               		.cfi_def_cfa_offset 8
 2149               		.cfi_offset 29, -7
 2150               	/* prologue: function */
 2151               	/* frame size = 0 */
 2152               	/* stack size = 6 */
 2153               	.L__stack_usage = 6
 2154 062c 6B01      		movw r12,r22
 2155 062e 7C01      		movw r14,r24
 2156 0630 EA01      		movw r28,r20
 852:setup.c       **** 	if (isD0D1Swapped == 0) {
 2157               		.loc 1 852 0
 2158 0632 2111      		cpse r18,__zero_reg__
 2159 0634 00C0      		rjmp .L84
 853:setup.c       **** 		gba_flash_write_cycle_start();
 2160               		.loc 1 853 0
 2161 0636 00D0      		rcall gba_flash_write_cycle_start
 2162               	.LVL153:
 2163 0638 00C0      		rjmp .L85
 2164               	.LVL154:
 2165               	.L84:
 854:setup.c       **** 	}
 855:setup.c       **** 	else {
 856:setup.c       **** 		gba_flash_write_cycle_start_swapped();
 2166               		.loc 1 856 0
 2167 063a 00D0      		rcall gba_flash_write_cycle_start_swapped
 2168               	.LVL155:
 2169               	.L85:
 857:setup.c       **** 	}
 858:setup.c       **** 	gba_flash_write_bus_cycle(address, data);
 2170               		.loc 1 858 0
 2171 063c AE01      		movw r20,r28
 2172 063e C701      		movw r24,r14
 2173 0640 B601      		movw r22,r12
 2174 0642 00D0      		rcall gba_flash_write_bus_cycle
 2175               	.LVL156:
 2176               	.LBB160:
 2177               	.LBB161:
 2178               		.loc 2 276 0
 2179 0644 25E0      		ldi r18,lo8(5)
 2180 0646 2A95      	1:	dec r18
 2181 0648 01F4      		brne 1b
 2182 064a 0000      		nop
 2183               	.LVL157:
 2184               	.LBE161:
 2185               	.LBE160:
 859:setup.c       **** 	_delay_us(2); // Wait byte program time
 860:setup.c       **** 	
 861:setup.c       **** 	// Verify data
 862:setup.c       **** 	uint16_t dataVerify = gba_read_16bit_data(address);
 2186               		.loc 1 862 0
 2187 064c C701      		movw r24,r14
 2188 064e B601      		movw r22,r12
 2189 0650 00D0      		rcall gba_read_16bit_data
 2190               	.LVL158:
 2191               	.L86:
 863:setup.c       **** 	while (data != dataVerify) {
 2192               		.loc 1 863 0
 2193 0652 8C17      		cp r24,r28
 2194 0654 9D07      		cpc r25,r29
 2195 0656 01F0      		breq .L88
 864:setup.c       **** 		dataVerify = gba_read_16bit_data(address);
 2196               		.loc 1 864 0
 2197 0658 C701      		movw r24,r14
 2198 065a B601      		movw r22,r12
 2199 065c 00D0      		rcall gba_read_16bit_data
 2200               	.LVL159:
 2201               	.LBB162:
 2202               	.LBB163:
 2203               		.loc 2 276 0
 2204 065e 25E0      		ldi r18,lo8(5)
 2205 0660 2A95      	1:	dec r18
 2206 0662 01F4      		brne 1b
 2207 0664 0000      		nop
 2208 0666 00C0      		rjmp .L86
 2209               	.LVL160:
 2210               	.L88:
 2211               	/* epilogue start */
 2212               	.LBE163:
 2213               	.LBE162:
 865:setup.c       **** 		_delay_us(2);
 866:setup.c       **** 	}
 867:setup.c       **** }
 2214               		.loc 1 867 0
 2215 0668 DF91      		pop r29
 2216 066a CF91      		pop r28
 2217               	.LVL161:
 2218 066c FF90      		pop r15
 2219 066e EF90      		pop r14
 2220 0670 DF90      		pop r13
 2221 0672 CF90      		pop r12
 2222               	.LVL162:
 2223 0674 0895      		ret
 2224               		.cfi_endproc
 2225               	.LFE43:
 2227               	.global	setup
 2229               	setup:
 2230               	.LFB44:
 868:setup.c       **** 
 869:setup.c       **** 
 870:setup.c       **** // Setup
 871:setup.c       **** void setup(void) {
 2231               		.loc 1 871 0
 2232               		.cfi_startproc
 2233               	/* prologue: function */
 2234               	/* frame size = 0 */
 2235               	/* stack size = 0 */
 2236               	.L__stack_usage = 0
 872:setup.c       **** 	// Turn off watchdog
 873:setup.c       **** 	MCUCSR &= ~(1<<WDRF);
 2237               		.loc 1 873 0
 2238 0676 84B7      		in r24,0x34
 2239 0678 877F      		andi r24,lo8(-9)
 2240 067a 84BF      		out 0x34,r24
 874:setup.c       **** 	WDTCR = (1<<WDCE) | (1<<WDE);
 2241               		.loc 1 874 0
 2242 067c 88E1      		ldi r24,lo8(24)
 2243 067e 81BD      		out 0x21,r24
 875:setup.c       **** 	WDTCR = 0;
 2244               		.loc 1 875 0
 2245 0680 11BC      		out 0x21,__zero_reg__
 876:setup.c       **** 	
 877:setup.c       **** 	// Reset common lines
 878:setup.c       **** 	rd_wr_csmreq_cs2_reset();
 2246               		.loc 1 878 0
 2247 0682 00D0      		rcall rd_wr_csmreq_cs2_reset
 2248               	.LVL163:
 879:setup.c       **** 	
 880:setup.c       **** 	// Set outputs
 881:setup.c       **** 	DDRD |= (1<<ACTIVITY_LED) | (1<<WR_PIN) | (1<<RD_PIN) | (1<<CS_MREQ_PIN) | (1<<LED_5V);
 2249               		.loc 1 881 0
 2250 0684 81B3      		in r24,0x11
 2251 0686 886F      		ori r24,lo8(-8)
 2252 0688 81BB      		out 0x11,r24
 882:setup.c       **** 	DDRE |= (1<<CS2_PIN) | (1<<LED_3V);
 2253               		.loc 1 882 0
 2254 068a 86B1      		in r24,0x6
 2255 068c 8560      		ori r24,lo8(5)
 2256 068e 86B9      		out 0x6,r24
 883:setup.c       **** 	
 884:setup.c       **** 	// Set all pins as inputs
 885:setup.c       **** 	PORT_DATA7_0 = 0;
 2257               		.loc 1 885 0
 2258 0690 15BA      		out 0x15,__zero_reg__
 886:setup.c       **** 	DDR_DATA7_0 = 0;
 2259               		.loc 1 886 0
 2260 0692 14BA      		out 0x14,__zero_reg__
 887:setup.c       **** 	PORT_ADDR7_0 = 0;
 2261               		.loc 1 887 0
 2262 0694 18BA      		out 0x18,__zero_reg__
 888:setup.c       **** 	DDR_ADDR7_0 = 0;
 2263               		.loc 1 888 0
 2264 0696 17BA      		out 0x17,__zero_reg__
 889:setup.c       **** 	PORT_ADDR15_8 = 0;
 2265               		.loc 1 889 0
 2266 0698 1BBA      		out 0x1b,__zero_reg__
 890:setup.c       **** 	DDR_ADDR15_8 = 0;
 2267               		.loc 1 890 0
 2268 069a 1ABA      		out 0x1a,__zero_reg__
 891:setup.c       **** 	
 892:setup.c       **** 	// Light up 3.3V or 5V
 893:setup.c       **** 	if (PIND & (1<<SWITCH_DETECT)) {
 2269               		.loc 1 893 0
 2270 069c 829B      		sbis 0x10,2
 2271 069e 00C0      		rjmp .L90
 894:setup.c       **** 		PORTD |= (1<<LED_5V);
 2272               		.loc 1 894 0
 2273 06a0 979A      		sbi 0x12,7
 895:setup.c       **** 		PORTE &= ~(1<<LED_3V);
 2274               		.loc 1 895 0
 2275 06a2 3898      		cbi 0x7,0
 896:setup.c       **** 		
 897:setup.c       **** 		// Set Reset low for 50ms to reset the cart (also for CPLD carts to initialise properly)
 898:setup.c       **** 		cs2Pin_low;
 2276               		.loc 1 898 0
 2277 06a4 3A98      		cbi 0x7,2
 2278               	.LVL164:
 2279               	.LBB164:
 2280               	.LBB165:
 187:c:\winavr-20100110\avr\include\util\delay.h **** 
 2281               		.loc 2 187 0
 2282 06a6 2FE7      		ldi r18,lo8(79999)
 2283 06a8 88E3      		ldi r24,hi8(79999)
 2284 06aa 91E0      		ldi r25,hlo8(79999)
 2285 06ac 2150      	1:	subi r18,1
 2286 06ae 8040      		sbci r24,0
 2287 06b0 9040      		sbci r25,0
 2288 06b2 01F4      		brne 1b
 2289 06b4 00C0      		rjmp .
 2290 06b6 0000      		nop
 2291               	.LVL165:
 2292               	.LBE165:
 2293               	.LBE164:
 899:setup.c       **** 		_delay_ms(50);
 900:setup.c       **** 		cs2Pin_high;
 2294               		.loc 1 900 0
 2295 06b8 3A9A      		sbi 0x7,2
 2296 06ba 00C0      		rjmp .L91
 2297               	.L90:
 901:setup.c       **** 	}
 902:setup.c       **** 	else {
 903:setup.c       **** 		PORTE |= (1<<LED_3V);
 2298               		.loc 1 903 0
 2299 06bc 389A      		sbi 0x7,0
 904:setup.c       **** 		PORTD &= ~(1<<LED_5V);
 2300               		.loc 1 904 0
 2301 06be 9798      		cbi 0x12,7
 2302               	.L91:
 905:setup.c       **** 	}
 906:setup.c       **** 	
 907:setup.c       **** 	// Light LED
 908:setup.c       **** 	PORTD |= (1<<ACTIVITY_LED);
 2303               		.loc 1 908 0
 2304 06c0 939A      		sbi 0x12,3
 2305               	.LVL166:
 2306               	.LBB166:
 2307               	.LBB167:
 187:c:\winavr-20100110\avr\include\util\delay.h **** 
 2308               		.loc 2 187 0
 2309 06c2 2FEF      		ldi r18,lo8(799999)
 2310 06c4 84E3      		ldi r24,hi8(799999)
 2311 06c6 9CE0      		ldi r25,hlo8(799999)
 2312 06c8 2150      	1:	subi r18,1
 2313 06ca 8040      		sbci r24,0
 2314 06cc 9040      		sbci r25,0
 2315 06ce 01F4      		brne 1b
 2316 06d0 00C0      		rjmp .
 2317 06d2 0000      		nop
 2318               	.LVL167:
 2319               	.LBE167:
 2320               	.LBE166:
 909:setup.c       **** 	_delay_ms(500);
 910:setup.c       **** 	PORTD &= ~(1<<ACTIVITY_LED);
 2321               		.loc 1 910 0
 2322 06d4 9398      		cbi 0x12,3
 911:setup.c       **** 	
 912:setup.c       **** 	// Setup USART
 913:setup.c       **** 	UBRRL = 0; // 1Mbps Baud rate
 2323               		.loc 1 913 0
 2324 06d6 19B8      		out 0x9,__zero_reg__
 914:setup.c       **** 	sbi(UCSRA, U2X); // Double rate
 2325               		.loc 1 914 0
 2326 06d8 599A      		sbi 0xb,1
 915:setup.c       **** 	sbi(UCSRB, TXEN); // Transmitter enable
 2327               		.loc 1 915 0
 2328 06da 539A      		sbi 0xa,3
 916:setup.c       **** 	sbi(UCSRB, RXEN); // Receiver enable
 2329               		.loc 1 916 0
 2330 06dc 549A      		sbi 0xa,4
 917:setup.c       **** 	
 918:setup.c       **** 	// Turn on interrupts
 919:setup.c       **** 	sei();
 2331               		.loc 1 919 0
 2332               	/* #APP */
 2333               	 ;  919 "setup.c" 1
 2334 06de 7894      		sei
 2335               	 ;  0 "" 2
 2336               	/* #NOAPP */
 2337 06e0 0895      		ret
 2338               		.cfi_endproc
 2339               	.LFE44:
 2341               		.section	.text.startup,"ax",@progbits
 2342               	.global	main
 2344               	main:
 2345               	.LFB45:
 2346               		.file 3 "main.c"
   1:main.c        **** /*
   2:main.c        ****  GBxCart RW
   3:main.c        ****  PCB version: 1.1 or 1.2
   4:main.c        ****  Firmware version: R15
   5:main.c        ****  Author: Alex from insideGadgets (www.insidegadgets.com)
   6:main.c        ****  Created: 7/11/2016
   7:main.c        ****  Last Modified: 8/08/2019
   8:main.c        ****  
   9:main.c        ****  GBxCart RW allows you to dump your Gameboy/Gameboy Colour/Gameboy Advance games ROM, save the RAM,
  10:main.c        ****  write to certain Gameboy/Gameboy Advance flash carts.
  11:main.c        ****  
  12:main.c        ****  The ATmega8515L talks to the cartridge and interfaces with the CH340G serial to USB converter with
  13:main.c        ****  
  14:main.c        ****  
  15:main.c        ****  Set fuse bits: External 8MHz crystal, divide clock by 8 is off, boot loader is on (512 bytes), BOD
  16:main.c        ****  avrdude -p atmega8515 -c usbasp -U lfuse:w:0xaf:m -U hfuse:w:0xda:m
  17:main.c        ****  
  18:main.c        ****  Program the TinySafeBoot boot loader (modified ASM code, watchdog reset will act as a hardware res
  19:main.c        ****  avrdude -p atmega8515 -c usbasp -U flash:w:GBxCart_RW_v1.1_Rx\tsb\tsb_m8515_d0d1_resetwdt.hex
  20:main.c        ****  
  21:main.c        ****  Program GBxCart RW through TinySafeBoot
  22:main.c        ****  tsb com16:57600 fw GBxCart_RW_v1.1_Rx\main.hex
  23:main.c        ****  
  24:main.c        ****  Set TinySafeBoot delay time to 25 (T 25), gives ~0.5s in bootloader
  25:main.c        ****  tsb com16:9600 T 25
  26:main.c        ****  
  27:main.c        ****  
  28:main.c        ****  Programming shortcuts (if added in Programmers Notepad):
  29:main.c        ****  Alt + W - Program fuse
  30:main.c        ****  Alt + B - Burn bootloader
  31:main.c        ****  
  32:main.c        ****  Plug in USB then
  33:main.c        ****  Alt + T - Program
  34:main.c        ****  Alt + N - Program delay settings
  35:main.c        ****  
  36:main.c        ****  
  37:main.c        ****  */
  38:main.c        **** 
  39:main.c        **** // ATmega8515L Pin Map
  40:main.c        **** //
  41:main.c        **** // VCC (5)			GND (6)			XTAL (7 ,8)		Activity LED PD3 (9)				Switch sense PD2 (8)
  42:main.c        **** // SCK PB7 (3)		MOSI PB5 (1)	MISO PB6 (2)	RST (4)		RXD PD0 (5)			TXD PD1 (7)
  43:main.c        **** // 
  44:main.c        **** // Gameboy / Gameboy Colour
  45:main.c        **** // A0-A7 PB0-7 (40-44, 1-3) 		A8-A15 PA0-7 (37-30)			D0-D7 PC0-7 (18-25)		Audio PE1 (27)
  46:main.c        **** // 
  47:main.c        **** // Gameboy Advance
  48:main.c        **** // AD0-AD7 PB0-7 (40-44, 1-3) 	AD8-AD15 PA0-7 (37-30)		A16-23 / D0-D7 PC0-7 (19-26)
  49:main.c        **** // *WR PD6 (13)						*RD PD5 (14)					*MREQ/CS PD4 (15)			CS2/RST PE2 (16)
  50:main.c        **** 
  51:main.c        **** #define F_CPU 8000000 // 8 MHz
  52:main.c        **** #define PCB_VERSION 2
  53:main.c        **** #define FIRMWARE_VERSION 15
  54:main.c        **** 
  55:main.c        **** #include <avr/io.h>
  56:main.c        **** #include <avr/wdt.h>
  57:main.c        **** #include <avr/eeprom.h>
  58:main.c        **** #include <avr/interrupt.h>
  59:main.c        **** #include <avr/sleep.h>
  60:main.c        **** #include <util/delay.h>
  61:main.c        **** #include <stdlib.h>
  62:main.c        **** #include <string.h>
  63:main.c        **** #include "setup.c" // See defines, variables, constants, functions here
  64:main.c        **** 
  65:main.c        **** 
  66:main.c        **** int main(void) {
 2347               		.loc 3 66 0
 2348               		.cfi_startproc
 2349               	/* prologue: function */
 2350               	/* frame size = 0 */
 2351               	/* stack size = 0 */
 2352               	.L__stack_usage = 0
  67:main.c        **** 	setup();
 2353               		.loc 3 67 0
 2354 0000 00D0      		rcall setup
 2355               	.LVL168:
  68:main.c        **** 	
  69:main.c        **** 	uint32_t address = 0;
  70:main.c        **** 	uint8_t eepromSize = EEPROM_4KBIT;
  71:main.c        **** 	uint8_t cartMode = GB_MODE;
  72:main.c        **** 	uint8_t resetCommonLines = 1;
 2356               		.loc 3 72 0
 2357 0002 2224      		clr r2
 2358 0004 2394      		inc r2
  70:main.c        **** 	uint8_t cartMode = GB_MODE;
 2359               		.loc 3 70 0
 2360 0006 D1E0      		ldi r29,lo8(1)
  69:main.c        **** 	uint8_t eepromSize = EEPROM_4KBIT;
 2361               		.loc 3 69 0
 2362 0008 C12C      		mov r12,__zero_reg__
 2363 000a D12C      		mov r13,__zero_reg__
 2364 000c 7601      		movw r14,r12
 2365               	.LBB168:
  73:main.c        **** 	
  74:main.c        **** 	while(1) {
  75:main.c        **** 		if (resetCommonLines == 1) {
  76:main.c        **** 			rd_wr_csmreq_cs2_reset();
  77:main.c        **** 		}
  78:main.c        **** 		receivedChar = USART_Receive(); // Wait for 1 byte of data
  79:main.c        **** 		
  80:main.c        **** 		// Read the pin to find out which mode we are in, if it reads high, we are powered by 5V
  81:main.c        **** 		if (PIND & (1<<SWITCH_DETECT)) {
  82:main.c        **** 			cartMode = GB_MODE;
  83:main.c        **** 			PORTD |= (1<<LED_5V);
  84:main.c        **** 			PORTE &= ~(1<<LED_3V);
  85:main.c        **** 		}
  86:main.c        **** 		else {
  87:main.c        **** 			cartMode = GBA_MODE;
  88:main.c        **** 			PORTE |= (1<<LED_3V);
  89:main.c        **** 			PORTD &= ~(1<<LED_5V);
  90:main.c        **** 		}
  91:main.c        **** 		
  92:main.c        **** 		// Return the cart mode in use
  93:main.c        **** 		if (receivedChar == CART_MODE) {
  94:main.c        **** 			USART_Transmit(cartMode);
  95:main.c        **** 		}
  96:main.c        **** 		
  97:main.c        **** 		// Change to GB mode or GBA mode if requested
  98:main.c        **** 		else if (receivedChar == GB_CART_MODE) {
  99:main.c        **** 			gb_mode();
 100:main.c        **** 		}
 101:main.c        **** 		else if (receivedChar == GBA_CART_MODE) {
 102:main.c        **** 			gba_mode();
 103:main.c        **** 		}
 104:main.c        **** 		
 105:main.c        **** 		// Set address
 106:main.c        **** 		else if (receivedChar == SET_START_ADDRESS) {
 107:main.c        **** 			usart_read_chars(); // Read start address
 108:main.c        **** 			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 109:main.c        **** 		}
 110:main.c        **** 		
 111:main.c        **** 		
 112:main.c        **** 		// ****** Gameboy / Gameboy Colour ******
 113:main.c        **** 		
 114:main.c        **** 		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
 115:main.c        **** 		else if (receivedChar == READ_ROM_RAM) {
 116:main.c        **** 			gb_mode();
 117:main.c        **** 			receivedChar = '1';
 118:main.c        **** 			while (receivedChar == '1') {
 119:main.c        **** 				PORTD |= (1<<ACTIVITY_LED);
 120:main.c        **** 				for (uint8_t x = 0; x < 64; x++) {
 121:main.c        **** 					USART_Transmit(read_8bit_data(address));
 122:main.c        **** 					address++;
 123:main.c        **** 				}
 124:main.c        **** 				
 125:main.c        **** 				PORTD &= ~(1<<ACTIVITY_LED);
 126:main.c        **** 				receivedChar = USART_Receive();
 127:main.c        **** 			}
 128:main.c        **** 		}
 129:main.c        **** 		
 130:main.c        **** 		// Write 64 bytes to RAM on address (and increment)
 131:main.c        **** 		else if (receivedChar == WRITE_RAM) {
 132:main.c        **** 			gb_mode();
 133:main.c        **** 			
 134:main.c        **** 			// Read 64 bytes first as CH340G sends them all at once
 135:main.c        **** 			usart_read_bytes(64);
 136:main.c        **** 			
 137:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 138:main.c        **** 			for (uint8_t x = 0; x < 64; x++) {
 139:main.c        **** 				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
 140:main.c        **** 				address++;
 141:main.c        **** 			}
 142:main.c        **** 			
 143:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 144:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 145:main.c        **** 		}
 146:main.c        **** 		
 147:main.c        **** 		// Set bank address and write a byte
 148:main.c        **** 		else if (receivedChar == SET_BANK) {
 149:main.c        **** 			gb_mode();
 150:main.c        **** 			
 151:main.c        **** 			usart_read_chars(); // Read start address
 152:main.c        **** 			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 153:main.c        **** 			
 154:main.c        **** 			receivedChar = USART_Receive(); // Wait for bank number
 155:main.c        **** 			if (receivedChar == 'B') {
 156:main.c        **** 				usart_read_chars(); // Read data
 157:main.c        **** 				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
 158:main.c        **** 				lastBankAccessed = data; // Store the last bank accessed (used for flash carts that need it)
 159:main.c        **** 				
 160:main.c        **** 				write_8bit_data(bankaddress, data, BANK_WRITE);
 161:main.c        **** 			}
 162:main.c        **** 		}
 163:main.c        **** 		
 164:main.c        **** 		
 165:main.c        **** 		// ****** Gameboy Advance ******
 166:main.c        **** 		
 167:main.c        **** 		// ---------- ROM ----------
 168:main.c        **** 		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
 169:main.c        **** 		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
 170:main.c        **** 			gba_mode();
 171:main.c        **** 			
 172:main.c        **** 			uint8_t readEnd = 32;
 173:main.c        **** 			if (receivedChar == GBA_READ_ROM_256BYTE) {
 174:main.c        **** 				readEnd = 128;
 175:main.c        **** 			}
 176:main.c        **** 			
 177:main.c        **** 			receivedChar = '1';
 2366               		.loc 3 177 0
 2367 000e 81E3      		ldi r24,lo8(49)
 2368 0010 382E      		mov r3,r24
 2369               	.LBE168:
 2370               	.LBB171:
 2371               	.LBB172:
 178:main.c        **** 			while (receivedChar == '1') {
 179:main.c        **** 				PORTD |= (1<<ACTIVITY_LED);
 180:main.c        **** 				
 181:main.c        **** 				for (uint8_t x = 0; x < readEnd; x++) {
 182:main.c        **** 					uint16_t dataRead = gba_read_16bit_data(address);
 183:main.c        **** 					
 184:main.c        **** 					// Low byte & High byte
 185:main.c        **** 					USART_Transmit(dataRead & 0xFF);
 186:main.c        **** 					USART_Transmit(dataRead >> 8);
 187:main.c        **** 					
 188:main.c        **** 					address++;
 189:main.c        **** 				}
 190:main.c        **** 				
 191:main.c        **** 				PORTD &= ~(1<<ACTIVITY_LED);
 192:main.c        **** 				receivedChar = USART_Receive();
 193:main.c        **** 			}
 194:main.c        **** 		}
 195:main.c        **** 		
 196:main.c        **** 		// ---------- SRAM ----------
 197:main.c        **** 		// Read RAM from address (and increment) until anything but 1 is received
 198:main.c        **** 		else if (receivedChar == GBA_READ_SRAM) {
 199:main.c        **** 			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
 200:main.c        **** 			
 201:main.c        **** 			receivedChar = '1';
 202:main.c        **** 			while (receivedChar == '1') {
 203:main.c        **** 				PORTD |= (1<<ACTIVITY_LED);
 204:main.c        **** 				for (uint8_t x = 0; x < 64; x++) {
 205:main.c        **** 					USART_Transmit(gba_read_ram_8bit_data(address));
 206:main.c        **** 					address++;
 207:main.c        **** 				}
 208:main.c        **** 				
 209:main.c        **** 				PORTD &= ~(1<<ACTIVITY_LED);
 210:main.c        **** 				receivedChar = USART_Receive();
 211:main.c        **** 			}
 212:main.c        **** 			
 213:main.c        **** 			gba_mode(); // Set back
 214:main.c        **** 		}
 215:main.c        **** 		
 216:main.c        **** 		// Write to RAM on address (and increment) with 64 bytes of data
 217:main.c        **** 		else if (receivedChar == GBA_WRITE_SRAM) {
 218:main.c        **** 			gb_mode();
 219:main.c        **** 			
 220:main.c        **** 			usart_read_bytes(64);
 221:main.c        **** 			
 222:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 223:main.c        **** 			for (uint8_t x = 0; x < 64; x++) {
 224:main.c        **** 				gba_write_ram_8bit_data(address, receivedBuffer[x]);
 225:main.c        **** 				address++;
 226:main.c        **** 			}
 227:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 228:main.c        **** 			
 229:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 230:main.c        **** 			gba_mode(); // Set back
 231:main.c        **** 		}
 232:main.c        **** 		
 233:main.c        **** 		// Write 1 byte to SRAM address
 234:main.c        **** 		else if (receivedChar == GBA_WRITE_ONE_BYTE_SRAM) {
 235:main.c        **** 			gb_mode();
 236:main.c        **** 			
 237:main.c        **** 			uint8_t data = USART_Receive();
 238:main.c        **** 			gba_write_ram_8bit_data(address, data);
 239:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 240:main.c        **** 			
 241:main.c        **** 			gba_mode(); // Set back
 242:main.c        **** 		}
 243:main.c        **** 		
 244:main.c        **** 		
 245:main.c        **** 		// ---------- FLASH ----------
 246:main.c        **** 		// Read the Flash Manufacturer and Device ID
 247:main.c        **** 		else if (receivedChar == GBA_FLASH_READ_ID) {
 248:main.c        **** 			gb_mode();
 249:main.c        **** 			
 250:main.c        **** 			flash_read_chip_id();
 251:main.c        **** 			USART_Transmit(flashChipIdBuffer[0]);
 252:main.c        **** 			USART_Transmit(flashChipIdBuffer[1]);
 253:main.c        **** 			
 254:main.c        **** 			gba_mode(); // Set back
 255:main.c        **** 		}
 256:main.c        **** 		
 257:main.c        **** 		// Change bank
 258:main.c        **** 		else if (receivedChar == GBA_FLASH_SET_BANK) {
 259:main.c        **** 			usart_read_chars(); // Read data
 260:main.c        **** 			uint8_t bank = atoi(receivedBuffer); // Convert data string to dec
 261:main.c        **** 			
 262:main.c        **** 			gb_mode();
 263:main.c        **** 			flash_switch_bank(bank);
 264:main.c        **** 			
 265:main.c        **** 			gba_mode(); // Set back
 266:main.c        **** 		}
 267:main.c        **** 		
 268:main.c        **** 		// Erase 4K sector on Flash (sector 0 to 15 for 512Kbit)
 269:main.c        **** 		else if (receivedChar == GBA_FLASH_4K_SECTOR_ERASE) {
 270:main.c        **** 			gb_mode();
 271:main.c        **** 			
 272:main.c        **** 			usart_read_chars(); // Read sector
 273:main.c        **** 			uint8_t sectorAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to de
 274:main.c        **** 			
 275:main.c        **** 			flash_erase_4k_sector(sectorAddress);
 276:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 277:main.c        **** 			
 278:main.c        **** 			gba_mode(); // Set back
 279:main.c        **** 		}
 280:main.c        **** 		
 281:main.c        **** 		// Write 64 bytes to Flash address one byte write at a time (and increment)
 282:main.c        **** 		else if (receivedChar == GBA_FLASH_WRITE_BYTE) {
 283:main.c        **** 			gb_mode();
 284:main.c        **** 			
 285:main.c        **** 			usart_read_bytes(64);
 286:main.c        **** 			
 287:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 288:main.c        **** 			for (uint8_t x = 0; x < 64; x++) {
 289:main.c        **** 				flash_write_byte(address, receivedBuffer[x]);
 290:main.c        **** 				address++;
 291:main.c        **** 			}
 292:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 293:main.c        **** 			
 294:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 295:main.c        **** 			gba_mode(); // Set back
 296:main.c        **** 		}
 297:main.c        **** 		
 298:main.c        **** 		// Write 128 bytes to flash sector for Atmel flash (and increment)
 299:main.c        **** 		else if (receivedChar == GBA_FLASH_WRITE_ATMEL) {
 300:main.c        **** 			gb_mode();
 301:main.c        **** 			
 302:main.c        **** 			usart_read_bytes(128);
 303:main.c        **** 			
 304:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 305:main.c        **** 			flash_write_sector(address); // Address used as sector number
 306:main.c        **** 			address++;
 307:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 308:main.c        **** 			
 309:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 310:main.c        **** 			gba_mode(); // Set back
 311:main.c        **** 		}
 312:main.c        **** 		
 313:main.c        **** 		
 314:main.c        **** 		// ---------- EEPROM ----------
 315:main.c        **** 		// Set EEPROM size
 316:main.c        **** 		else if (receivedChar == GBA_SET_EEPROM_SIZE) {
 317:main.c        **** 			usart_read_chars(); // Read size
 318:main.c        **** 			eepromSize = strtol(receivedBuffer, NULL, 16); // Convert size to dec
 319:main.c        **** 		}
 320:main.c        **** 		
 321:main.c        **** 		// Read the EEPROM on address (and increment) until anything but 1 is received
 322:main.c        **** 		else if (receivedChar == GBA_READ_EEPROM) {
 323:main.c        **** 			gba_eeprom_mode();
 324:main.c        **** 			
 325:main.c        **** 			receivedChar = '1';
 326:main.c        **** 			while (receivedChar == '1') {
 327:main.c        **** 				PORTD |= (1<<ACTIVITY_LED);
 328:main.c        **** 				gba_eeprom_read(address, eepromSize);
 329:main.c        **** 				
 330:main.c        **** 				// Send back the 8 bytes of data
 331:main.c        **** 				for (uint8_t c = 0; c < 8; c++) {
 332:main.c        **** 					USART_Transmit(eepromBuffer[c]);
 333:main.c        **** 				}
 334:main.c        **** 				address++; // Increment to next 8 bytes
 335:main.c        **** 				
 336:main.c        **** 				PORTD &= ~(1<<ACTIVITY_LED);
 337:main.c        **** 				receivedChar = USART_Receive();
 338:main.c        **** 			}
 339:main.c        **** 			
 340:main.c        **** 			gba_mode(); // Set back
 341:main.c        **** 		}
 342:main.c        **** 		
 343:main.c        **** 		// Write 8 bytes to the EEPROM address (and increment)
 344:main.c        **** 		else if (receivedChar == GBA_WRITE_EEPROM) {
 345:main.c        **** 			gba_eeprom_mode();
 346:main.c        **** 			
 347:main.c        **** 			// Read 8 bytes from USART and place in buffer
 348:main.c        **** 			for (uint8_t x = 0; x < 8; x++) {
 349:main.c        **** 				eepromBuffer[x] = USART_Receive();
 350:main.c        **** 			}
 351:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 352:main.c        **** 			
 353:main.c        **** 			gba_eeprom_write(address, eepromSize);
 354:main.c        **** 			address++;
 355:main.c        **** 			
 356:main.c        **** 			_delay_ms(8); // Wait for EEPROM to write data (8ms)
 357:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 358:main.c        **** 			
 359:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 360:main.c        **** 			gba_mode(); // Set back
 361:main.c        **** 		}
 362:main.c        **** 		
 363:main.c        **** 		
 364:main.c        **** 		// ---------- GB FLASH CARTS ----------
 365:main.c        **** 		// Select which pin need to pulse as WE (Audio or WR)
 366:main.c        **** 		else if (receivedChar == GB_FLASH_WE_PIN) {
 367:main.c        **** 			flashWriteWePin = USART_Receive();
 368:main.c        **** 			
 369:main.c        **** 			if (flashWriteWePin == WE_AS_AUDIO_PIN) {
 370:main.c        **** 				DDRE |= (1<<AUDIO_PIN);
 371:main.c        **** 				audioPin_high;
 372:main.c        **** 			}
 373:main.c        **** 		}
 374:main.c        **** 		
 375:main.c        **** 		// Some flash carts may require changing the bank back to 1 in order to accept flash chip command
 376:main.c        **** 		else if (receivedChar == GB_FLASH_BANK_1_COMMAND_WRITES) {
 377:main.c        **** 			flashBank1CommandWrites = 1;
 378:main.c        **** 		}
 379:main.c        **** 		
 380:main.c        **** 		// Load the program method to use
 381:main.c        **** 		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
 382:main.c        **** 			for (uint8_t x = 0; x < 3; x++) {
 383:main.c        **** 				usart_read_chars(); // Address
 384:main.c        **** 				flashWriteCycle[x][0] = strtol(receivedBuffer, NULL, 16);
 385:main.c        **** 				USART_Transmit(SEND_ACK);
 386:main.c        **** 				
 387:main.c        **** 				usart_read_chars(); // Data
 388:main.c        **** 				flashWriteCycle[x][1] = strtol(receivedBuffer, NULL, 16);
 389:main.c        **** 				USART_Transmit(SEND_ACK);
 390:main.c        **** 			}
 391:main.c        **** 		}
 392:main.c        **** 		
 393:main.c        **** 		// Write address and one byte to Flash, pulse a pin
 394:main.c        **** 		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
 395:main.c        **** 			usart_read_chars(); // Read address
 396:main.c        **** 			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16);
 397:main.c        **** 			
 398:main.c        **** 			usart_read_chars(); // Read data byte
 399:main.c        **** 			uint8_t flashByte = strtol(receivedBuffer, NULL, 16);
 400:main.c        **** 			
 401:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 402:main.c        **** 			gb_flash_write_bus_cycle(flashAddress, flashByte);
 403:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 404:main.c        **** 			
 405:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 406:main.c        **** 		}
 407:main.c        **** 		
 408:main.c        **** 		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
 409:main.c        **** 		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
 410:main.c        **** 			usart_read_bytes(64);
 411:main.c        **** 			
 412:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 413:main.c        **** 			for (uint8_t x = 0; x < 64; x++) {
 414:main.c        **** 				if (flashBank1CommandWrites == 0) {
 415:main.c        **** 					gb_flash_write_byte(address, receivedBuffer[x]);
 416:main.c        **** 				}
 417:main.c        **** 				else { // Some flash carts need to change to bank 1 to issue flash commands
 418:main.c        **** 					gb_flash_write_byte_bank1_commands(address, receivedBuffer[x]);
 419:main.c        **** 				}
 420:main.c        **** 				address++;
 421:main.c        **** 			}
 422:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 423:main.c        **** 			
 424:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 425:main.c        **** 		}
 426:main.c        **** 		
 427:main.c        **** 		// Buffered programming, write 32 bytes to Flash address
 428:main.c        **** 		else if (receivedChar == GB_FLASH_WRITE_BUFFERED_32BYTE) {
 429:main.c        **** 			usart_read_bytes(32);
 430:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 431:main.c        **** 			
 432:main.c        **** 			// Setup buffered write
 433:main.c        **** 			gb_flash_write_bus_cycle(0xAAA, 0xAA);
 434:main.c        **** 			gb_flash_write_bus_cycle(0x555, 0x55);
 435:main.c        **** 			gb_flash_write_bus_cycle(address, 0x25);
 436:main.c        **** 			gb_flash_write_bus_cycle(address, 0x1F); // Length
 437:main.c        **** 			_delay_us(1);
 438:main.c        **** 			
 439:main.c        **** 			// Write data
 440:main.c        **** 			for (uint8_t x = 0; x < 32; x++) {
 441:main.c        **** 				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 442:main.c        **** 				address++;
 443:main.c        **** 			}
 444:main.c        **** 			
 445:main.c        **** 			// Write buffer to flash
 446:main.c        **** 			gb_flash_write_bus_cycle(address-32, 0x29);
 447:main.c        **** 			_delay_us(200);
 448:main.c        **** 			
 449:main.c        **** 			// Verify last byte written
 450:main.c        **** 			uint8_t dataVerify = gb_flash_read_byte(address-1);
 451:main.c        **** 			uint8_t verifyCount = 0;
 452:main.c        **** 			while (dataVerify != receivedBuffer[31]) {
 453:main.c        **** 				dataVerify = gb_flash_read_byte(address-1);
 454:main.c        **** 				_delay_us(5);
 455:main.c        **** 				verifyCount++;
 456:main.c        **** 				
 457:main.c        **** 				if (verifyCount >= 200) {
 458:main.c        **** 					_delay_ms(500);
 459:main.c        **** 					break;
 460:main.c        **** 				}
 461:main.c        **** 			}
 462:main.c        **** 			
 463:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 464:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 465:main.c        **** 		}
 466:main.c        **** 		
 467:main.c        **** 		// Buffered programming, write 256 bytes to Flash address
 468:main.c        **** 		else if (receivedChar == GB_FLASH_WRITE_256BYTE) {
 469:main.c        **** 			usart_read_bytes(256);
 470:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 471:main.c        **** 			
 472:main.c        **** 			// Setup buffered write
 473:main.c        **** 			gb_flash_write_bus_cycle(0xAAA, 0xA9);
 474:main.c        **** 			gb_flash_write_bus_cycle(0x555, 0x56);
 475:main.c        **** 			gb_flash_write_bus_cycle(address, 0x26);
 476:main.c        **** 			gb_flash_write_bus_cycle(address, 0xFF); // Length
 477:main.c        **** 			_delay_us(50);
 478:main.c        **** 			
 479:main.c        **** 			// Write data
 480:main.c        **** 			for (int x = 0; x < 256; x++) {
 481:main.c        **** 				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 482:main.c        **** 				address++;
 483:main.c        **** 			}
 484:main.c        **** 			
 485:main.c        **** 			// Write buffer to flash
 486:main.c        **** 			gb_flash_write_bus_cycle(address-256, 0x2A);
 487:main.c        **** 			
 488:main.c        **** 			// Verify last byte written
 489:main.c        **** 			uint8_t dataVerify = gb_flash_read_byte(address-1);
 490:main.c        **** 			while (dataVerify != receivedBuffer[255]) {
 491:main.c        **** 				dataVerify = gb_flash_read_byte(address-1);
 492:main.c        **** 				_delay_us(5);
 493:main.c        **** 			}
 494:main.c        **** 			
 495:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 496:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 497:main.c        **** 		}
 498:main.c        **** 		
 499:main.c        **** 		// Nintendo Power 1MB Cart, Write 128 bytes to flash
 500:main.c        **** 		else if (receivedChar == GB_FLASH_WRITE_NP_128BYTE) {
 501:main.c        **** 			usart_read_bytes(128);
 502:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 503:main.c        **** 			
 504:main.c        **** 			// Enable flash chip access
 505:main.c        **** 			gb_flash_write_bus_cycle(0x120, 0x09);
 506:main.c        **** 			gb_flash_write_bus_cycle(0x121, 0xaa);
 507:main.c        **** 			gb_flash_write_bus_cycle(0x122, 0x55);
 508:main.c        **** 			gb_flash_write_bus_cycle(0x13f, 0xa5);
 509:main.c        **** 			_delay_us(5);
 510:main.c        **** 			
 511:main.c        **** 			// Re-Enable writes to MBC registers
 512:main.c        **** 			gb_flash_write_bus_cycle(0x120, 0x11);
 513:main.c        **** 			gb_flash_write_bus_cycle(0x13f, 0xa5);
 514:main.c        **** 			_delay_us(5);
 515:main.c        **** 			
 516:main.c        **** 			// Bank 1 for commands
 517:main.c        **** 			gb_flash_write_bus_cycle(0x2100, 0x01);
 518:main.c        **** 			_delay_us(5);
 519:main.c        **** 			
 520:main.c        **** 			
 521:main.c        **** 			// Write setup
 522:main.c        **** 			gb_flash_write_bus_cycle(0x120, 0x0F);
 523:main.c        **** 			gb_flash_write_bus_cycle(0x125, 0x55);
 524:main.c        **** 			gb_flash_write_bus_cycle(0x126, 0x55);
 525:main.c        **** 			gb_flash_write_bus_cycle(0x127, 0xAA);
 526:main.c        **** 			gb_flash_write_bus_cycle(0x13f, 0xA5);
 527:main.c        **** 			_delay_us(5);
 528:main.c        **** 			
 529:main.c        **** 			gb_flash_write_bus_cycle(0x120, 0x0F);
 530:main.c        **** 			gb_flash_write_bus_cycle(0x125, 0x2A);
 531:main.c        **** 			gb_flash_write_bus_cycle(0x126, 0xAA);
 532:main.c        **** 			gb_flash_write_bus_cycle(0x127, 0x55);
 533:main.c        **** 			gb_flash_write_bus_cycle(0x13f, 0xA5);
 534:main.c        **** 			_delay_us(5);
 535:main.c        **** 			
 536:main.c        **** 			gb_flash_write_bus_cycle(0x120, 0x0F);
 537:main.c        **** 			gb_flash_write_bus_cycle(0x125, 0x55);
 538:main.c        **** 			gb_flash_write_bus_cycle(0x126, 0x55);
 539:main.c        **** 			gb_flash_write_bus_cycle(0x127, 0xA0);
 540:main.c        **** 			gb_flash_write_bus_cycle(0x13f, 0xA5);
 541:main.c        **** 			_delay_us(5);
 542:main.c        **** 			
 543:main.c        **** 			// Set bank back
 544:main.c        **** 			write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
 545:main.c        **** 			_delay_us(5);
 546:main.c        **** 			
 547:main.c        **** 			// Disable writes to MBC registers
 548:main.c        **** 			gb_flash_write_bus_cycle(0x120, 0x10);
 549:main.c        **** 			gb_flash_write_bus_cycle(0x13f, 0xa5);
 550:main.c        **** 			_delay_us(5);
 551:main.c        **** 			
 552:main.c        **** 			// Undo Wakeup
 553:main.c        **** 			gb_flash_write_bus_cycle(0x120, 0x08);
 554:main.c        **** 			gb_flash_write_bus_cycle(0x13f, 0xa5);
 555:main.c        **** 			_delay_us(5);
 556:main.c        **** 			
 557:main.c        **** 			
 558:main.c        **** 			// Write data
 559:main.c        **** 			for (uint8_t x = 0; x < 128; x++) {
 560:main.c        **** 				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 561:main.c        **** 				_delay_us(5);
 562:main.c        **** 				address++;
 563:main.c        **** 			}
 564:main.c        **** 			
 565:main.c        **** 			// Write buffer to flash
 566:main.c        **** 			address--;
 567:main.c        **** 			gb_flash_write_bus_cycle(address, 0xFF);
 568:main.c        **** 			address++;
 569:main.c        **** 			_delay_ms(10);
 570:main.c        **** 			
 571:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 572:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 573:main.c        **** 		}
 574:main.c        **** 		
 575:main.c        **** 		// ---------- GBA FLASH CARTS ----------
 576:main.c        **** 		// Write 24 bit address, 16 bit data and pulse a pin
 577:main.c        **** 		else if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
 578:main.c        **** 			usart_read_chars(); // Read address
 579:main.c        **** 			uint32_t flashAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to de
 580:main.c        **** 			
 581:main.c        **** 			receivedChar = USART_Receive(); // Wait for byte
 582:main.c        **** 			if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
 583:main.c        **** 				usart_read_chars(); // Read data
 584:main.c        **** 				uint16_t flashByte = strtol(receivedBuffer, NULL, 16); // Convert data byte in hex to dec
 585:main.c        **** 				
 586:main.c        **** 				PORTD |= (1<<ACTIVITY_LED);
 587:main.c        **** 				GBA_DDR_ROM_ADDR23_16 = 0xFF;
 588:main.c        **** 				GBA_DDR_ROM_ADDR15_8 = 0xFF;
 589:main.c        **** 				GBA_DDR_ROM_ADDR7_0 = 0xFF;
 590:main.c        **** 				gba_flash_write_bus_cycle(flashAddress, flashByte);
 591:main.c        **** 				PORTD &= ~(1<<ACTIVITY_LED);
 592:main.c        **** 				
 593:main.c        **** 				USART_Transmit(SEND_ACK); // Send back acknowledgement
 594:main.c        **** 			}
 595:main.c        **** 		}
 596:main.c        **** 		
 597:main.c        **** 		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write
 598:main.c        **** 		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_2
 599:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 600:main.c        **** 			
 601:main.c        **** 			int readLength = 64;
 602:main.c        **** 			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
 603:main.c        **** 				readLength = 256;
 604:main.c        **** 			}
 605:main.c        **** 			usart_read_bytes(readLength);
 606:main.c        **** 			
 607:main.c        **** 			for (int x = 0; x < readLength; x += 2) {
 608:main.c        **** 				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
 609:main.c        **** 				gba_flash_write_byte(address, combinedBytes, D0D1_SWAPPED);
 610:main.c        **** 				address++;
 611:main.c        **** 			}
 612:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 613:main.c        **** 			
 614:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 615:main.c        **** 		}
 616:main.c        **** 		
 617:main.c        **** 		// Write 256 bytes to Flash address, combine 2 bytes and write one at a time (and increment addre
 618:main.c        **** 		else if (receivedChar == GBA_FLASH_WRITE_256BYTE) {
 619:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 620:main.c        **** 			
 621:main.c        **** 			int readLength = 256;
 622:main.c        **** 			usart_read_bytes(readLength);
 623:main.c        **** 			
 624:main.c        **** 			for (int x = 0; x < readLength; x += 2) {
 625:main.c        **** 				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
 626:main.c        **** 				gba_flash_write_byte(address, combinedBytes, D0D1_NOT_SWAPPED);
 627:main.c        **** 				address++;
 628:main.c        **** 			}
 629:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 630:main.c        **** 			
 631:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 632:main.c        **** 		}
 633:main.c        **** 		
 634:main.c        **** 		// Intel flash command based chips
 635:main.c        **** 		// Write 64 bytes to Flash address, combine 2 bytes and write one at a time (and increment addres
 636:main.c        **** 		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE) {
 637:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 638:main.c        **** 			usart_read_bytes(64);
 639:main.c        **** 			
 640:main.c        **** 			// Set address lines as outputs
 641:main.c        **** 			GBA_DDR_ROM_ADDR23_16 = 0xFF;
 642:main.c        **** 			GBA_DDR_ROM_ADDR15_8 = 0xFF;
 643:main.c        **** 			GBA_DDR_ROM_ADDR7_0 = 0xFF;
 644:main.c        **** 			
 645:main.c        **** 			// Unlock
 646:main.c        **** 			gba_flash_write_bus_cycle(address, 0x60);
 647:main.c        **** 			gba_flash_write_bus_cycle(address, 0xD0);
 648:main.c        **** 			
 649:main.c        **** 			// Buffered write command
 650:main.c        **** 			gba_flash_write_bus_cycle(address, 0xE8);
 651:main.c        **** 			_delay_us(50);
 652:main.c        **** 			
 653:main.c        **** 			// Wait for first 2 bytes to be 0x80, 0x00
 654:main.c        **** 			uint16_t dataVerify = gba_read_16bit_data(address);
 655:main.c        **** 			while (dataVerify != 0x0080) {
 656:main.c        **** 				dataVerify = gba_read_16bit_data(address);
 657:main.c        **** 				_delay_us(50);
 658:main.c        **** 			}
 659:main.c        **** 			
 660:main.c        **** 			
 661:main.c        **** 			// Set address lines as outputs
 662:main.c        **** 			GBA_DDR_ROM_ADDR23_16 = 0xFF;
 663:main.c        **** 			GBA_DDR_ROM_ADDR15_8 = 0xFF;
 664:main.c        **** 			GBA_DDR_ROM_ADDR7_0 = 0xFF;
 665:main.c        **** 			
 666:main.c        **** 			// Set length
 667:main.c        **** 			gba_flash_write_bus_cycle(address, 0x1F);
 668:main.c        **** 			
 669:main.c        **** 			// Write data
 670:main.c        **** 			for (int x = 0; x < 64; x += 2) {
 671:main.c        **** 				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
 672:main.c        **** 				gba_flash_write_bus_cycle(address, combinedBytes);
 673:main.c        **** 				address++;
 674:main.c        **** 			}
 675:main.c        **** 			
 676:main.c        **** 			// Write buffer to flash
 677:main.c        **** 			gba_flash_write_bus_cycle(address, 0xD0);
 678:main.c        **** 			_delay_us(440);
 679:main.c        **** 			
 680:main.c        **** 			// Wait for first 2 bytes to be 0x80, 0x00
 681:main.c        **** 			dataVerify = gba_read_16bit_data(address);
 682:main.c        **** 			while (dataVerify != 0x0080) {
 683:main.c        **** 				dataVerify = gba_read_16bit_data(address);
 684:main.c        **** 				_delay_us(50);
 685:main.c        **** 			}
 686:main.c        **** 			
 687:main.c        **** 			
 688:main.c        **** 			// Set address lines as outputs
 689:main.c        **** 			GBA_DDR_ROM_ADDR23_16 = 0xFF;
 690:main.c        **** 			GBA_DDR_ROM_ADDR15_8 = 0xFF;
 691:main.c        **** 			GBA_DDR_ROM_ADDR7_0 = 0xFF;
 692:main.c        **** 			
 693:main.c        **** 			// Back to reading mode
 694:main.c        **** 			gba_flash_write_bus_cycle(address, 0xFF);
 695:main.c        **** 			
 696:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 697:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 698:main.c        **** 		}
 699:main.c        **** 		
 700:main.c        **** 		// Intel word programming
 701:main.c        **** 		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE_WORD) {
 702:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 703:main.c        **** 			usart_read_bytes(64);
 704:main.c        **** 			
 705:main.c        **** 			// Write data
 706:main.c        **** 			for (uint8_t x = 0; x < 64; x += 2) {
 707:main.c        **** 				// Set address lines as outputs
 708:main.c        **** 				GBA_DDR_ROM_ADDR23_16 = 0xFF;
 2372               		.loc 3 708 0
 2373 0012 CFEF      		ldi r28,lo8(-1)
 2374               	.LVL169:
 2375               	.L93:
 2376               	.LBE172:
 2377               	.LBE171:
  75:main.c        **** 			rd_wr_csmreq_cs2_reset();
 2378               		.loc 3 75 0
 2379 0014 21E0      		ldi r18,lo8(1)
 2380 0016 2212      		cpse r2,r18
 2381 0018 00C0      		rjmp .L94
 2382               	.LVL170:
 2383               	.L235:
  76:main.c        **** 		}
 2384               		.loc 3 76 0
 2385 001a 00D0      		rcall rd_wr_csmreq_cs2_reset
 2386               	.LVL171:
 2387               	.L94:
  78:main.c        **** 		
 2388               		.loc 3 78 0
 2389 001c 00D0      		rcall USART_Receive
 2390               	.LVL172:
 2391 001e 8093 0000 		sts receivedChar,r24
  81:main.c        **** 			cartMode = GB_MODE;
 2392               		.loc 3 81 0
 2393 0022 829B      		sbis 0x10,2
 2394 0024 00C0      		rjmp .L95
 2395               	.LVL173:
  83:main.c        **** 			PORTE &= ~(1<<LED_3V);
 2396               		.loc 3 83 0
 2397 0026 979A      		sbi 0x12,7
  84:main.c        **** 		}
 2398               		.loc 3 84 0
 2399 0028 3898      		cbi 0x7,0
  82:main.c        **** 			PORTD |= (1<<LED_5V);
 2400               		.loc 3 82 0
 2401 002a 81E0      		ldi r24,lo8(1)
 2402 002c 00C0      		rjmp .L96
 2403               	.LVL174:
 2404               	.L95:
  88:main.c        **** 			PORTD &= ~(1<<LED_5V);
 2405               		.loc 3 88 0
 2406 002e 389A      		sbi 0x7,0
  89:main.c        **** 		}
 2407               		.loc 3 89 0
 2408 0030 9798      		cbi 0x12,7
  87:main.c        **** 			PORTE |= (1<<LED_3V);
 2409               		.loc 3 87 0
 2410 0032 82E0      		ldi r24,lo8(2)
 2411               	.LVL175:
 2412               	.L96:
  93:main.c        **** 			USART_Transmit(cartMode);
 2413               		.loc 3 93 0
 2414 0034 9091 0000 		lds r25,receivedChar
 2415 0038 9334      		cpi r25,lo8(67)
 2416 003a 01F4      		brne .+2
 2417 003c 00C0      		rjmp .L236
  98:main.c        **** 			gb_mode();
 2418               		.loc 3 98 0
 2419 003e 9734      		cpi r25,lo8(71)
 2420 0040 01F4      		brne .L99
  99:main.c        **** 		}
 2421               		.loc 3 99 0
 2422 0042 00D0      		rcall gb_mode
 2423               	.LVL176:
 2424 0044 00C0      		rjmp .L93
 2425               	.LVL177:
 2426               	.L99:
 101:main.c        **** 			gba_mode();
 2427               		.loc 3 101 0
 2428 0046 9736      		cpi r25,lo8(103)
 2429 0048 01F4      		brne .+2
 2430 004a 00C0      		rjmp .L238
 106:main.c        **** 			usart_read_chars(); // Read start address
 2431               		.loc 3 106 0
 2432 004c 9134      		cpi r25,lo8(65)
 2433 004e 01F4      		brne .L101
 107:main.c        **** 			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 2434               		.loc 3 107 0
 2435 0050 00D0      		rcall usart_read_chars
 2436               	.LVL178:
 108:main.c        **** 		}
 2437               		.loc 3 108 0
 2438 0052 40E1      		ldi r20,lo8(16)
 2439 0054 50E0      		ldi r21,0
 2440 0056 60E0      		ldi r22,0
 2441 0058 70E0      		ldi r23,0
 2442 005a 80E0      		ldi r24,lo8(receivedBuffer)
 2443 005c 90E0      		ldi r25,hi8(receivedBuffer)
 2444 005e 00D0      		rcall strtol
 2445               	.LVL179:
 2446 0060 6B01      		movw r12,r22
 2447 0062 7C01      		movw r14,r24
 2448               	.LVL180:
 2449 0064 00C0      		rjmp .L93
 2450               	.LVL181:
 2451               	.L101:
 115:main.c        **** 			gb_mode();
 2452               		.loc 3 115 0
 2453 0066 9235      		cpi r25,lo8(82)
 2454 0068 01F4      		brne .L102
 116:main.c        **** 			receivedChar = '1';
 2455               		.loc 3 116 0
 2456 006a 00D0      		rcall gb_mode
 2457               	.LVL182:
 117:main.c        **** 			while (receivedChar == '1') {
 2458               		.loc 3 117 0
 2459 006c 3092 0000 		sts receivedChar,r3
 2460               	.LVL183:
 2461               	.L103:
 118:main.c        **** 				PORTD |= (1<<ACTIVITY_LED);
 2462               		.loc 3 118 0
 2463 0070 8091 0000 		lds r24,receivedChar
 2464 0074 8133      		cpi r24,lo8(49)
 2465 0076 01F4      		brne .L93
 119:main.c        **** 				for (uint8_t x = 0; x < 64; x++) {
 2466               		.loc 3 119 0
 2467 0078 939A      		sbi 0x12,3
 2468               	.LVL184:
 2469 007a 00E0      		ldi r16,0
 2470 007c 10E0      		ldi r17,0
 2471               	.LVL185:
 2472               	.L104:
 2473               	.LBB176:
 121:main.c        **** 					address++;
 2474               		.loc 3 121 0 discriminator 3
 2475 007e C801      		movw r24,r16
 2476 0080 8C0D      		add r24,r12
 2477 0082 9D1D      		adc r25,r13
 2478 0084 00D0      		rcall read_8bit_data
 2479               	.LVL186:
 2480 0086 00D0      		rcall USART_Transmit
 2481               	.LVL187:
 2482 0088 0F5F      		subi r16,-1
 2483 008a 1F4F      		sbci r17,-1
 2484               	.LVL188:
 120:main.c        **** 					USART_Transmit(read_8bit_data(address));
 2485               		.loc 3 120 0 discriminator 3
 2486 008c 0034      		cpi r16,64
 2487 008e 1105      		cpc r17,__zero_reg__
 2488 0090 01F4      		brne .L104
 2489 0092 80E4      		ldi r24,64
 2490 0094 C80E      		add r12,r24
 2491 0096 D11C      		adc r13,__zero_reg__
 2492 0098 E11C      		adc r14,__zero_reg__
 2493 009a F11C      		adc r15,__zero_reg__
 2494               	.LBE176:
 125:main.c        **** 				receivedChar = USART_Receive();
 2495               		.loc 3 125 0
 2496 009c 9398      		cbi 0x12,3
 126:main.c        **** 			}
 2497               		.loc 3 126 0
 2498 009e 00D0      		rcall USART_Receive
 2499               	.LVL189:
 2500 00a0 8093 0000 		sts receivedChar,r24
 2501 00a4 00C0      		rjmp .L103
 2502               	.LVL190:
 2503               	.L102:
 131:main.c        **** 			gb_mode();
 2504               		.loc 3 131 0
 2505 00a6 9735      		cpi r25,lo8(87)
 2506 00a8 01F4      		brne .L106
 132:main.c        **** 			
 2507               		.loc 3 132 0
 2508 00aa 00D0      		rcall gb_mode
 2509               	.LVL191:
 135:main.c        **** 			
 2510               		.loc 3 135 0
 2511 00ac 80E4      		ldi r24,lo8(64)
 2512 00ae 90E0      		ldi r25,0
 2513 00b0 00D0      		rcall usart_read_bytes
 2514               	.LVL192:
 137:main.c        **** 			for (uint8_t x = 0; x < 64; x++) {
 2515               		.loc 3 137 0
 2516 00b2 939A      		sbi 0x12,3
 2517               	.LVL193:
 2518 00b4 00E0      		ldi r16,lo8(receivedBuffer)
 2519 00b6 A02E      		mov r10,r16
 2520 00b8 00E0      		ldi r16,hi8(receivedBuffer)
 2521 00ba B02E      		mov r11,r16
 2522 00bc 00E0      		ldi r16,0
 2523 00be 10E0      		ldi r17,0
 2524               	.LVL194:
 2525               	.L107:
 2526               	.LBB177:
 139:main.c        **** 				address++;
 2527               		.loc 3 139 0 discriminator 3
 2528 00c0 F501      		movw r30,r10
 2529 00c2 6191      		ld r22,Z+
 2530 00c4 5F01      		movw r10,r30
 2531 00c6 C801      		movw r24,r16
 2532 00c8 8C0D      		add r24,r12
 2533 00ca 9D1D      		adc r25,r13
 2534 00cc 41E0      		ldi r20,lo8(1)
 2535 00ce 00D0      		rcall write_8bit_data
 2536               	.LVL195:
 2537 00d0 0F5F      		subi r16,-1
 2538 00d2 1F4F      		sbci r17,-1
 2539               	.LVL196:
 138:main.c        **** 				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
 2540               		.loc 3 138 0 discriminator 3
 2541 00d4 0034      		cpi r16,64
 2542 00d6 1105      		cpc r17,__zero_reg__
 2543 00d8 01F4      		brne .L107
 2544 00da F0E4      		ldi r31,64
 2545 00dc CF0E      		add r12,r31
 2546 00de D11C      		adc r13,__zero_reg__
 2547 00e0 E11C      		adc r14,__zero_reg__
 2548 00e2 F11C      		adc r15,__zero_reg__
 2549 00e4 00C0      		rjmp .L255
 2550               	.LVL197:
 2551               	.L106:
 2552               	.LBE177:
 148:main.c        **** 			gb_mode();
 2553               		.loc 3 148 0
 2554 00e6 9234      		cpi r25,lo8(66)
 2555 00e8 01F4      		brne .L108
 2556               	.LBB178:
 149:main.c        **** 			
 2557               		.loc 3 149 0
 2558 00ea 00D0      		rcall gb_mode
 2559               	.LVL198:
 151:main.c        **** 			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
 2560               		.loc 3 151 0
 2561 00ec 00D0      		rcall usart_read_chars
 2562               	.LVL199:
 152:main.c        **** 			
 2563               		.loc 3 152 0
 2564 00ee 40E1      		ldi r20,lo8(16)
 2565 00f0 50E0      		ldi r21,0
 2566 00f2 60E0      		ldi r22,0
 2567 00f4 70E0      		ldi r23,0
 2568 00f6 80E0      		ldi r24,lo8(receivedBuffer)
 2569 00f8 90E0      		ldi r25,hi8(receivedBuffer)
 2570 00fa 00D0      		rcall strtol
 2571               	.LVL200:
 2572 00fc 4B01      		movw r8,r22
 2573 00fe 5C01      		movw r10,r24
 2574               	.LVL201:
 154:main.c        **** 			if (receivedChar == 'B') {
 2575               		.loc 3 154 0
 2576 0100 00D0      		rcall USART_Receive
 2577               	.LVL202:
 2578 0102 8093 0000 		sts receivedChar,r24
 155:main.c        **** 				usart_read_chars(); // Read data
 2579               		.loc 3 155 0
 2580 0106 8234      		cpi r24,lo8(66)
 2581 0108 01F0      		breq .+2
 2582 010a 00C0      		rjmp .L93
 2583               	.LBB179:
 156:main.c        **** 				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
 2584               		.loc 3 156 0
 2585 010c 00D0      		rcall usart_read_chars
 2586               	.LVL203:
 157:main.c        **** 				lastBankAccessed = data; // Store the last bank accessed (used for flash carts that need it)
 2587               		.loc 3 157 0
 2588 010e 80E0      		ldi r24,lo8(receivedBuffer)
 2589 0110 90E0      		ldi r25,hi8(receivedBuffer)
 2590 0112 00D0      		rcall atoi
 2591               	.LVL204:
 158:main.c        **** 				
 2592               		.loc 3 158 0
 2593 0114 8093 0000 		sts lastBankAccessed,r24
 160:main.c        **** 			}
 2594               		.loc 3 160 0
 2595 0118 40E0      		ldi r20,0
 2596 011a 682F      		mov r22,r24
 2597 011c C401      		movw r24,r8
 2598               	.LVL205:
 2599 011e 00D0      		rcall write_8bit_data
 2600               	.LVL206:
 2601 0120 00C0      		rjmp .L93
 2602               	.LVL207:
 2603               	.L108:
 2604               	.LBE179:
 2605               	.LBE178:
 169:main.c        **** 			gba_mode();
 2606               		.loc 3 169 0
 2607 0122 9237      		cpi r25,lo8(114)
 2608 0124 01F0      		breq .L109
 169:main.c        **** 			gba_mode();
 2609               		.loc 3 169 0 is_stmt 0 discriminator 1
 2610 0126 9A36      		cpi r25,lo8(106)
 2611 0128 01F4      		brne .L110
 2612               	.L109:
 2613               	.LBB180:
 170:main.c        **** 			
 2614               		.loc 3 170 0 is_stmt 1
 2615 012a 00D0      		rcall gba_mode
 2616               	.LVL208:
 173:main.c        **** 				readEnd = 128;
 2617               		.loc 3 173 0
 2618 012c 8091 0000 		lds r24,receivedChar
 2619 0130 8A36      		cpi r24,lo8(106)
 2620 0132 01F4      		brne .L206
 174:main.c        **** 			}
 2621               		.loc 3 174 0
 2622 0134 10E8      		ldi r17,lo8(-128)
 2623 0136 00C0      		rjmp .L111
 2624               	.L206:
 172:main.c        **** 			if (receivedChar == GBA_READ_ROM_256BYTE) {
 2625               		.loc 3 172 0
 2626 0138 10E2      		ldi r17,lo8(32)
 2627               	.L111:
 2628               	.LVL209:
 177:main.c        **** 			while (receivedChar == '1') {
 2629               		.loc 3 177 0
 2630 013a 3092 0000 		sts receivedChar,r3
 2631 013e 8824      		clr r8
 2632 0140 8A94      		dec r8
 2633 0142 810E      		add r8,r17
 2634 0144 912C      		mov r9,__zero_reg__
 2635 0146 A12C      		mov r10,__zero_reg__
 2636 0148 B12C      		mov r11,__zero_reg__
 2637 014a 2FEF      		ldi r18,-1
 2638 014c 821A      		sub r8,r18
 2639 014e 920A      		sbc r9,r18
 2640 0150 A20A      		sbc r10,r18
 2641 0152 B20A      		sbc r11,r18
 2642               	.LVL210:
 2643               	.L112:
 178:main.c        **** 				PORTD |= (1<<ACTIVITY_LED);
 2644               		.loc 3 178 0
 2645 0154 8091 0000 		lds r24,receivedChar
 2646 0158 8133      		cpi r24,lo8(49)
 2647 015a 01F0      		breq .+2
 2648 015c 00C0      		rjmp .L93
 179:main.c        **** 				
 2649               		.loc 3 179 0
 2650 015e 939A      		sbi 0x12,3
 2651               	.LVL211:
 2652 0160 2601      		movw r4,r12
 2653 0162 3701      		movw r6,r14
 2654               	.LVL212:
 2655               	.L113:
 2656               	.LBB169:
 2657               	.LBB170:
 182:main.c        **** 					
 2658               		.loc 3 182 0 discriminator 3
 2659 0164 C301      		movw r24,r6
 2660 0166 B201      		movw r22,r4
 2661 0168 00D0      		rcall gba_read_16bit_data
 2662               	.LVL213:
 2663 016a 092F      		mov r16,r25
 2664               	.LVL214:
 185:main.c        **** 					USART_Transmit(dataRead >> 8);
 2665               		.loc 3 185 0 discriminator 3
 2666 016c 00D0      		rcall USART_Transmit
 2667               	.LVL215:
 186:main.c        **** 					
 2668               		.loc 3 186 0 discriminator 3
 2669 016e 802F      		mov r24,r16
 2670 0170 00D0      		rcall USART_Transmit
 2671               	.LVL216:
 188:main.c        **** 				}
 2672               		.loc 3 188 0 discriminator 3
 2673 0172 8FEF      		ldi r24,-1
 2674 0174 481A      		sub r4,r24
 2675 0176 580A      		sbc r5,r24
 2676 0178 680A      		sbc r6,r24
 2677 017a 780A      		sbc r7,r24
 2678               	.LVL217:
 2679               	.LBE170:
 181:main.c        **** 					uint16_t dataRead = gba_read_16bit_data(address);
 2680               		.loc 3 181 0 discriminator 3
 2681 017c 842D      		mov r24,r4
 2682 017e 8C19      		sub r24,r12
 2683 0180 8117      		cp r24,r17
 2684 0182 00F0      		brlo .L113
 2685 0184 C80C      		add r12,r8
 2686 0186 D91C      		adc r13,r9
 2687 0188 EA1C      		adc r14,r10
 2688 018a FB1C      		adc r15,r11
 2689               	.LVL218:
 2690               	.LBE169:
 191:main.c        **** 				receivedChar = USART_Receive();
 2691               		.loc 3 191 0
 2692 018c 9398      		cbi 0x12,3
 192:main.c        **** 			}
 2693               		.loc 3 192 0
 2694 018e 00D0      		rcall USART_Receive
 2695               	.LVL219:
 2696 0190 8093 0000 		sts receivedChar,r24
 2697 0194 00C0      		rjmp .L112
 2698               	.LVL220:
 2699               	.L110:
 2700               	.LBE180:
 198:main.c        **** 			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
 2701               		.loc 3 198 0
 2702 0196 9D36      		cpi r25,lo8(109)
 2703 0198 01F4      		brne .L115
 199:main.c        **** 			
 2704               		.loc 3 199 0
 2705 019a 00D0      		rcall gb_mode
 2706               	.LVL221:
 201:main.c        **** 			while (receivedChar == '1') {
 2707               		.loc 3 201 0
 2708 019c 3092 0000 		sts receivedChar,r3
 2709               	.LVL222:
 2710               	.L116:
 202:main.c        **** 				PORTD |= (1<<ACTIVITY_LED);
 2711               		.loc 3 202 0
 2712 01a0 8091 0000 		lds r24,receivedChar
 2713 01a4 8133      		cpi r24,lo8(49)
 2714 01a6 01F4      		brne .L238
 203:main.c        **** 				for (uint8_t x = 0; x < 64; x++) {
 2715               		.loc 3 203 0
 2716 01a8 939A      		sbi 0x12,3
 2717               	.LVL223:
 2718 01aa 00E0      		ldi r16,0
 2719 01ac 10E0      		ldi r17,0
 2720               	.LVL224:
 2721               	.L117:
 2722               	.LBB181:
 205:main.c        **** 					address++;
 2723               		.loc 3 205 0 discriminator 3
 2724 01ae C801      		movw r24,r16
 2725 01b0 8C0D      		add r24,r12
 2726 01b2 9D1D      		adc r25,r13
 2727 01b4 00D0      		rcall gba_read_ram_8bit_data
 2728               	.LVL225:
 2729 01b6 00D0      		rcall USART_Transmit
 2730               	.LVL226:
 2731 01b8 0F5F      		subi r16,-1
 2732 01ba 1F4F      		sbci r17,-1
 2733               	.LVL227:
 204:main.c        **** 					USART_Transmit(gba_read_ram_8bit_data(address));
 2734               		.loc 3 204 0 discriminator 3
 2735 01bc 0034      		cpi r16,64
 2736 01be 1105      		cpc r17,__zero_reg__
 2737 01c0 01F4      		brne .L117
 2738 01c2 90E4      		ldi r25,64
 2739 01c4 C90E      		add r12,r25
 2740 01c6 D11C      		adc r13,__zero_reg__
 2741 01c8 E11C      		adc r14,__zero_reg__
 2742 01ca F11C      		adc r15,__zero_reg__
 2743               	.LBE181:
 209:main.c        **** 				receivedChar = USART_Receive();
 2744               		.loc 3 209 0
 2745 01cc 9398      		cbi 0x12,3
 210:main.c        **** 			}
 2746               		.loc 3 210 0
 2747 01ce 00D0      		rcall USART_Receive
 2748               	.LVL228:
 2749 01d0 8093 0000 		sts receivedChar,r24
 2750 01d4 00C0      		rjmp .L116
 2751               	.LVL229:
 2752               	.L115:
 217:main.c        **** 			gb_mode();
 2753               		.loc 3 217 0
 2754 01d6 9737      		cpi r25,lo8(119)
 2755 01d8 01F4      		brne .L119
 218:main.c        **** 			
 2756               		.loc 3 218 0
 2757 01da 00D0      		rcall gb_mode
 2758               	.LVL230:
 220:main.c        **** 			
 2759               		.loc 3 220 0
 2760 01dc 80E4      		ldi r24,lo8(64)
 2761 01de 90E0      		ldi r25,0
 2762 01e0 00D0      		rcall usart_read_bytes
 2763               	.LVL231:
 222:main.c        **** 			for (uint8_t x = 0; x < 64; x++) {
 2764               		.loc 3 222 0
 2765 01e2 939A      		sbi 0x12,3
 2766               	.LVL232:
 2767 01e4 10E0      		ldi r17,lo8(receivedBuffer)
 2768 01e6 A12E      		mov r10,r17
 2769 01e8 10E0      		ldi r17,hi8(receivedBuffer)
 2770 01ea B12E      		mov r11,r17
 2771 01ec 00E0      		ldi r16,0
 2772 01ee 10E0      		ldi r17,0
 2773               	.LVL233:
 2774               	.L120:
 2775               	.LBB182:
 224:main.c        **** 				address++;
 2776               		.loc 3 224 0 discriminator 3
 2777 01f0 F501      		movw r30,r10
 2778 01f2 6191      		ld r22,Z+
 2779 01f4 5F01      		movw r10,r30
 2780 01f6 C801      		movw r24,r16
 2781 01f8 8C0D      		add r24,r12
 2782 01fa 9D1D      		adc r25,r13
 2783 01fc 00D0      		rcall gba_write_ram_8bit_data
 2784               	.LVL234:
 2785 01fe 0F5F      		subi r16,-1
 2786 0200 1F4F      		sbci r17,-1
 2787               	.LVL235:
 223:main.c        **** 				gba_write_ram_8bit_data(address, receivedBuffer[x]);
 2788               		.loc 3 223 0 discriminator 3
 2789 0202 0034      		cpi r16,64
 2790 0204 1105      		cpc r17,__zero_reg__
 2791 0206 01F4      		brne .L120
 2792               	.LVL236:
 2793               	.L241:
 2794 0208 F0E4      		ldi r31,64
 2795 020a CF0E      		add r12,r31
 2796 020c D11C      		adc r13,__zero_reg__
 2797 020e E11C      		adc r14,__zero_reg__
 2798 0210 F11C      		adc r15,__zero_reg__
 2799               	.L240:
 2800               	.LBE182:
 227:main.c        **** 			
 2801               		.loc 3 227 0
 2802 0212 81E3      		ldi r24,lo8(49)
 2803 0214 00D0      		rcall USART_Transmit
 2804               	.LVL237:
 229:main.c        **** 			gba_mode(); // Set back
 2805               		.loc 3 229 0
 2806 0216 9398      		cbi 0x12,3
 2807               	.L238:
 230:main.c        **** 		}
 2808               		.loc 3 230 0
 2809 0218 00D0      		rcall gba_mode
 2810               	.LVL238:
 2811 021a 00C0      		rjmp .L93
 2812               	.LVL239:
 2813               	.L119:
 234:main.c        **** 			gb_mode();
 2814               		.loc 3 234 0
 2815 021c 9F36      		cpi r25,lo8(111)
 2816 021e 01F4      		brne .L121
 2817               	.LBB183:
 235:main.c        **** 			
 2818               		.loc 3 235 0
 2819 0220 00D0      		rcall gb_mode
 2820               	.LVL240:
 237:main.c        **** 			gba_write_ram_8bit_data(address, data);
 2821               		.loc 3 237 0
 2822 0222 00D0      		rcall USART_Receive
 2823               	.LVL241:
 238:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 2824               		.loc 3 238 0
 2825 0224 682F      		mov r22,r24
 2826 0226 C601      		movw r24,r12
 2827               	.LVL242:
 2828 0228 00D0      		rcall gba_write_ram_8bit_data
 2829               	.LVL243:
 2830 022a 00C0      		rjmp .L243
 2831               	.LVL244:
 2832               	.L121:
 2833               	.LBE183:
 247:main.c        **** 			gb_mode();
 2834               		.loc 3 247 0
 2835 022c 9936      		cpi r25,lo8(105)
 2836 022e 01F4      		brne .L122
 248:main.c        **** 			
 2837               		.loc 3 248 0
 2838 0230 00D0      		rcall gb_mode
 2839               	.LVL245:
 250:main.c        **** 			USART_Transmit(flashChipIdBuffer[0]);
 2840               		.loc 3 250 0
 2841 0232 00D0      		rcall flash_read_chip_id
 2842               	.LVL246:
 251:main.c        **** 			USART_Transmit(flashChipIdBuffer[1]);
 2843               		.loc 3 251 0
 2844 0234 8091 0000 		lds r24,flashChipIdBuffer
 2845 0238 00D0      		rcall USART_Transmit
 2846               	.LVL247:
 252:main.c        **** 			
 2847               		.loc 3 252 0
 2848 023a 8091 0000 		lds r24,flashChipIdBuffer+1
 2849               	.L242:
 2850 023e 00D0      		rcall USART_Transmit
 2851               	.LVL248:
 2852 0240 00C0      		rjmp .L238
 2853               	.LVL249:
 2854               	.L122:
 258:main.c        **** 			usart_read_chars(); // Read data
 2855               		.loc 3 258 0
 2856 0242 9B36      		cpi r25,lo8(107)
 2857 0244 01F4      		brne .L123
 2858               	.LBB184:
 259:main.c        **** 			uint8_t bank = atoi(receivedBuffer); // Convert data string to dec
 2859               		.loc 3 259 0
 2860 0246 00D0      		rcall usart_read_chars
 2861               	.LVL250:
 260:main.c        **** 			
 2862               		.loc 3 260 0
 2863 0248 80E0      		ldi r24,lo8(receivedBuffer)
 2864 024a 90E0      		ldi r25,hi8(receivedBuffer)
 2865 024c 00D0      		rcall atoi
 2866               	.LVL251:
 2867 024e 182F      		mov r17,r24
 2868               	.LVL252:
 262:main.c        **** 			flash_switch_bank(bank);
 2869               		.loc 3 262 0
 2870 0250 00D0      		rcall gb_mode
 2871               	.LVL253:
 263:main.c        **** 			
 2872               		.loc 3 263 0
 2873 0252 812F      		mov r24,r17
 2874 0254 00D0      		rcall flash_switch_bank
 2875               	.LVL254:
 2876 0256 00C0      		rjmp .L238
 2877               	.LVL255:
 2878               	.L123:
 2879               	.LBE184:
 269:main.c        **** 			gb_mode();
 2880               		.loc 3 269 0
 2881 0258 9337      		cpi r25,lo8(115)
 2882 025a 01F4      		brne .L124
 2883               	.LBB185:
 270:main.c        **** 			
 2884               		.loc 3 270 0
 2885 025c 00D0      		rcall gb_mode
 2886               	.LVL256:
 272:main.c        **** 			uint8_t sectorAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to de
 2887               		.loc 3 272 0
 2888 025e 00D0      		rcall usart_read_chars
 2889               	.LVL257:
 273:main.c        **** 			
 2890               		.loc 3 273 0
 2891 0260 40E1      		ldi r20,lo8(16)
 2892 0262 50E0      		ldi r21,0
 2893 0264 60E0      		ldi r22,0
 2894 0266 70E0      		ldi r23,0
 2895 0268 80E0      		ldi r24,lo8(receivedBuffer)
 2896 026a 90E0      		ldi r25,hi8(receivedBuffer)
 2897 026c 00D0      		rcall strtol
 2898               	.LVL258:
 2899 026e 862F      		mov r24,r22
 2900               	.LVL259:
 275:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 2901               		.loc 3 275 0
 2902 0270 00D0      		rcall flash_erase_4k_sector
 2903               	.LVL260:
 2904               	.L243:
 276:main.c        **** 			
 2905               		.loc 3 276 0
 2906 0272 81E3      		ldi r24,lo8(49)
 2907 0274 00C0      		rjmp .L242
 2908               	.LVL261:
 2909               	.L124:
 2910               	.LBE185:
 282:main.c        **** 			gb_mode();
 2911               		.loc 3 282 0
 2912 0276 9236      		cpi r25,lo8(98)
 2913 0278 01F4      		brne .L125
 283:main.c        **** 			
 2914               		.loc 3 283 0
 2915 027a 00D0      		rcall gb_mode
 2916               	.LVL262:
 285:main.c        **** 			
 2917               		.loc 3 285 0
 2918 027c 80E4      		ldi r24,lo8(64)
 2919 027e 90E0      		ldi r25,0
 2920 0280 00D0      		rcall usart_read_bytes
 2921               	.LVL263:
 287:main.c        **** 			for (uint8_t x = 0; x < 64; x++) {
 2922               		.loc 3 287 0
 2923 0282 939A      		sbi 0x12,3
 2924               	.LVL264:
 2925 0284 B0E0      		ldi r27,lo8(receivedBuffer)
 2926 0286 AB2E      		mov r10,r27
 2927 0288 B0E0      		ldi r27,hi8(receivedBuffer)
 2928 028a BB2E      		mov r11,r27
 2929 028c 00E0      		ldi r16,0
 2930 028e 10E0      		ldi r17,0
 2931               	.LVL265:
 2932               	.L126:
 2933               	.LBB186:
 289:main.c        **** 				address++;
 2934               		.loc 3 289 0 discriminator 3
 2935 0290 F501      		movw r30,r10
 2936 0292 6191      		ld r22,Z+
 2937 0294 5F01      		movw r10,r30
 2938 0296 C801      		movw r24,r16
 2939 0298 8C0D      		add r24,r12
 2940 029a 9D1D      		adc r25,r13
 2941 029c 00D0      		rcall flash_write_byte
 2942               	.LVL266:
 2943 029e 0F5F      		subi r16,-1
 2944 02a0 1F4F      		sbci r17,-1
 2945               	.LVL267:
 288:main.c        **** 				flash_write_byte(address, receivedBuffer[x]);
 2946               		.loc 3 288 0 discriminator 3
 2947 02a2 0034      		cpi r16,64
 2948 02a4 1105      		cpc r17,__zero_reg__
 2949 02a6 01F4      		brne .L126
 2950 02a8 00C0      		rjmp .L241
 2951               	.LVL268:
 2952               	.L125:
 2953               	.LBE186:
 299:main.c        **** 			gb_mode();
 2954               		.loc 3 299 0
 2955 02aa 9136      		cpi r25,lo8(97)
 2956 02ac 01F4      		brne .L127
 300:main.c        **** 			
 2957               		.loc 3 300 0
 2958 02ae 00D0      		rcall gb_mode
 2959               	.LVL269:
 302:main.c        **** 			
 2960               		.loc 3 302 0
 2961 02b0 80E8      		ldi r24,lo8(-128)
 2962 02b2 90E0      		ldi r25,0
 2963 02b4 00D0      		rcall usart_read_bytes
 2964               	.LVL270:
 304:main.c        **** 			flash_write_sector(address); // Address used as sector number
 2965               		.loc 3 304 0
 2966 02b6 939A      		sbi 0x12,3
 305:main.c        **** 			address++;
 2967               		.loc 3 305 0
 2968 02b8 C601      		movw r24,r12
 2969 02ba 00D0      		rcall flash_write_sector
 2970               	.LVL271:
 306:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 2971               		.loc 3 306 0
 2972 02bc 2FEF      		ldi r18,-1
 2973 02be C21A      		sub r12,r18
 2974 02c0 D20A      		sbc r13,r18
 2975 02c2 E20A      		sbc r14,r18
 2976 02c4 F20A      		sbc r15,r18
 2977               	.LVL272:
 2978 02c6 00C0      		rjmp .L240
 2979               	.LVL273:
 2980               	.L127:
 316:main.c        **** 			usart_read_chars(); // Read size
 2981               		.loc 3 316 0
 2982 02c8 9335      		cpi r25,lo8(83)
 2983 02ca 01F4      		brne .L128
 317:main.c        **** 			eepromSize = strtol(receivedBuffer, NULL, 16); // Convert size to dec
 2984               		.loc 3 317 0
 2985 02cc 00D0      		rcall usart_read_chars
 2986               	.LVL274:
 318:main.c        **** 		}
 2987               		.loc 3 318 0
 2988 02ce 40E1      		ldi r20,lo8(16)
 2989 02d0 50E0      		ldi r21,0
 2990 02d2 60E0      		ldi r22,0
 2991 02d4 70E0      		ldi r23,0
 2992 02d6 80E0      		ldi r24,lo8(receivedBuffer)
 2993 02d8 90E0      		ldi r25,hi8(receivedBuffer)
 2994 02da 00D0      		rcall strtol
 2995               	.LVL275:
 2996 02dc D62F      		mov r29,r22
 2997               	.LVL276:
 2998 02de 00C0      		rjmp .L93
 2999               	.LVL277:
 3000               	.L128:
 322:main.c        **** 			gba_eeprom_mode();
 3001               		.loc 3 322 0
 3002 02e0 9536      		cpi r25,lo8(101)
 3003 02e2 01F4      		brne .L129
 323:main.c        **** 			
 3004               		.loc 3 323 0
 3005 02e4 00D0      		rcall gba_eeprom_mode
 3006               	.LVL278:
 325:main.c        **** 			while (receivedChar == '1') {
 3007               		.loc 3 325 0
 3008 02e6 3092 0000 		sts receivedChar,r3
 3009               	.L130:
 326:main.c        **** 				PORTD |= (1<<ACTIVITY_LED);
 3010               		.loc 3 326 0
 3011 02ea 8091 0000 		lds r24,receivedChar
 3012 02ee 8133      		cpi r24,lo8(49)
 3013 02f0 01F0      		breq .+2
 3014 02f2 00C0      		rjmp .L238
 327:main.c        **** 				gba_eeprom_read(address, eepromSize);
 3015               		.loc 3 327 0
 3016 02f4 939A      		sbi 0x12,3
 328:main.c        **** 				
 3017               		.loc 3 328 0
 3018 02f6 6D2F      		mov r22,r29
 3019 02f8 C601      		movw r24,r12
 3020 02fa 00D0      		rcall gba_eeprom_read
 3021               	.LVL279:
 3022 02fc 00E0      		ldi r16,lo8(eepromBuffer)
 3023 02fe 10E0      		ldi r17,hi8(eepromBuffer)
 3024               	.LVL280:
 3025               	.L131:
 3026               	.LBB187:
 332:main.c        **** 				}
 3027               		.loc 3 332 0 discriminator 3
 3028 0300 F801      		movw r30,r16
 3029 0302 8191      		ld r24,Z+
 3030 0304 8F01      		movw r16,r30
 3031               	.LVL281:
 3032 0306 00D0      		rcall USART_Transmit
 3033               	.LVL282:
 331:main.c        **** 					USART_Transmit(eepromBuffer[c]);
 3034               		.loc 3 331 0 discriminator 3
 3035 0308 80E0      		ldi r24,lo8(eepromBuffer+8)
 3036 030a 90E0      		ldi r25,hi8(eepromBuffer+8)
 3037 030c 8017      		cp r24,r16
 3038 030e 9107      		cpc r25,r17
 3039 0310 01F4      		brne .L131
 3040               	.LBE187:
 334:main.c        **** 				
 3041               		.loc 3 334 0
 3042 0312 9FEF      		ldi r25,-1
 3043 0314 C91A      		sub r12,r25
 3044 0316 D90A      		sbc r13,r25
 3045 0318 E90A      		sbc r14,r25
 3046 031a F90A      		sbc r15,r25
 3047               	.LVL283:
 336:main.c        **** 				receivedChar = USART_Receive();
 3048               		.loc 3 336 0
 3049 031c 9398      		cbi 0x12,3
 337:main.c        **** 			}
 3050               		.loc 3 337 0
 3051 031e 00D0      		rcall USART_Receive
 3052               	.LVL284:
 3053 0320 8093 0000 		sts receivedChar,r24
 3054 0324 00C0      		rjmp .L130
 3055               	.LVL285:
 3056               	.L129:
 344:main.c        **** 			gba_eeprom_mode();
 3057               		.loc 3 344 0
 3058 0326 9037      		cpi r25,lo8(112)
 3059 0328 01F4      		brne .L133
 345:main.c        **** 			
 3060               		.loc 3 345 0
 3061 032a 00D0      		rcall gba_eeprom_mode
 3062               	.LVL286:
 3063 032c 00E0      		ldi r16,lo8(eepromBuffer)
 3064 032e 10E0      		ldi r17,hi8(eepromBuffer)
 3065               	.LVL287:
 3066               	.L134:
 3067               	.LBB188:
 349:main.c        **** 			}
 3068               		.loc 3 349 0 discriminator 3
 3069 0330 00D0      		rcall USART_Receive
 3070               	.LVL288:
 3071 0332 F801      		movw r30,r16
 3072 0334 8193      		st Z+,r24
 3073 0336 8F01      		movw r16,r30
 3074               	.LVL289:
 348:main.c        **** 				eepromBuffer[x] = USART_Receive();
 3075               		.loc 3 348 0 discriminator 3
 3076 0338 80E0      		ldi r24,lo8(eepromBuffer+8)
 3077 033a 90E0      		ldi r25,hi8(eepromBuffer+8)
 3078 033c 8E17      		cp r24,r30
 3079 033e 9F07      		cpc r25,r31
 3080 0340 01F4      		brne .L134
 3081               	.LBE188:
 351:main.c        **** 			
 3082               		.loc 3 351 0
 3083 0342 939A      		sbi 0x12,3
 353:main.c        **** 			address++;
 3084               		.loc 3 353 0
 3085 0344 6D2F      		mov r22,r29
 3086 0346 C601      		movw r24,r12
 3087 0348 00D0      		rcall gba_eeprom_write
 3088               	.LVL290:
 354:main.c        **** 			
 3089               		.loc 3 354 0
 3090 034a 9FEF      		ldi r25,-1
 3091 034c C91A      		sub r12,r25
 3092 034e D90A      		sbc r13,r25
 3093 0350 E90A      		sbc r14,r25
 3094 0352 F90A      		sbc r15,r25
 3095               	.LVL291:
 3096               	.LBB189:
 3097               	.LBB190:
 187:c:\winavr-20100110\avr\include\util\delay.h **** 
 3098               		.loc 2 187 0
 3099 0354 EFE7      		ldi r30,lo8(15999)
 3100 0356 FEE3      		ldi r31,hi8(15999)
 3101 0358 3197      	1:	sbiw r30,1
 3102 035a 01F4      		brne 1b
 3103 035c 00C0      		rjmp .
 3104 035e 0000      		nop
 3105               	.LVL292:
 3106 0360 00C0      		rjmp .L240
 3107               	.LVL293:
 3108               	.L133:
 3109               	.LBE190:
 3110               	.LBE189:
 366:main.c        **** 			flashWriteWePin = USART_Receive();
 3111               		.loc 3 366 0
 3112 0362 9035      		cpi r25,lo8(80)
 3113 0364 01F4      		brne .L135
 367:main.c        **** 			
 3114               		.loc 3 367 0
 3115 0366 00D0      		rcall USART_Receive
 3116               	.LVL294:
 3117 0368 8093 0000 		sts flashWriteWePin,r24
 369:main.c        **** 				DDRE |= (1<<AUDIO_PIN);
 3118               		.loc 3 369 0
 3119 036c 8134      		cpi r24,lo8(65)
 3120 036e 01F0      		breq .+2
 3121 0370 00C0      		rjmp .L93
 370:main.c        **** 				audioPin_high;
 3122               		.loc 3 370 0
 3123 0372 319A      		sbi 0x6,1
 371:main.c        **** 			}
 3124               		.loc 3 371 0
 3125 0374 399A      		sbi 0x7,1
 3126 0376 00C0      		rjmp .L93
 3127               	.LVL295:
 3128               	.L135:
 376:main.c        **** 			flashBank1CommandWrites = 1;
 3129               		.loc 3 376 0
 3130 0378 9E34      		cpi r25,lo8(78)
 3131 037a 01F4      		brne .L136
 377:main.c        **** 		}
 3132               		.loc 3 377 0
 3133 037c F1E0      		ldi r31,lo8(1)
 3134 037e F093 0000 		sts flashBank1CommandWrites,r31
 3135 0382 00C0      		rjmp .L93
 3136               	.L136:
 381:main.c        **** 			for (uint8_t x = 0; x < 3; x++) {
 3137               		.loc 3 381 0
 3138 0384 9534      		cpi r25,lo8(69)
 3139 0386 01F4      		brne .L137
 3140 0388 00E0      		ldi r16,lo8(flashWriteCycle)
 3141 038a 10E0      		ldi r17,hi8(flashWriteCycle)
 3142               	.LVL296:
 3143               	.L138:
 3144               	.LBB191:
 383:main.c        **** 				flashWriteCycle[x][0] = strtol(receivedBuffer, NULL, 16);
 3145               		.loc 3 383 0 discriminator 3
 3146 038c 00D0      		rcall usart_read_chars
 3147               	.LVL297:
 384:main.c        **** 				USART_Transmit(SEND_ACK);
 3148               		.loc 3 384 0 discriminator 3
 3149 038e 40E1      		ldi r20,lo8(16)
 3150 0390 50E0      		ldi r21,0
 3151 0392 60E0      		ldi r22,0
 3152 0394 70E0      		ldi r23,0
 3153 0396 80E0      		ldi r24,lo8(receivedBuffer)
 3154 0398 90E0      		ldi r25,hi8(receivedBuffer)
 3155 039a 00D0      		rcall strtol
 3156               	.LVL298:
 3157 039c F801      		movw r30,r16
 3158 039e 7183      		std Z+1,r23
 3159 03a0 6083      		st Z,r22
 385:main.c        **** 				
 3160               		.loc 3 385 0 discriminator 3
 3161 03a2 81E3      		ldi r24,lo8(49)
 3162 03a4 00D0      		rcall USART_Transmit
 3163               	.LVL299:
 387:main.c        **** 				flashWriteCycle[x][1] = strtol(receivedBuffer, NULL, 16);
 3164               		.loc 3 387 0 discriminator 3
 3165 03a6 00D0      		rcall usart_read_chars
 3166               	.LVL300:
 388:main.c        **** 				USART_Transmit(SEND_ACK);
 3167               		.loc 3 388 0 discriminator 3
 3168 03a8 40E1      		ldi r20,lo8(16)
 3169 03aa 50E0      		ldi r21,0
 3170 03ac 60E0      		ldi r22,0
 3171 03ae 70E0      		ldi r23,0
 3172 03b0 80E0      		ldi r24,lo8(receivedBuffer)
 3173 03b2 90E0      		ldi r25,hi8(receivedBuffer)
 3174 03b4 00D0      		rcall strtol
 3175               	.LVL301:
 3176 03b6 F801      		movw r30,r16
 3177 03b8 7383      		std Z+3,r23
 3178 03ba 6283      		std Z+2,r22
 389:main.c        **** 			}
 3179               		.loc 3 389 0 discriminator 3
 3180 03bc 81E3      		ldi r24,lo8(49)
 3181 03be 00D0      		rcall USART_Transmit
 3182               	.LVL302:
 3183 03c0 0C5F      		subi r16,-4
 3184 03c2 1F4F      		sbci r17,-1
 382:main.c        **** 				usart_read_chars(); // Address
 3185               		.loc 3 382 0 discriminator 3
 3186 03c4 F0E0      		ldi r31,hi8(flashWriteCycle+12)
 3187 03c6 0030      		cpi r16,lo8(flashWriteCycle+12)
 3188 03c8 1F07      		cpc r17,r31
 3189 03ca 01F4      		brne .L138
 3190 03cc 00C0      		rjmp .L93
 3191               	.LVL303:
 3192               	.L137:
 3193               	.LBE191:
 394:main.c        **** 			usart_read_chars(); // Read address
 3194               		.loc 3 394 0
 3195 03ce 9634      		cpi r25,lo8(70)
 3196 03d0 01F4      		brne .L139
 3197               	.LBB192:
 395:main.c        **** 			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16);
 3198               		.loc 3 395 0
 3199 03d2 00D0      		rcall usart_read_chars
 3200               	.LVL304:
 396:main.c        **** 			
 3201               		.loc 3 396 0
 3202 03d4 40E1      		ldi r20,lo8(16)
 3203 03d6 50E0      		ldi r21,0
 3204 03d8 60E0      		ldi r22,0
 3205 03da 70E0      		ldi r23,0
 3206 03dc 80E0      		ldi r24,lo8(receivedBuffer)
 3207 03de 90E0      		ldi r25,hi8(receivedBuffer)
 3208 03e0 00D0      		rcall strtol
 3209               	.LVL305:
 3210 03e2 4B01      		movw r8,r22
 3211 03e4 5C01      		movw r10,r24
 3212               	.LVL306:
 398:main.c        **** 			uint8_t flashByte = strtol(receivedBuffer, NULL, 16);
 3213               		.loc 3 398 0
 3214 03e6 00D0      		rcall usart_read_chars
 3215               	.LVL307:
 399:main.c        **** 			
 3216               		.loc 3 399 0
 3217 03e8 40E1      		ldi r20,lo8(16)
 3218 03ea 50E0      		ldi r21,0
 3219 03ec 60E0      		ldi r22,0
 3220 03ee 70E0      		ldi r23,0
 3221 03f0 80E0      		ldi r24,lo8(receivedBuffer)
 3222 03f2 90E0      		ldi r25,hi8(receivedBuffer)
 3223 03f4 00D0      		rcall strtol
 3224               	.LVL308:
 401:main.c        **** 			gb_flash_write_bus_cycle(flashAddress, flashByte);
 3225               		.loc 3 401 0
 3226 03f6 939A      		sbi 0x12,3
 402:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 3227               		.loc 3 402 0
 3228 03f8 C401      		movw r24,r8
 3229 03fa 00D0      		rcall gb_flash_write_bus_cycle
 3230               	.LVL309:
 3231 03fc 00C0      		rjmp .L255
 3232               	.LVL310:
 3233               	.L139:
 3234               	.LBE192:
 409:main.c        **** 			usart_read_bytes(64);
 3235               		.loc 3 409 0
 3236 03fe 9435      		cpi r25,lo8(84)
 3237 0400 01F4      		brne .L140
 410:main.c        **** 			
 3238               		.loc 3 410 0
 3239 0402 80E4      		ldi r24,lo8(64)
 3240 0404 90E0      		ldi r25,0
 3241               	.LVL311:
 3242 0406 00D0      		rcall usart_read_bytes
 3243               	.LVL312:
 412:main.c        **** 			for (uint8_t x = 0; x < 64; x++) {
 3244               		.loc 3 412 0
 3245 0408 939A      		sbi 0x12,3
 3246               	.LVL313:
 3247 040a F0E0      		ldi r31,lo8(receivedBuffer)
 3248 040c AF2E      		mov r10,r31
 3249 040e F0E0      		ldi r31,hi8(receivedBuffer)
 3250 0410 BF2E      		mov r11,r31
 3251 0412 A0E4      		ldi r26,lo8(64)
 3252 0414 9A2E      		mov r9,r26
 3253 0416 8601      		movw r16,r12
 3254 0418 0050      		subi r16,lo8(receivedBuffer)
 3255 041a 1040      		sbci r17,hi8(receivedBuffer)
 3256               	.LVL314:
 3257               	.L143:
 3258               	.LBB193:
 414:main.c        **** 					gb_flash_write_byte(address, receivedBuffer[x]);
 3259               		.loc 3 414 0
 3260 041c 8091 0000 		lds r24,flashBank1CommandWrites
 415:main.c        **** 				}
 3261               		.loc 3 415 0
 3262 0420 F501      		movw r30,r10
 3263 0422 6081      		ld r22,Z
 414:main.c        **** 					gb_flash_write_byte(address, receivedBuffer[x]);
 3264               		.loc 3 414 0
 3265 0424 8111      		cpse r24,__zero_reg__
 3266 0426 00C0      		rjmp .L141
 415:main.c        **** 				}
 3267               		.loc 3 415 0
 3268 0428 C801      		movw r24,r16
 3269 042a 8A0D      		add r24,r10
 3270 042c 9B1D      		adc r25,r11
 3271 042e 00D0      		rcall gb_flash_write_byte
 3272               	.LVL315:
 3273 0430 00C0      		rjmp .L142
 3274               	.L141:
 418:main.c        **** 				}
 3275               		.loc 3 418 0
 3276 0432 C801      		movw r24,r16
 3277 0434 8A0D      		add r24,r10
 3278 0436 9B1D      		adc r25,r11
 3279 0438 00D0      		rcall gb_flash_write_byte_bank1_commands
 3280               	.LVL316:
 3281               	.L142:
 3282 043a 9A94      		dec r9
 3283 043c FFEF      		ldi r31,-1
 3284 043e AF1A      		sub r10,r31
 3285 0440 BF0A      		sbc r11,r31
 3286               	.LVL317:
 413:main.c        **** 				if (flashBank1CommandWrites == 0) {
 3287               		.loc 3 413 0 discriminator 2
 3288 0442 9110      		cpse r9,__zero_reg__
 3289 0444 00C0      		rjmp .L143
 3290 0446 20E4      		ldi r18,64
 3291 0448 C20E      		add r12,r18
 3292 044a D11C      		adc r13,__zero_reg__
 3293 044c E11C      		adc r14,__zero_reg__
 3294 044e F11C      		adc r15,__zero_reg__
 3295 0450 00C0      		rjmp .L244
 3296               	.LVL318:
 3297               	.L140:
 3298               	.LBE193:
 428:main.c        **** 			usart_read_bytes(32);
 3299               		.loc 3 428 0
 3300 0452 9935      		cpi r25,lo8(89)
 3301 0454 01F0      		breq .+2
 3302 0456 00C0      		rjmp .L144
 3303               	.LBB194:
 429:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 3304               		.loc 3 429 0
 3305 0458 80E2      		ldi r24,lo8(32)
 3306 045a 90E0      		ldi r25,0
 3307               	.LVL319:
 3308 045c 00D0      		rcall usart_read_bytes
 3309               	.LVL320:
 430:main.c        **** 			
 3310               		.loc 3 430 0
 3311 045e 939A      		sbi 0x12,3
 433:main.c        **** 			gb_flash_write_bus_cycle(0x555, 0x55);
 3312               		.loc 3 433 0
 3313 0460 6AEA      		ldi r22,lo8(-86)
 3314 0462 8AEA      		ldi r24,lo8(-86)
 3315 0464 9AE0      		ldi r25,lo8(10)
 3316 0466 00D0      		rcall gb_flash_write_bus_cycle
 3317               	.LVL321:
 434:main.c        **** 			gb_flash_write_bus_cycle(address, 0x25);
 3318               		.loc 3 434 0
 3319 0468 65E5      		ldi r22,lo8(85)
 3320 046a 85E5      		ldi r24,lo8(85)
 3321 046c 95E0      		ldi r25,lo8(5)
 3322 046e 00D0      		rcall gb_flash_write_bus_cycle
 3323               	.LVL322:
 435:main.c        **** 			gb_flash_write_bus_cycle(address, 0x1F); // Length
 3324               		.loc 3 435 0
 3325 0470 5601      		movw r10,r12
 3326 0472 65E2      		ldi r22,lo8(37)
 3327 0474 C601      		movw r24,r12
 3328 0476 00D0      		rcall gb_flash_write_bus_cycle
 3329               	.LVL323:
 436:main.c        **** 			_delay_us(1);
 3330               		.loc 3 436 0
 3331 0478 6FE1      		ldi r22,lo8(31)
 3332 047a C601      		movw r24,r12
 3333 047c 00D0      		rcall gb_flash_write_bus_cycle
 3334               	.LVL324:
 3335               	.LBB195:
 3336               	.LBB196:
 3337               		.loc 2 276 0
 3338 047e 82E0      		ldi r24,lo8(2)
 3339 0480 8A95      	1:	dec r24
 3340 0482 01F4      		brne 1b
 3341 0484 00C0      		rjmp .
 3342               	.LVL325:
 3343 0486 00E0      		ldi r16,lo8(receivedBuffer)
 3344 0488 10E0      		ldi r17,hi8(receivedBuffer)
 3345 048a 812C      		mov r8,__zero_reg__
 3346 048c 912C      		mov r9,__zero_reg__
 3347               	.LVL326:
 3348               	.L145:
 3349               	.LBE196:
 3350               	.LBE195:
 3351               	.LBB197:
 441:main.c        **** 				address++;
 3352               		.loc 3 441 0 discriminator 3
 3353 048e F801      		movw r30,r16
 3354 0490 6191      		ld r22,Z+
 3355 0492 8F01      		movw r16,r30
 3356 0494 C401      		movw r24,r8
 3357 0496 8A0D      		add r24,r10
 3358 0498 9B1D      		adc r25,r11
 3359 049a 00D0      		rcall gb_flash_write_bus_cycle
 3360               	.LVL327:
 3361 049c FFEF      		ldi r31,-1
 3362 049e 8F1A      		sub r8,r31
 3363 04a0 9F0A      		sbc r9,r31
 3364               	.LVL328:
 440:main.c        **** 				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 3365               		.loc 3 440 0 discriminator 3
 3366 04a2 20E2      		ldi r18,32
 3367 04a4 8216      		cp r8,r18
 3368 04a6 9104      		cpc r9,__zero_reg__
 3369 04a8 01F4      		brne .L145
 3370 04aa 80E2      		ldi r24,32
 3371 04ac C80E      		add r12,r24
 3372 04ae D11C      		adc r13,__zero_reg__
 3373 04b0 E11C      		adc r14,__zero_reg__
 3374 04b2 F11C      		adc r15,__zero_reg__
 3375               	.LBE197:
 446:main.c        **** 			_delay_us(200);
 3376               		.loc 3 446 0
 3377 04b4 C601      		movw r24,r12
 3378 04b6 8097      		sbiw r24,32
 3379 04b8 69E2      		ldi r22,lo8(41)
 3380 04ba 00D0      		rcall gb_flash_write_bus_cycle
 3381               	.LVL329:
 3382               	.LBB198:
 3383               	.LBB199:
 3384               		.loc 2 276 0
 3385 04bc EFE8      		ldi r30,lo8(399)
 3386 04be F1E0      		ldi r31,hi8(399)
 3387 04c0 3197      	1:	sbiw r30,1
 3388 04c2 01F4      		brne 1b
 3389 04c4 00C0      		rjmp .
 3390 04c6 0000      		nop
 3391               	.LVL330:
 3392               	.LBE199:
 3393               	.LBE198:
 450:main.c        **** 			uint8_t verifyCount = 0;
 3394               		.loc 3 450 0
 3395 04c8 8601      		movw r16,r12
 3396 04ca 0150      		subi r16,1
 3397 04cc 1109      		sbc r17,__zero_reg__
 3398 04ce C801      		movw r24,r16
 3399 04d0 00D0      		rcall gb_flash_read_byte
 3400               	.LVL331:
 452:main.c        **** 				dataVerify = gb_flash_read_byte(address-1);
 3401               		.loc 3 452 0
 3402 04d2 E8EC      		ldi r30,lo8(-56)
 3403 04d4 BE2E      		mov r11,r30
 3404               	.LVL332:
 3405               	.L146:
 3406 04d6 9091 0000 		lds r25,receivedBuffer+31
 3407 04da 8917      		cp r24,r25
 3408 04dc 01F4      		brne .+2
 3409 04de 00C0      		rjmp .L244
 453:main.c        **** 				_delay_us(5);
 3410               		.loc 3 453 0
 3411 04e0 C801      		movw r24,r16
 3412               	.LVL333:
 3413 04e2 00D0      		rcall gb_flash_read_byte
 3414               	.LVL334:
 3415               	.LBB200:
 3416               	.LBB201:
 3417               		.loc 2 276 0
 3418 04e4 FDE0      		ldi r31,lo8(13)
 3419 04e6 FA95      	1:	dec r31
 3420 04e8 01F4      		brne 1b
 3421 04ea 0000      		nop
 3422               	.LVL335:
 3423 04ec BA94      		dec r11
 3424               	.LVL336:
 3425               	.LBE201:
 3426               	.LBE200:
 457:main.c        **** 					_delay_ms(500);
 3427               		.loc 3 457 0
 3428 04ee B110      		cpse r11,__zero_reg__
 3429 04f0 00C0      		rjmp .L146
 3430               	.LVL337:
 3431               	.LBB202:
 3432               	.LBB203:
 187:c:\winavr-20100110\avr\include\util\delay.h **** 
 3433               		.loc 2 187 0
 3434 04f2 2FEF      		ldi r18,lo8(799999)
 3435 04f4 84E3      		ldi r24,hi8(799999)
 3436 04f6 9CE0      		ldi r25,hlo8(799999)
 3437 04f8 2150      	1:	subi r18,1
 3438 04fa 8040      		sbci r24,0
 3439 04fc 9040      		sbci r25,0
 3440 04fe 01F4      		brne 1b
 3441               	.LVL338:
 3442 0500 00C0      		rjmp .L256
 3443               	.LVL339:
 3444               	.L144:
 3445               	.LBE203:
 3446               	.LBE202:
 3447               	.LBE194:
 468:main.c        **** 			usart_read_bytes(256);
 3448               		.loc 3 468 0
 3449 0502 9835      		cpi r25,lo8(88)
 3450 0504 01F0      		breq .+2
 3451 0506 00C0      		rjmp .L149
 3452               	.LBB204:
 469:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 3453               		.loc 3 469 0
 3454 0508 80E0      		ldi r24,0
 3455 050a 91E0      		ldi r25,lo8(1)
 3456               	.LVL340:
 3457 050c 00D0      		rcall usart_read_bytes
 3458               	.LVL341:
 470:main.c        **** 			
 3459               		.loc 3 470 0
 3460 050e 939A      		sbi 0x12,3
 473:main.c        **** 			gb_flash_write_bus_cycle(0x555, 0x56);
 3461               		.loc 3 473 0
 3462 0510 69EA      		ldi r22,lo8(-87)
 3463 0512 8AEA      		ldi r24,lo8(-86)
 3464 0514 9AE0      		ldi r25,lo8(10)
 3465 0516 00D0      		rcall gb_flash_write_bus_cycle
 3466               	.LVL342:
 474:main.c        **** 			gb_flash_write_bus_cycle(address, 0x26);
 3467               		.loc 3 474 0
 3468 0518 66E5      		ldi r22,lo8(86)
 3469 051a 85E5      		ldi r24,lo8(85)
 3470 051c 95E0      		ldi r25,lo8(5)
 3471 051e 00D0      		rcall gb_flash_write_bus_cycle
 3472               	.LVL343:
 475:main.c        **** 			gb_flash_write_bus_cycle(address, 0xFF); // Length
 3473               		.loc 3 475 0
 3474 0520 5601      		movw r10,r12
 3475 0522 66E2      		ldi r22,lo8(38)
 3476 0524 C601      		movw r24,r12
 3477 0526 00D0      		rcall gb_flash_write_bus_cycle
 3478               	.LVL344:
 476:main.c        **** 			_delay_us(50);
 3479               		.loc 3 476 0
 3480 0528 6FEF      		ldi r22,lo8(-1)
 3481 052a C601      		movw r24,r12
 3482 052c 00D0      		rcall gb_flash_write_bus_cycle
 3483               	.LVL345:
 3484               	.LBB205:
 3485               	.LBB206:
 3486               		.loc 2 276 0
 3487 052e E5E8      		ldi r30,lo8(-123)
 3488 0530 EA95      	1:	dec r30
 3489 0532 01F4      		brne 1b
 3490 0534 0000      		nop
 3491               	.LVL346:
 3492 0536 00E0      		ldi r16,lo8(receivedBuffer)
 3493 0538 10E0      		ldi r17,hi8(receivedBuffer)
 3494               	.LBE206:
 3495               	.LBE205:
 3496               	.LBB207:
 480:main.c        **** 				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 3497               		.loc 3 480 0
 3498 053a 812C      		mov r8,__zero_reg__
 3499 053c 912C      		mov r9,__zero_reg__
 3500               	.LVL347:
 3501               	.L150:
 481:main.c        **** 				address++;
 3502               		.loc 3 481 0 discriminator 3
 3503 053e F801      		movw r30,r16
 3504 0540 6191      		ld r22,Z+
 3505 0542 8F01      		movw r16,r30
 3506 0544 C401      		movw r24,r8
 3507 0546 8A0D      		add r24,r10
 3508 0548 9B1D      		adc r25,r11
 3509 054a 00D0      		rcall gb_flash_write_bus_cycle
 3510               	.LVL348:
 480:main.c        **** 				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 3511               		.loc 3 480 0 discriminator 3
 3512 054c FFEF      		ldi r31,-1
 3513 054e 8F1A      		sub r8,r31
 3514 0550 9F0A      		sbc r9,r31
 3515               	.LVL349:
 3516 0552 8114      		cp r8,__zero_reg__
 3517 0554 21E0      		ldi r18,1
 3518 0556 9206      		cpc r9,r18
 3519 0558 01F4      		brne .L150
 3520 055a 8FEF      		ldi r24,-1
 3521 055c D81A      		sub r13,r24
 3522 055e E80A      		sbc r14,r24
 3523 0560 F80A      		sbc r15,r24
 3524               	.LBE207:
 486:main.c        **** 			
 3525               		.loc 3 486 0
 3526 0562 C601      		movw r24,r12
 3527 0564 9A95      		dec r25
 3528 0566 6AE2      		ldi r22,lo8(42)
 3529 0568 00D0      		rcall gb_flash_write_bus_cycle
 3530               	.LVL350:
 489:main.c        **** 			while (dataVerify != receivedBuffer[255]) {
 3531               		.loc 3 489 0
 3532 056a 8601      		movw r16,r12
 3533 056c 0150      		subi r16,1
 3534 056e 1109      		sbc r17,__zero_reg__
 3535 0570 C801      		movw r24,r16
 3536 0572 00D0      		rcall gb_flash_read_byte
 3537               	.LVL351:
 3538               	.L151:
 490:main.c        **** 				dataVerify = gb_flash_read_byte(address-1);
 3539               		.loc 3 490 0
 3540 0574 9091 0000 		lds r25,receivedBuffer+255
 3541 0578 8917      		cp r24,r25
 3542 057a 01F4      		brne .+2
 3543 057c 00C0      		rjmp .L244
 491:main.c        **** 				_delay_us(5);
 3544               		.loc 3 491 0
 3545 057e C801      		movw r24,r16
 3546               	.LVL352:
 3547 0580 00D0      		rcall gb_flash_read_byte
 3548               	.LVL353:
 3549               	.LBB208:
 3550               	.LBB209:
 3551               		.loc 2 276 0
 3552 0582 9DE0      		ldi r25,lo8(13)
 3553 0584 9A95      	1:	dec r25
 3554 0586 01F4      		brne 1b
 3555 0588 0000      		nop
 3556 058a 00C0      		rjmp .L151
 3557               	.LVL354:
 3558               	.L149:
 3559               	.LBE209:
 3560               	.LBE208:
 3561               	.LBE204:
 500:main.c        **** 			usart_read_bytes(128);
 3562               		.loc 3 500 0
 3563 058c 9A35      		cpi r25,lo8(90)
 3564 058e 01F0      		breq .+2
 3565 0590 00C0      		rjmp .L153
 501:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 3566               		.loc 3 501 0
 3567 0592 80E8      		ldi r24,lo8(-128)
 3568 0594 90E0      		ldi r25,0
 3569               	.LVL355:
 3570 0596 00D0      		rcall usart_read_bytes
 3571               	.LVL356:
 502:main.c        **** 			
 3572               		.loc 3 502 0
 3573 0598 939A      		sbi 0x12,3
 505:main.c        **** 			gb_flash_write_bus_cycle(0x121, 0xaa);
 3574               		.loc 3 505 0
 3575 059a 69E0      		ldi r22,lo8(9)
 3576 059c 80E2      		ldi r24,lo8(32)
 3577 059e 91E0      		ldi r25,lo8(1)
 3578 05a0 00D0      		rcall gb_flash_write_bus_cycle
 3579               	.LVL357:
 506:main.c        **** 			gb_flash_write_bus_cycle(0x122, 0x55);
 3580               		.loc 3 506 0
 3581 05a2 6AEA      		ldi r22,lo8(-86)
 3582 05a4 81E2      		ldi r24,lo8(33)
 3583 05a6 91E0      		ldi r25,lo8(1)
 3584 05a8 00D0      		rcall gb_flash_write_bus_cycle
 3585               	.LVL358:
 507:main.c        **** 			gb_flash_write_bus_cycle(0x13f, 0xa5);
 3586               		.loc 3 507 0
 3587 05aa 65E5      		ldi r22,lo8(85)
 3588 05ac 82E2      		ldi r24,lo8(34)
 3589 05ae 91E0      		ldi r25,lo8(1)
 3590 05b0 00D0      		rcall gb_flash_write_bus_cycle
 3591               	.LVL359:
 508:main.c        **** 			_delay_us(5);
 3592               		.loc 3 508 0
 3593 05b2 65EA      		ldi r22,lo8(-91)
 3594 05b4 8FE3      		ldi r24,lo8(63)
 3595 05b6 91E0      		ldi r25,lo8(1)
 3596 05b8 00D0      		rcall gb_flash_write_bus_cycle
 3597               	.LVL360:
 3598               	.LBB210:
 3599               	.LBB211:
 3600               		.loc 2 276 0
 3601 05ba EDE0      		ldi r30,lo8(13)
 3602 05bc EA95      	1:	dec r30
 3603 05be 01F4      		brne 1b
 3604 05c0 0000      		nop
 3605               	.LVL361:
 3606               	.LBE211:
 3607               	.LBE210:
 512:main.c        **** 			gb_flash_write_bus_cycle(0x13f, 0xa5);
 3608               		.loc 3 512 0
 3609 05c2 61E1      		ldi r22,lo8(17)
 3610 05c4 80E2      		ldi r24,lo8(32)
 3611 05c6 91E0      		ldi r25,lo8(1)
 3612 05c8 00D0      		rcall gb_flash_write_bus_cycle
 3613               	.LVL362:
 513:main.c        **** 			_delay_us(5);
 3614               		.loc 3 513 0
 3615 05ca 65EA      		ldi r22,lo8(-91)
 3616 05cc 8FE3      		ldi r24,lo8(63)
 3617 05ce 91E0      		ldi r25,lo8(1)
 3618 05d0 00D0      		rcall gb_flash_write_bus_cycle
 3619               	.LVL363:
 3620               	.LBB212:
 3621               	.LBB213:
 3622               		.loc 2 276 0
 3623 05d2 FDE0      		ldi r31,lo8(13)
 3624 05d4 FA95      	1:	dec r31
 3625 05d6 01F4      		brne 1b
 3626 05d8 0000      		nop
 3627               	.LVL364:
 3628               	.LBE213:
 3629               	.LBE212:
 517:main.c        **** 			_delay_us(5);
 3630               		.loc 3 517 0
 3631 05da 61E0      		ldi r22,lo8(1)
 3632 05dc 80E0      		ldi r24,0
 3633 05de 91E2      		ldi r25,lo8(33)
 3634 05e0 00D0      		rcall gb_flash_write_bus_cycle
 3635               	.LVL365:
 3636               	.LBB214:
 3637               	.LBB215:
 3638               		.loc 2 276 0
 3639 05e2 2DE0      		ldi r18,lo8(13)
 3640 05e4 2A95      	1:	dec r18
 3641 05e6 01F4      		brne 1b
 3642 05e8 0000      		nop
 3643               	.LVL366:
 3644               	.LBE215:
 3645               	.LBE214:
 522:main.c        **** 			gb_flash_write_bus_cycle(0x125, 0x55);
 3646               		.loc 3 522 0
 3647 05ea 6FE0      		ldi r22,lo8(15)
 3648 05ec 80E2      		ldi r24,lo8(32)
 3649 05ee 91E0      		ldi r25,lo8(1)
 3650 05f0 00D0      		rcall gb_flash_write_bus_cycle
 3651               	.LVL367:
 523:main.c        **** 			gb_flash_write_bus_cycle(0x126, 0x55);
 3652               		.loc 3 523 0
 3653 05f2 65E5      		ldi r22,lo8(85)
 3654 05f4 85E2      		ldi r24,lo8(37)
 3655 05f6 91E0      		ldi r25,lo8(1)
 3656 05f8 00D0      		rcall gb_flash_write_bus_cycle
 3657               	.LVL368:
 524:main.c        **** 			gb_flash_write_bus_cycle(0x127, 0xAA);
 3658               		.loc 3 524 0
 3659 05fa 65E5      		ldi r22,lo8(85)
 3660 05fc 86E2      		ldi r24,lo8(38)
 3661 05fe 91E0      		ldi r25,lo8(1)
 3662 0600 00D0      		rcall gb_flash_write_bus_cycle
 3663               	.LVL369:
 525:main.c        **** 			gb_flash_write_bus_cycle(0x13f, 0xA5);
 3664               		.loc 3 525 0
 3665 0602 6AEA      		ldi r22,lo8(-86)
 3666 0604 87E2      		ldi r24,lo8(39)
 3667 0606 91E0      		ldi r25,lo8(1)
 3668 0608 00D0      		rcall gb_flash_write_bus_cycle
 3669               	.LVL370:
 526:main.c        **** 			_delay_us(5);
 3670               		.loc 3 526 0
 3671 060a 65EA      		ldi r22,lo8(-91)
 3672 060c 8FE3      		ldi r24,lo8(63)
 3673 060e 91E0      		ldi r25,lo8(1)
 3674 0610 00D0      		rcall gb_flash_write_bus_cycle
 3675               	.LVL371:
 3676               	.LBB216:
 3677               	.LBB217:
 3678               		.loc 2 276 0
 3679 0612 8DE0      		ldi r24,lo8(13)
 3680 0614 8A95      	1:	dec r24
 3681 0616 01F4      		brne 1b
 3682 0618 0000      		nop
 3683               	.LVL372:
 3684               	.LBE217:
 3685               	.LBE216:
 529:main.c        **** 			gb_flash_write_bus_cycle(0x125, 0x2A);
 3686               		.loc 3 529 0
 3687 061a 6FE0      		ldi r22,lo8(15)
 3688 061c 80E2      		ldi r24,lo8(32)
 3689 061e 91E0      		ldi r25,lo8(1)
 3690 0620 00D0      		rcall gb_flash_write_bus_cycle
 3691               	.LVL373:
 530:main.c        **** 			gb_flash_write_bus_cycle(0x126, 0xAA);
 3692               		.loc 3 530 0
 3693 0622 6AE2      		ldi r22,lo8(42)
 3694 0624 85E2      		ldi r24,lo8(37)
 3695 0626 91E0      		ldi r25,lo8(1)
 3696 0628 00D0      		rcall gb_flash_write_bus_cycle
 3697               	.LVL374:
 531:main.c        **** 			gb_flash_write_bus_cycle(0x127, 0x55);
 3698               		.loc 3 531 0
 3699 062a 6AEA      		ldi r22,lo8(-86)
 3700 062c 86E2      		ldi r24,lo8(38)
 3701 062e 91E0      		ldi r25,lo8(1)
 3702 0630 00D0      		rcall gb_flash_write_bus_cycle
 3703               	.LVL375:
 532:main.c        **** 			gb_flash_write_bus_cycle(0x13f, 0xA5);
 3704               		.loc 3 532 0
 3705 0632 65E5      		ldi r22,lo8(85)
 3706 0634 87E2      		ldi r24,lo8(39)
 3707 0636 91E0      		ldi r25,lo8(1)
 3708 0638 00D0      		rcall gb_flash_write_bus_cycle
 3709               	.LVL376:
 533:main.c        **** 			_delay_us(5);
 3710               		.loc 3 533 0
 3711 063a 65EA      		ldi r22,lo8(-91)
 3712 063c 8FE3      		ldi r24,lo8(63)
 3713 063e 91E0      		ldi r25,lo8(1)
 3714 0640 00D0      		rcall gb_flash_write_bus_cycle
 3715               	.LVL377:
 3716               	.LBB218:
 3717               	.LBB219:
 3718               		.loc 2 276 0
 3719 0642 9DE0      		ldi r25,lo8(13)
 3720 0644 9A95      	1:	dec r25
 3721 0646 01F4      		brne 1b
 3722 0648 0000      		nop
 3723               	.LVL378:
 3724               	.LBE219:
 3725               	.LBE218:
 536:main.c        **** 			gb_flash_write_bus_cycle(0x125, 0x55);
 3726               		.loc 3 536 0
 3727 064a 6FE0      		ldi r22,lo8(15)
 3728 064c 80E2      		ldi r24,lo8(32)
 3729 064e 91E0      		ldi r25,lo8(1)
 3730 0650 00D0      		rcall gb_flash_write_bus_cycle
 3731               	.LVL379:
 537:main.c        **** 			gb_flash_write_bus_cycle(0x126, 0x55);
 3732               		.loc 3 537 0
 3733 0652 65E5      		ldi r22,lo8(85)
 3734 0654 85E2      		ldi r24,lo8(37)
 3735 0656 91E0      		ldi r25,lo8(1)
 3736 0658 00D0      		rcall gb_flash_write_bus_cycle
 3737               	.LVL380:
 538:main.c        **** 			gb_flash_write_bus_cycle(0x127, 0xA0);
 3738               		.loc 3 538 0
 3739 065a 65E5      		ldi r22,lo8(85)
 3740 065c 86E2      		ldi r24,lo8(38)
 3741 065e 91E0      		ldi r25,lo8(1)
 3742 0660 00D0      		rcall gb_flash_write_bus_cycle
 3743               	.LVL381:
 539:main.c        **** 			gb_flash_write_bus_cycle(0x13f, 0xA5);
 3744               		.loc 3 539 0
 3745 0662 60EA      		ldi r22,lo8(-96)
 3746 0664 87E2      		ldi r24,lo8(39)
 3747 0666 91E0      		ldi r25,lo8(1)
 3748 0668 00D0      		rcall gb_flash_write_bus_cycle
 3749               	.LVL382:
 540:main.c        **** 			_delay_us(5);
 3750               		.loc 3 540 0
 3751 066a 65EA      		ldi r22,lo8(-91)
 3752 066c 8FE3      		ldi r24,lo8(63)
 3753 066e 91E0      		ldi r25,lo8(1)
 3754 0670 00D0      		rcall gb_flash_write_bus_cycle
 3755               	.LVL383:
 3756               	.LBB220:
 3757               	.LBB221:
 3758               		.loc 2 276 0
 3759 0672 EDE0      		ldi r30,lo8(13)
 3760 0674 EA95      	1:	dec r30
 3761 0676 01F4      		brne 1b
 3762 0678 0000      		nop
 3763               	.LVL384:
 3764               	.LBE221:
 3765               	.LBE220:
 544:main.c        **** 			_delay_us(5);
 3766               		.loc 3 544 0
 3767 067a 40E0      		ldi r20,0
 3768 067c 6091 0000 		lds r22,lastBankAccessed
 3769 0680 80E0      		ldi r24,0
 3770 0682 91E2      		ldi r25,lo8(33)
 3771 0684 00D0      		rcall write_8bit_data
 3772               	.LVL385:
 3773               	.LBB222:
 3774               	.LBB223:
 3775               		.loc 2 276 0
 3776 0686 FDE0      		ldi r31,lo8(13)
 3777 0688 FA95      	1:	dec r31
 3778 068a 01F4      		brne 1b
 3779 068c 0000      		nop
 3780               	.LVL386:
 3781               	.LBE223:
 3782               	.LBE222:
 548:main.c        **** 			gb_flash_write_bus_cycle(0x13f, 0xa5);
 3783               		.loc 3 548 0
 3784 068e 60E1      		ldi r22,lo8(16)
 3785 0690 80E2      		ldi r24,lo8(32)
 3786 0692 91E0      		ldi r25,lo8(1)
 3787 0694 00D0      		rcall gb_flash_write_bus_cycle
 3788               	.LVL387:
 549:main.c        **** 			_delay_us(5);
 3789               		.loc 3 549 0
 3790 0696 65EA      		ldi r22,lo8(-91)
 3791 0698 8FE3      		ldi r24,lo8(63)
 3792 069a 91E0      		ldi r25,lo8(1)
 3793 069c 00D0      		rcall gb_flash_write_bus_cycle
 3794               	.LVL388:
 3795               	.LBB224:
 3796               	.LBB225:
 3797               		.loc 2 276 0
 3798 069e 2DE0      		ldi r18,lo8(13)
 3799 06a0 2A95      	1:	dec r18
 3800 06a2 01F4      		brne 1b
 3801 06a4 0000      		nop
 3802               	.LVL389:
 3803               	.LBE225:
 3804               	.LBE224:
 553:main.c        **** 			gb_flash_write_bus_cycle(0x13f, 0xa5);
 3805               		.loc 3 553 0
 3806 06a6 68E0      		ldi r22,lo8(8)
 3807 06a8 80E2      		ldi r24,lo8(32)
 3808 06aa 91E0      		ldi r25,lo8(1)
 3809 06ac 00D0      		rcall gb_flash_write_bus_cycle
 3810               	.LVL390:
 554:main.c        **** 			_delay_us(5);
 3811               		.loc 3 554 0
 3812 06ae 65EA      		ldi r22,lo8(-91)
 3813 06b0 8FE3      		ldi r24,lo8(63)
 3814 06b2 91E0      		ldi r25,lo8(1)
 3815 06b4 00D0      		rcall gb_flash_write_bus_cycle
 3816               	.LVL391:
 3817               	.LBB226:
 3818               	.LBB227:
 3819               		.loc 2 276 0
 3820 06b6 8DE0      		ldi r24,lo8(13)
 3821 06b8 8A95      	1:	dec r24
 3822 06ba 01F4      		brne 1b
 3823 06bc 0000      		nop
 3824               	.LVL392:
 3825 06be 00E0      		ldi r16,lo8(receivedBuffer)
 3826 06c0 10E0      		ldi r17,hi8(receivedBuffer)
 3827               	.L154:
 3828               	.LBE227:
 3829               	.LBE226:
 3830               	.LBB228:
 559:main.c        **** 				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
 3831               		.loc 3 559 0 discriminator 1
 3832 06c2 80E0      		ldi r24,hi8(receivedBuffer+128)
 3833 06c4 0030      		cpi r16,lo8(receivedBuffer+128)
 3834 06c6 1807      		cpc r17,r24
 3835 06c8 01F0      		breq .L257
 560:main.c        **** 				_delay_us(5);
 3836               		.loc 3 560 0 discriminator 3
 3837 06ca F801      		movw r30,r16
 3838 06cc 6191      		ld r22,Z+
 3839 06ce 8F01      		movw r16,r30
 3840 06d0 C601      		movw r24,r12
 3841 06d2 00D0      		rcall gb_flash_write_bus_cycle
 3842               	.LVL393:
 3843               	.LBB229:
 3844               	.LBB230:
 3845               		.loc 2 276 0 discriminator 3
 3846 06d4 FDE0      		ldi r31,lo8(13)
 3847 06d6 FA95      	1:	dec r31
 3848 06d8 01F4      		brne 1b
 3849 06da 0000      		nop
 3850               	.LVL394:
 3851               	.LBE230:
 3852               	.LBE229:
 562:main.c        **** 			}
 3853               		.loc 3 562 0 discriminator 3
 3854 06dc 2FEF      		ldi r18,-1
 3855 06de C21A      		sub r12,r18
 3856 06e0 D20A      		sbc r13,r18
 3857 06e2 E20A      		sbc r14,r18
 3858 06e4 F20A      		sbc r15,r18
 3859               	.LVL395:
 3860 06e6 00C0      		rjmp .L154
 3861               	.L257:
 3862               	.LVL396:
 3863               	.LBE228:
 567:main.c        **** 			address++;
 3864               		.loc 3 567 0
 3865 06e8 6FEF      		ldi r22,lo8(-1)
 3866 06ea D701      		movw r26,r14
 3867 06ec C601      		movw r24,r12
 3868 06ee 0197      		sbiw r24,1
 3869 06f0 A109      		sbc r26,__zero_reg__
 3870 06f2 B109      		sbc r27,__zero_reg__
 3871               	.LVL397:
 3872 06f4 00D0      		rcall gb_flash_write_bus_cycle
 3873               	.LVL398:
 3874               	.LBB231:
 3875               	.LBB232:
 187:c:\winavr-20100110\avr\include\util\delay.h **** 
 3876               		.loc 2 187 0
 3877 06f6 EFE1      		ldi r30,lo8(19999)
 3878 06f8 FEE4      		ldi r31,hi8(19999)
 3879 06fa 3197      	1:	sbiw r30,1
 3880 06fc 01F4      		brne 1b
 3881               	.LVL399:
 3882               	.L256:
 3883 06fe 00C0      		rjmp .
 3884 0700 0000      		nop
 3885 0702 00C0      		rjmp .L244
 3886               	.LVL400:
 3887               	.L153:
 3888               	.LBE232:
 3889               	.LBE231:
 577:main.c        **** 			usart_read_chars(); // Read address
 3890               		.loc 3 577 0
 3891 0704 9E36      		cpi r25,lo8(110)
 3892 0706 01F4      		brne .L156
 3893               	.LBB233:
 578:main.c        **** 			uint32_t flashAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to de
 3894               		.loc 3 578 0
 3895 0708 00D0      		rcall usart_read_chars
 3896               	.LVL401:
 579:main.c        **** 			
 3897               		.loc 3 579 0
 3898 070a 40E1      		ldi r20,lo8(16)
 3899 070c 50E0      		ldi r21,0
 3900 070e 60E0      		ldi r22,0
 3901 0710 70E0      		ldi r23,0
 3902 0712 80E0      		ldi r24,lo8(receivedBuffer)
 3903 0714 90E0      		ldi r25,hi8(receivedBuffer)
 3904 0716 00D0      		rcall strtol
 3905               	.LVL402:
 3906 0718 4B01      		movw r8,r22
 3907 071a 5C01      		movw r10,r24
 3908               	.LVL403:
 581:main.c        **** 			if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
 3909               		.loc 3 581 0
 3910 071c 00D0      		rcall USART_Receive
 3911               	.LVL404:
 3912 071e 8093 0000 		sts receivedChar,r24
 582:main.c        **** 				usart_read_chars(); // Read data
 3913               		.loc 3 582 0
 3914 0722 8E36      		cpi r24,lo8(110)
 3915 0724 01F0      		breq .+2
 3916 0726 00C0      		rjmp .L93
 3917               	.LBB234:
 583:main.c        **** 				uint16_t flashByte = strtol(receivedBuffer, NULL, 16); // Convert data byte in hex to dec
 3918               		.loc 3 583 0
 3919 0728 00D0      		rcall usart_read_chars
 3920               	.LVL405:
 584:main.c        **** 				
 3921               		.loc 3 584 0
 3922 072a 40E1      		ldi r20,lo8(16)
 3923 072c 50E0      		ldi r21,0
 3924 072e 60E0      		ldi r22,0
 3925 0730 70E0      		ldi r23,0
 3926 0732 80E0      		ldi r24,lo8(receivedBuffer)
 3927 0734 90E0      		ldi r25,hi8(receivedBuffer)
 3928 0736 00D0      		rcall strtol
 3929               	.LVL406:
 586:main.c        **** 				GBA_DDR_ROM_ADDR23_16 = 0xFF;
 3930               		.loc 3 586 0
 3931 0738 939A      		sbi 0x12,3
 587:main.c        **** 				GBA_DDR_ROM_ADDR15_8 = 0xFF;
 3932               		.loc 3 587 0
 3933 073a C4BB      		out 0x14,r28
 588:main.c        **** 				GBA_DDR_ROM_ADDR7_0 = 0xFF;
 3934               		.loc 3 588 0
 3935 073c CABB      		out 0x1a,r28
 589:main.c        **** 				gba_flash_write_bus_cycle(flashAddress, flashByte);
 3936               		.loc 3 589 0
 3937 073e C7BB      		out 0x17,r28
 590:main.c        **** 				PORTD &= ~(1<<ACTIVITY_LED);
 3938               		.loc 3 590 0
 3939 0740 AB01      		movw r20,r22
 3940 0742 C501      		movw r24,r10
 3941 0744 B401      		movw r22,r8
 3942               	.LVL407:
 3943 0746 00D0      		rcall gba_flash_write_bus_cycle
 3944               	.LVL408:
 3945               	.L255:
 591:main.c        **** 				
 3946               		.loc 3 591 0
 3947 0748 9398      		cbi 0x12,3
 593:main.c        **** 			}
 3948               		.loc 3 593 0
 3949 074a 81E3      		ldi r24,lo8(49)
 3950 074c 00C0      		rjmp .L236
 3951               	.LVL409:
 3952               	.L156:
 3953               	.LBE234:
 3954               	.LBE233:
 598:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 3955               		.loc 3 598 0
 3956 074e 9137      		cpi r25,lo8(113)
 3957 0750 01F0      		breq .L157
 598:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 3958               		.loc 3 598 0 is_stmt 0 discriminator 1
 3959 0752 9437      		cpi r25,lo8(116)
 3960 0754 01F4      		brne .L158
 3961               	.L157:
 3962               	.LBB235:
 599:main.c        **** 			
 3963               		.loc 3 599 0 is_stmt 1
 3964 0756 939A      		sbi 0x12,3
 3965               	.LVL410:
 602:main.c        **** 				readLength = 256;
 3966               		.loc 3 602 0
 3967 0758 8091 0000 		lds r24,receivedChar
 3968               	.LVL411:
 3969 075c 8437      		cpi r24,lo8(116)
 3970 075e 01F4      		brne .L207
 603:main.c        **** 			}
 3971               		.loc 3 603 0
 3972 0760 00E0      		ldi r16,0
 3973 0762 11E0      		ldi r17,lo8(1)
 3974 0764 00C0      		rjmp .L159
 3975               	.L207:
 601:main.c        **** 			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
 3976               		.loc 3 601 0
 3977 0766 00E4      		ldi r16,lo8(64)
 3978 0768 10E0      		ldi r17,0
 3979               	.L159:
 3980               	.LVL412:
 605:main.c        **** 			
 3981               		.loc 3 605 0
 3982 076a C801      		movw r24,r16
 3983 076c 00D0      		rcall usart_read_bytes
 3984               	.LVL413:
 3985 076e 70E0      		ldi r23,lo8(receivedBuffer)
 3986 0770 A72E      		mov r10,r23
 3987 0772 70E0      		ldi r23,hi8(receivedBuffer)
 3988 0774 B72E      		mov r11,r23
 3989 0776 2601      		movw r4,r12
 3990 0778 3701      		movw r6,r14
 3991               	.LVL414:
 3992               	.L160:
 3993               	.LBB236:
 3994               	.LBB237:
 609:main.c        **** 				address++;
 3995               		.loc 3 609 0 discriminator 3
 3996 077a F501      		movw r30,r10
 3997 077c 4181      		ldd r20,Z+1
 3998 077e 50E0      		ldi r21,0
 3999 0780 542F      		mov r21,r20
 4000 0782 4427      		clr r20
 4001 0784 8081      		ld r24,Z
 4002 0786 482B      		or r20,r24
 4003 0788 21E0      		ldi r18,lo8(1)
 4004 078a C301      		movw r24,r6
 4005 078c B201      		movw r22,r4
 4006 078e 00D0      		rcall gba_flash_write_byte
 4007               	.LVL415:
 610:main.c        **** 			}
 4008               		.loc 3 610 0 discriminator 3
 4009 0790 FFEF      		ldi r31,-1
 4010 0792 4F1A      		sub r4,r31
 4011 0794 5F0A      		sbc r5,r31
 4012 0796 6F0A      		sbc r6,r31
 4013 0798 7F0A      		sbc r7,r31
 4014               	.LVL416:
 4015 079a 22E0      		ldi r18,2
 4016 079c A20E      		add r10,r18
 4017 079e B11C      		adc r11,__zero_reg__
 4018               	.LVL417:
 4019               	.LBE237:
 607:main.c        **** 				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
 4020               		.loc 3 607 0 discriminator 3
 4021 07a0 C501      		movw r24,r10
 4022 07a2 8050      		subi r24,lo8(receivedBuffer)
 4023 07a4 9040      		sbci r25,hi8(receivedBuffer)
 4024 07a6 8017      		cp r24,r16
 4025 07a8 9107      		cpc r25,r17
 4026 07aa 04F0      		brlt .L160
 4027 07ac 8FEF      		ldi r24,-1
 4028 07ae C81A      		sub r12,r24
 4029 07b0 D80A      		sbc r13,r24
 4030 07b2 E80A      		sbc r14,r24
 4031 07b4 F80A      		sbc r15,r24
 4032 07b6 0150      		subi r16,1
 4033 07b8 1109      		sbc r17,__zero_reg__
 4034               	.LVL418:
 4035 07ba 1695      		lsr r17
 4036 07bc 0795      		ror r16
 4037               	.LVL419:
 4038 07be C00E      		add r12,r16
 4039 07c0 D11E      		adc r13,r17
 4040 07c2 E11C      		adc r14,__zero_reg__
 4041 07c4 F11C      		adc r15,__zero_reg__
 4042 07c6 00C0      		rjmp .L244
 4043               	.LVL420:
 4044               	.L158:
 4045               	.LBE236:
 4046               	.LBE235:
 618:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 4047               		.loc 3 618 0
 4048 07c8 9636      		cpi r25,lo8(102)
 4049 07ca 01F4      		brne .L161
 4050               	.LBB238:
 619:main.c        **** 			
 4051               		.loc 3 619 0
 4052 07cc 939A      		sbi 0x12,3
 4053               	.LVL421:
 622:main.c        **** 			
 4054               		.loc 3 622 0
 4055 07ce 80E0      		ldi r24,0
 4056 07d0 91E0      		ldi r25,lo8(1)
 4057               	.LVL422:
 4058 07d2 00D0      		rcall usart_read_bytes
 4059               	.LVL423:
 4060 07d4 00E0      		ldi r16,lo8(receivedBuffer)
 4061 07d6 10E0      		ldi r17,hi8(receivedBuffer)
 4062 07d8 4601      		movw r8,r12
 4063 07da 5701      		movw r10,r14
 4064               	.LVL424:
 4065               	.L162:
 4066               	.LBB239:
 4067               	.LBB240:
 626:main.c        **** 				address++;
 4068               		.loc 3 626 0 discriminator 3
 4069 07dc F801      		movw r30,r16
 4070 07de 4181      		ldd r20,Z+1
 4071 07e0 50E0      		ldi r21,0
 4072 07e2 542F      		mov r21,r20
 4073 07e4 4427      		clr r20
 4074 07e6 8081      		ld r24,Z
 4075 07e8 482B      		or r20,r24
 4076 07ea 20E0      		ldi r18,0
 4077 07ec C501      		movw r24,r10
 4078 07ee B401      		movw r22,r8
 4079 07f0 00D0      		rcall gba_flash_write_byte
 4080               	.LVL425:
 627:main.c        **** 			}
 4081               		.loc 3 627 0 discriminator 3
 4082 07f2 FFEF      		ldi r31,-1
 4083 07f4 8F1A      		sub r8,r31
 4084 07f6 9F0A      		sbc r9,r31
 4085 07f8 AF0A      		sbc r10,r31
 4086 07fa BF0A      		sbc r11,r31
 4087               	.LVL426:
 4088 07fc 0E5F      		subi r16,-2
 4089 07fe 1F4F      		sbci r17,-1
 4090               	.LVL427:
 4091               	.LBE240:
 624:main.c        **** 				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
 4092               		.loc 3 624 0 discriminator 3
 4093 0800 20E0      		ldi r18,hi8(receivedBuffer+256)
 4094 0802 0030      		cpi r16,lo8(receivedBuffer+256)
 4095 0804 1207      		cpc r17,r18
 4096 0806 01F4      		brne .L162
 4097 0808 80E8      		ldi r24,-128
 4098 080a C80E      		add r12,r24
 4099 080c D11C      		adc r13,__zero_reg__
 4100 080e E11C      		adc r14,__zero_reg__
 4101 0810 F11C      		adc r15,__zero_reg__
 4102 0812 00C0      		rjmp .L244
 4103               	.LVL428:
 4104               	.L161:
 4105               	.LBE239:
 4106               	.LBE238:
 636:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 4107               		.loc 3 636 0
 4108 0814 9C36      		cpi r25,lo8(108)
 4109 0816 01F0      		breq .+2
 4110 0818 00C0      		rjmp .L163
 4111               	.LBB241:
 637:main.c        **** 			usart_read_bytes(64);
 4112               		.loc 3 637 0
 4113 081a 939A      		sbi 0x12,3
 638:main.c        **** 			
 4114               		.loc 3 638 0
 4115 081c 80E4      		ldi r24,lo8(64)
 4116 081e 90E0      		ldi r25,0
 4117               	.LVL429:
 4118 0820 00D0      		rcall usart_read_bytes
 4119               	.LVL430:
 641:main.c        **** 			GBA_DDR_ROM_ADDR15_8 = 0xFF;
 4120               		.loc 3 641 0
 4121 0822 C4BB      		out 0x14,r28
 642:main.c        **** 			GBA_DDR_ROM_ADDR7_0 = 0xFF;
 4122               		.loc 3 642 0
 4123 0824 CABB      		out 0x1a,r28
 643:main.c        **** 			
 4124               		.loc 3 643 0
 4125 0826 C7BB      		out 0x17,r28
 646:main.c        **** 			gba_flash_write_bus_cycle(address, 0xD0);
 4126               		.loc 3 646 0
 4127 0828 40E6      		ldi r20,lo8(96)
 4128 082a 50E0      		ldi r21,0
 4129 082c C701      		movw r24,r14
 4130 082e B601      		movw r22,r12
 4131 0830 00D0      		rcall gba_flash_write_bus_cycle
 4132               	.LVL431:
 647:main.c        **** 			
 4133               		.loc 3 647 0
 4134 0832 40ED      		ldi r20,lo8(-48)
 4135 0834 50E0      		ldi r21,0
 4136 0836 C701      		movw r24,r14
 4137 0838 B601      		movw r22,r12
 4138 083a 00D0      		rcall gba_flash_write_bus_cycle
 4139               	.LVL432:
 650:main.c        **** 			_delay_us(50);
 4140               		.loc 3 650 0
 4141 083c 48EE      		ldi r20,lo8(-24)
 4142 083e 50E0      		ldi r21,0
 4143 0840 C701      		movw r24,r14
 4144 0842 B601      		movw r22,r12
 4145 0844 00D0      		rcall gba_flash_write_bus_cycle
 4146               	.LVL433:
 4147               	.LBB242:
 4148               	.LBB243:
 4149               		.loc 2 276 0
 4150 0846 95E8      		ldi r25,lo8(-123)
 4151 0848 9A95      	1:	dec r25
 4152 084a 01F4      		brne 1b
 4153 084c 0000      		nop
 4154               	.LVL434:
 4155               	.LBE243:
 4156               	.LBE242:
 654:main.c        **** 			while (dataVerify != 0x0080) {
 4157               		.loc 3 654 0
 4158 084e C701      		movw r24,r14
 4159 0850 B601      		movw r22,r12
 4160 0852 00D0      		rcall gba_read_16bit_data
 4161               	.LVL435:
 4162               	.L164:
 655:main.c        **** 				dataVerify = gba_read_16bit_data(address);
 4163               		.loc 3 655 0
 4164 0854 8038      		cpi r24,-128
 4165 0856 9105      		cpc r25,__zero_reg__
 4166 0858 01F0      		breq .L258
 656:main.c        **** 				_delay_us(50);
 4167               		.loc 3 656 0
 4168 085a C701      		movw r24,r14
 4169 085c B601      		movw r22,r12
 4170 085e 00D0      		rcall gba_read_16bit_data
 4171               	.LVL436:
 4172               	.LBB244:
 4173               	.LBB245:
 4174               		.loc 2 276 0
 4175 0860 E5E8      		ldi r30,lo8(-123)
 4176 0862 EA95      	1:	dec r30
 4177 0864 01F4      		brne 1b
 4178 0866 0000      		nop
 4179 0868 00C0      		rjmp .L164
 4180               	.LVL437:
 4181               	.L258:
 4182               	.LBE245:
 4183               	.LBE244:
 662:main.c        **** 			GBA_DDR_ROM_ADDR15_8 = 0xFF;
 4184               		.loc 3 662 0
 4185 086a C4BB      		out 0x14,r28
 663:main.c        **** 			GBA_DDR_ROM_ADDR7_0 = 0xFF;
 4186               		.loc 3 663 0
 4187 086c CABB      		out 0x1a,r28
 664:main.c        **** 			
 4188               		.loc 3 664 0
 4189 086e C7BB      		out 0x17,r28
 667:main.c        **** 			
 4190               		.loc 3 667 0
 4191 0870 4FE1      		ldi r20,lo8(31)
 4192 0872 50E0      		ldi r21,0
 4193 0874 C701      		movw r24,r14
 4194 0876 B601      		movw r22,r12
 4195 0878 00D0      		rcall gba_flash_write_bus_cycle
 4196               	.LVL438:
 4197 087a 00E0      		ldi r16,lo8(receivedBuffer)
 4198 087c 10E0      		ldi r17,hi8(receivedBuffer)
 4199 087e 4601      		movw r8,r12
 4200 0880 5701      		movw r10,r14
 4201               	.LVL439:
 4202               	.L166:
 4203               	.LBB246:
 4204               	.LBB247:
 672:main.c        **** 				address++;
 4205               		.loc 3 672 0 discriminator 3
 4206 0882 F801      		movw r30,r16
 4207 0884 4181      		ldd r20,Z+1
 4208 0886 50E0      		ldi r21,0
 4209 0888 542F      		mov r21,r20
 4210 088a 4427      		clr r20
 4211 088c 8081      		ld r24,Z
 4212 088e 482B      		or r20,r24
 4213 0890 C501      		movw r24,r10
 4214 0892 B401      		movw r22,r8
 4215 0894 00D0      		rcall gba_flash_write_bus_cycle
 4216               	.LVL440:
 673:main.c        **** 			}
 4217               		.loc 3 673 0 discriminator 3
 4218 0896 FFEF      		ldi r31,-1
 4219 0898 8F1A      		sub r8,r31
 4220 089a 9F0A      		sbc r9,r31
 4221 089c AF0A      		sbc r10,r31
 4222 089e BF0A      		sbc r11,r31
 4223               	.LVL441:
 4224 08a0 0E5F      		subi r16,-2
 4225 08a2 1F4F      		sbci r17,-1
 4226               	.LVL442:
 4227               	.LBE247:
 670:main.c        **** 				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
 4228               		.loc 3 670 0 discriminator 3
 4229 08a4 80E0      		ldi r24,lo8(receivedBuffer+64)
 4230 08a6 90E0      		ldi r25,hi8(receivedBuffer+64)
 4231 08a8 8017      		cp r24,r16
 4232 08aa 9107      		cpc r25,r17
 4233 08ac 01F4      		brne .L166
 4234 08ae 90E2      		ldi r25,32
 4235 08b0 C90E      		add r12,r25
 4236 08b2 D11C      		adc r13,__zero_reg__
 4237 08b4 E11C      		adc r14,__zero_reg__
 4238 08b6 F11C      		adc r15,__zero_reg__
 4239               	.LBE246:
 677:main.c        **** 			_delay_us(440);
 4240               		.loc 3 677 0
 4241 08b8 40ED      		ldi r20,lo8(-48)
 4242 08ba 50E0      		ldi r21,0
 4243 08bc C701      		movw r24,r14
 4244 08be B601      		movw r22,r12
 4245 08c0 00D0      		rcall gba_flash_write_bus_cycle
 4246               	.LVL443:
 4247               	.LBB248:
 4248               	.LBB249:
 4249               		.loc 2 276 0
 4250 08c2 EFE6      		ldi r30,lo8(879)
 4251 08c4 F3E0      		ldi r31,hi8(879)
 4252 08c6 3197      	1:	sbiw r30,1
 4253 08c8 01F4      		brne 1b
 4254 08ca 00C0      		rjmp .
 4255 08cc 0000      		nop
 4256               	.LVL444:
 4257               	.LBE249:
 4258               	.LBE248:
 681:main.c        **** 			while (dataVerify != 0x0080) {
 4259               		.loc 3 681 0
 4260 08ce C701      		movw r24,r14
 4261 08d0 B601      		movw r22,r12
 4262 08d2 00D0      		rcall gba_read_16bit_data
 4263               	.LVL445:
 4264               	.L167:
 682:main.c        **** 				dataVerify = gba_read_16bit_data(address);
 4265               		.loc 3 682 0
 4266 08d4 8038      		cpi r24,-128
 4267 08d6 9105      		cpc r25,__zero_reg__
 4268 08d8 01F0      		breq .L259
 683:main.c        **** 				_delay_us(50);
 4269               		.loc 3 683 0
 4270 08da C701      		movw r24,r14
 4271 08dc B601      		movw r22,r12
 4272 08de 00D0      		rcall gba_read_16bit_data
 4273               	.LVL446:
 4274               	.LBB250:
 4275               	.LBB251:
 4276               		.loc 2 276 0
 4277 08e0 F5E8      		ldi r31,lo8(-123)
 4278 08e2 FA95      	1:	dec r31
 4279 08e4 01F4      		brne 1b
 4280 08e6 0000      		nop
 4281 08e8 00C0      		rjmp .L167
 4282               	.LVL447:
 4283               	.L259:
 4284               	.LBE251:
 4285               	.LBE250:
 689:main.c        **** 			GBA_DDR_ROM_ADDR15_8 = 0xFF;
 4286               		.loc 3 689 0
 4287 08ea C4BB      		out 0x14,r28
 690:main.c        **** 			GBA_DDR_ROM_ADDR7_0 = 0xFF;
 4288               		.loc 3 690 0
 4289 08ec CABB      		out 0x1a,r28
 691:main.c        **** 			
 4290               		.loc 3 691 0
 4291 08ee C7BB      		out 0x17,r28
 694:main.c        **** 			
 4292               		.loc 3 694 0
 4293 08f0 4FEF      		ldi r20,lo8(-1)
 4294 08f2 50E0      		ldi r21,0
 4295 08f4 C701      		movw r24,r14
 4296 08f6 B601      		movw r22,r12
 4297 08f8 00D0      		rcall gba_flash_write_bus_cycle
 4298               	.LVL448:
 4299 08fa 00C0      		rjmp .L244
 4300               	.LVL449:
 4301               	.L163:
 4302               	.LBE241:
 701:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 4303               		.loc 3 701 0
 4304 08fc 9537      		cpi r25,lo8(117)
 4305 08fe 01F4      		brne .L169
 702:main.c        **** 			usart_read_bytes(64);
 4306               		.loc 3 702 0
 4307 0900 939A      		sbi 0x12,3
 703:main.c        **** 			
 4308               		.loc 3 703 0
 4309 0902 80E4      		ldi r24,lo8(64)
 4310 0904 90E0      		ldi r25,0
 4311               	.LVL450:
 4312 0906 00D0      		rcall usart_read_bytes
 4313               	.LVL451:
 4314 0908 90E0      		ldi r25,lo8(receivedBuffer)
 4315 090a A92E      		mov r10,r25
 4316 090c 90E0      		ldi r25,hi8(receivedBuffer)
 4317 090e B92E      		mov r11,r25
 4318 0910 2601      		movw r4,r12
 4319 0912 3701      		movw r6,r14
 4320               	.LVL452:
 4321               	.L172:
 4322               	.LBB252:
 4323               	.LBB175:
 4324               		.loc 3 708 0
 4325 0914 C4BB      		out 0x14,r28
 709:main.c        **** 				GBA_DDR_ROM_ADDR15_8 = 0xFF;
 4326               		.loc 3 709 0
 4327 0916 CABB      		out 0x1a,r28
 710:main.c        **** 				GBA_DDR_ROM_ADDR7_0 = 0xFF;
 4328               		.loc 3 710 0
 4329 0918 C7BB      		out 0x17,r28
 711:main.c        **** 				
 712:main.c        **** 				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
 4330               		.loc 3 712 0
 4331 091a F501      		movw r30,r10
 4332 091c 0181      		ldd r16,Z+1
 4333 091e 10E0      		ldi r17,0
 4334 0920 102F      		mov r17,r16
 4335 0922 0027      		clr r16
 4336 0924 8081      		ld r24,Z
 4337 0926 082B      		or r16,r24
 4338               	.LVL453:
 713:main.c        **** 				gba_flash_write_bus_cycle(address, 0x40);
 4339               		.loc 3 713 0
 4340 0928 40E4      		ldi r20,lo8(64)
 4341 092a 50E0      		ldi r21,0
 4342 092c C301      		movw r24,r6
 4343 092e B201      		movw r22,r4
 4344 0930 00D0      		rcall gba_flash_write_bus_cycle
 4345               	.LVL454:
 714:main.c        **** 				gba_flash_write_bus_cycle(address, combinedBytes);
 4346               		.loc 3 714 0
 4347 0932 A801      		movw r20,r16
 4348 0934 C301      		movw r24,r6
 4349 0936 B201      		movw r22,r4
 4350 0938 00D0      		rcall gba_flash_write_bus_cycle
 4351               	.LVL455:
 715:main.c        **** 				
 716:main.c        **** 				// Verify status ok
 717:main.c        **** 				uint16_t status = gba_read_16bit_data(address);
 4352               		.loc 3 717 0
 4353 093a C301      		movw r24,r6
 4354 093c B201      		movw r22,r4
 4355 093e 00D0      		rcall gba_read_16bit_data
 4356               	.LVL456:
 4357               	.L170:
 718:main.c        **** 				while ((status & 0x80) == 0) {
 4358               		.loc 3 718 0
 4359 0940 87FD      		sbrc r24,7
 4360 0942 00C0      		rjmp .L260
 719:main.c        **** 					status = gba_read_16bit_data(address);
 4361               		.loc 3 719 0
 4362 0944 C301      		movw r24,r6
 4363 0946 B201      		movw r22,r4
 4364 0948 00D0      		rcall gba_read_16bit_data
 4365               	.LVL457:
 4366               	.LBB173:
 4367               	.LBB174:
 4368               		.loc 2 276 0
 4369 094a F5E0      		ldi r31,lo8(5)
 4370 094c FA95      	1:	dec r31
 4371 094e 01F4      		brne 1b
 4372 0950 0000      		nop
 4373 0952 00C0      		rjmp .L170
 4374               	.LVL458:
 4375               	.L260:
 4376               	.LBE174:
 4377               	.LBE173:
 720:main.c        **** 					_delay_us(2);
 721:main.c        **** 				}
 722:main.c        **** 				address++;
 4378               		.loc 3 722 0 discriminator 2
 4379 0954 2FEF      		ldi r18,-1
 4380 0956 421A      		sub r4,r18
 4381 0958 520A      		sbc r5,r18
 4382 095a 620A      		sbc r6,r18
 4383 095c 720A      		sbc r7,r18
 4384               	.LVL459:
 4385 095e 82E0      		ldi r24,2
 4386 0960 A80E      		add r10,r24
 4387 0962 B11C      		adc r11,__zero_reg__
 4388               	.LVL460:
 4389               	.LBE175:
 706:main.c        **** 				// Set address lines as outputs
 4390               		.loc 3 706 0 discriminator 2
 4391 0964 90E0      		ldi r25,lo8(receivedBuffer+64)
 4392 0966 A916      		cp r10,r25
 4393 0968 90E0      		ldi r25,hi8(receivedBuffer+64)
 4394 096a B906      		cpc r11,r25
 4395 096c 01F4      		brne .L172
 4396 096e E0E2      		ldi r30,32
 4397 0970 CE0E      		add r12,r30
 4398 0972 D11C      		adc r13,__zero_reg__
 4399 0974 E11C      		adc r14,__zero_reg__
 4400 0976 F11C      		adc r15,__zero_reg__
 4401               	.LVL461:
 4402               	.L244:
 4403               	.LBE252:
 723:main.c        **** 			}
 724:main.c        **** 			
 725:main.c        **** 			USART_Transmit(SEND_ACK); // Send back acknowledgement
 4404               		.loc 3 725 0
 4405 0978 81E3      		ldi r24,lo8(49)
 4406 097a 00C0      		rjmp .L239
 4407               	.LVL462:
 4408               	.L169:
 726:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 727:main.c        **** 		}
 728:main.c        **** 		
 729:main.c        **** 		
 730:main.c        **** 		// ---------- General commands ----------
 731:main.c        **** 		// Set any pin as input/output
 732:main.c        **** 		// Reads the DDR/PORT (e.g. DDRB/PORTB is 'B') and the hex value that represents pins to set to a
 733:main.c        **** 		else if (receivedChar == SET_INPUT || receivedChar == SET_OUTPUT) {
 4409               		.loc 3 733 0
 4410 097c 9934      		cpi r25,lo8(73)
 4411 097e 01F0      		breq .L173
 4412               		.loc 3 733 0 is_stmt 0 discriminator 1
 4413 0980 9F34      		cpi r25,lo8(79)
 4414 0982 01F0      		breq .+2
 4415 0984 00C0      		rjmp .L174
 4416               	.L173:
 4417               	.LBB253:
 734:main.c        **** 			char portChar = USART_Receive();
 4418               		.loc 3 734 0 is_stmt 1
 4419 0986 00D0      		rcall USART_Receive
 4420               	.LVL463:
 4421 0988 182F      		mov r17,r24
 4422               	.LVL464:
 735:main.c        **** 			usart_read_chars();
 4423               		.loc 3 735 0
 4424 098a 00D0      		rcall usart_read_chars
 4425               	.LVL465:
 736:main.c        **** 			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 4426               		.loc 3 736 0
 4427 098c 40E1      		ldi r20,lo8(16)
 4428 098e 50E0      		ldi r21,0
 4429 0990 60E0      		ldi r22,0
 4430 0992 70E0      		ldi r23,0
 4431 0994 80E0      		ldi r24,lo8(receivedBuffer)
 4432 0996 90E0      		ldi r25,hi8(receivedBuffer)
 4433 0998 00D0      		rcall strtol
 4434               	.LVL466:
 737:main.c        **** 			
 738:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 4435               		.loc 3 738 0
 4436 099a 939A      		sbi 0x12,3
 739:main.c        **** 			if (receivedChar == SET_INPUT) {
 4437               		.loc 3 739 0
 4438 099c 8091 0000 		lds r24,receivedChar
 4439 09a0 8934      		cpi r24,lo8(73)
 4440 09a2 01F4      		brne .L175
 740:main.c        **** 				if (portChar == 'A') {
 4441               		.loc 3 740 0
 4442 09a4 1134      		cpi r17,lo8(65)
 4443 09a6 01F4      		brne .L176
 741:main.c        **** 					DDRA &= ~(setValue);
 4444               		.loc 3 741 0
 4445 09a8 8AB3      		in r24,0x1a
 4446 09aa 6095      		com r22
 4447               	.LVL467:
 4448 09ac 6823      		and r22,r24
 4449               	.LVL468:
 4450 09ae 00C0      		rjmp .L246
 4451               	.LVL469:
 4452               	.L176:
 742:main.c        **** 				}
 743:main.c        **** 				else if (portChar == 'B') {
 4453               		.loc 3 743 0
 4454 09b0 1234      		cpi r17,lo8(66)
 4455 09b2 01F4      		brne .L178
 744:main.c        **** 					DDRB &= ~(setValue);
 4456               		.loc 3 744 0
 4457 09b4 87B3      		in r24,0x17
 4458 09b6 6095      		com r22
 4459               	.LVL470:
 4460 09b8 6823      		and r22,r24
 4461               	.LVL471:
 4462 09ba 00C0      		rjmp .L247
 4463               	.LVL472:
 4464               	.L178:
 745:main.c        **** 				}
 746:main.c        **** 				else if (portChar == 'C') {
 4465               		.loc 3 746 0
 4466 09bc 1334      		cpi r17,lo8(67)
 4467 09be 01F4      		brne .L179
 747:main.c        **** 					DDRC &= ~(setValue);
 4468               		.loc 3 747 0
 4469 09c0 84B3      		in r24,0x14
 4470 09c2 6095      		com r22
 4471               	.LVL473:
 4472 09c4 6823      		and r22,r24
 4473               	.LVL474:
 4474 09c6 00C0      		rjmp .L252
 4475               	.LVL475:
 4476               	.L179:
 748:main.c        **** 				}
 749:main.c        **** 				else if (portChar == 'D') {
 4477               		.loc 3 749 0
 4478 09c8 1434      		cpi r17,lo8(68)
 4479 09ca 01F4      		brne .L180
 750:main.c        **** 					DDRD &= ~(setValue);
 4480               		.loc 3 750 0
 4481 09cc 81B3      		in r24,0x11
 4482 09ce 6095      		com r22
 4483               	.LVL476:
 4484 09d0 6823      		and r22,r24
 4485               	.LVL477:
 4486 09d2 00C0      		rjmp .L253
 4487               	.LVL478:
 4488               	.L180:
 751:main.c        **** 				}
 752:main.c        **** 				else if (portChar == 'E') {
 4489               		.loc 3 752 0
 4490 09d4 1534      		cpi r17,lo8(69)
 4491 09d6 01F0      		breq .+2
 4492 09d8 00C0      		rjmp .L199
 753:main.c        **** 					DDRE &= ~(setValue);
 4493               		.loc 3 753 0
 4494 09da 86B1      		in r24,0x6
 4495 09dc 6095      		com r22
 4496               	.LVL479:
 4497 09de 6823      		and r22,r24
 4498               	.LVL480:
 4499 09e0 00C0      		rjmp .L254
 4500               	.LVL481:
 4501               	.L175:
 754:main.c        **** 				}
 755:main.c        **** 			}
 756:main.c        **** 			else if (receivedChar == SET_OUTPUT) {
 4502               		.loc 3 756 0
 4503 09e2 8F34      		cpi r24,lo8(79)
 4504 09e4 01F0      		breq .+2
 4505 09e6 00C0      		rjmp .L199
 757:main.c        **** 				if (portChar == 'A') {
 4506               		.loc 3 757 0
 4507 09e8 1134      		cpi r17,lo8(65)
 4508 09ea 01F4      		brne .L181
 758:main.c        **** 					DDRA |= (setValue);
 4509               		.loc 3 758 0
 4510 09ec 8AB3      		in r24,0x1a
 4511 09ee 682B      		or r22,r24
 4512               	.LVL482:
 4513               	.L246:
 4514 09f0 6ABB      		out 0x1a,r22
 4515 09f2 00C0      		rjmp .L199
 4516               	.LVL483:
 4517               	.L181:
 759:main.c        **** 				}
 760:main.c        **** 				else if (portChar == 'B') {
 4518               		.loc 3 760 0
 4519 09f4 1234      		cpi r17,lo8(66)
 4520 09f6 01F4      		brne .L182
 761:main.c        **** 					DDRB |= (setValue);
 4521               		.loc 3 761 0
 4522 09f8 87B3      		in r24,0x17
 4523 09fa 682B      		or r22,r24
 4524               	.LVL484:
 4525               	.L247:
 4526 09fc 67BB      		out 0x17,r22
 4527 09fe 00C0      		rjmp .L199
 4528               	.LVL485:
 4529               	.L182:
 762:main.c        **** 				}
 763:main.c        **** 				else if (portChar == 'C') {
 4530               		.loc 3 763 0
 4531 0a00 1334      		cpi r17,lo8(67)
 4532 0a02 01F4      		brne .L183
 764:main.c        **** 					DDRC |= (setValue);
 4533               		.loc 3 764 0
 4534 0a04 84B3      		in r24,0x14
 4535 0a06 682B      		or r22,r24
 4536               	.LVL486:
 4537               	.L252:
 4538 0a08 64BB      		out 0x14,r22
 4539 0a0a 00C0      		rjmp .L199
 4540               	.LVL487:
 4541               	.L183:
 765:main.c        **** 				}
 766:main.c        **** 				else if (portChar == 'D') {
 4542               		.loc 3 766 0
 4543 0a0c 1434      		cpi r17,lo8(68)
 4544 0a0e 01F4      		brne .L184
 767:main.c        **** 					DDRD |= (setValue);
 4545               		.loc 3 767 0
 4546 0a10 81B3      		in r24,0x11
 4547 0a12 682B      		or r22,r24
 4548               	.LVL488:
 4549               	.L253:
 4550 0a14 61BB      		out 0x11,r22
 4551 0a16 00C0      		rjmp .L199
 4552               	.LVL489:
 4553               	.L184:
 768:main.c        **** 				}
 769:main.c        **** 				else if (portChar == 'E') {
 4554               		.loc 3 769 0
 4555 0a18 1534      		cpi r17,lo8(69)
 4556 0a1a 01F0      		breq .+2
 4557 0a1c 00C0      		rjmp .L199
 770:main.c        **** 					DDRE |= (setValue);
 4558               		.loc 3 770 0
 4559 0a1e 86B1      		in r24,0x6
 4560 0a20 682B      		or r22,r24
 4561               	.LVL490:
 4562               	.L254:
 4563 0a22 66B9      		out 0x6,r22
 4564 0a24 00C0      		rjmp .L199
 4565               	.LVL491:
 4566               	.L174:
 4567               	.LBE253:
 771:main.c        **** 				}
 772:main.c        **** 			}
 773:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 774:main.c        **** 		}
 775:main.c        **** 		
 776:main.c        **** 		// Set pin output as low
 777:main.c        **** 		else if (receivedChar == SET_OUTPUT_LOW) {
 4568               		.loc 3 777 0
 4569 0a26 9C34      		cpi r25,lo8(76)
 4570 0a28 01F4      		brne .L185
 4571               	.LBB254:
 778:main.c        **** 			char portChar = USART_Receive();			
 4572               		.loc 3 778 0
 4573 0a2a 00D0      		rcall USART_Receive
 4574               	.LVL492:
 4575 0a2c 182F      		mov r17,r24
 4576               	.LVL493:
 779:main.c        **** 			usart_read_chars();
 4577               		.loc 3 779 0
 4578 0a2e 00D0      		rcall usart_read_chars
 4579               	.LVL494:
 780:main.c        **** 			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 4580               		.loc 3 780 0
 4581 0a30 40E1      		ldi r20,lo8(16)
 4582 0a32 50E0      		ldi r21,0
 4583 0a34 60E0      		ldi r22,0
 4584 0a36 70E0      		ldi r23,0
 4585 0a38 80E0      		ldi r24,lo8(receivedBuffer)
 4586 0a3a 90E0      		ldi r25,hi8(receivedBuffer)
 4587 0a3c 00D0      		rcall strtol
 4588               	.LVL495:
 781:main.c        **** 			
 782:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 4589               		.loc 3 782 0
 4590 0a3e 939A      		sbi 0x12,3
 783:main.c        **** 			if (portChar == 'A') {
 4591               		.loc 3 783 0
 4592 0a40 1134      		cpi r17,lo8(65)
 4593 0a42 01F4      		brne .L186
 784:main.c        **** 				PORTA &= ~(setValue);
 4594               		.loc 3 784 0
 4595 0a44 8BB3      		in r24,0x1b
 4596 0a46 6095      		com r22
 4597               	.LVL496:
 4598 0a48 6823      		and r22,r24
 4599               	.LVL497:
 4600 0a4a 00C0      		rjmp .L251
 4601               	.LVL498:
 4602               	.L186:
 785:main.c        **** 			}
 786:main.c        **** 			else if (portChar == 'B') {
 4603               		.loc 3 786 0
 4604 0a4c 1234      		cpi r17,lo8(66)
 4605 0a4e 01F4      		brne .L188
 787:main.c        **** 				PORTB &= ~(setValue);
 4606               		.loc 3 787 0
 4607 0a50 88B3      		in r24,0x18
 4608 0a52 6095      		com r22
 4609               	.LVL499:
 4610 0a54 6823      		and r22,r24
 4611               	.LVL500:
 4612 0a56 00C0      		rjmp .L250
 4613               	.LVL501:
 4614               	.L188:
 788:main.c        **** 			}
 789:main.c        **** 			else if (portChar == 'C') {
 4615               		.loc 3 789 0
 4616 0a58 1334      		cpi r17,lo8(67)
 4617 0a5a 01F4      		brne .L189
 790:main.c        **** 				PORTC &= ~(setValue);
 4618               		.loc 3 790 0
 4619 0a5c 85B3      		in r24,0x15
 4620 0a5e 6095      		com r22
 4621               	.LVL502:
 4622 0a60 6823      		and r22,r24
 4623               	.LVL503:
 4624 0a62 00C0      		rjmp .L249
 4625               	.LVL504:
 4626               	.L189:
 791:main.c        **** 			}
 792:main.c        **** 			else if (portChar == 'D') {
 4627               		.loc 3 792 0
 4628 0a64 1434      		cpi r17,lo8(68)
 4629 0a66 01F4      		brne .L190
 793:main.c        **** 				PORTD &= ~(setValue);
 4630               		.loc 3 793 0
 4631 0a68 82B3      		in r24,0x12
 4632 0a6a 6095      		com r22
 4633               	.LVL505:
 4634 0a6c 6823      		and r22,r24
 4635               	.LVL506:
 4636 0a6e 00C0      		rjmp .L248
 4637               	.LVL507:
 4638               	.L190:
 794:main.c        **** 			}
 795:main.c        **** 			else if (portChar == 'E') {
 4639               		.loc 3 795 0
 4640 0a70 1534      		cpi r17,lo8(69)
 4641 0a72 01F0      		breq .+2
 4642 0a74 00C0      		rjmp .L199
 796:main.c        **** 				PORTE &= ~(setValue);
 4643               		.loc 3 796 0
 4644 0a76 87B1      		in r24,0x7
 4645 0a78 6095      		com r22
 4646               	.LVL508:
 4647 0a7a 6823      		and r22,r24
 4648               	.LVL509:
 4649 0a7c 00C0      		rjmp .L245
 4650               	.LVL510:
 4651               	.L185:
 4652               	.LBE254:
 797:main.c        **** 			}
 798:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 799:main.c        **** 		}
 800:main.c        **** 		
 801:main.c        **** 		// Set pin output as high
 802:main.c        **** 		else if (receivedChar == SET_OUTPUT_HIGH) {
 4653               		.loc 3 802 0
 4654 0a7e 9834      		cpi r25,lo8(72)
 4655 0a80 01F4      		brne .L191
 4656               	.LBB255:
 803:main.c        **** 			char portChar = USART_Receive();			
 4657               		.loc 3 803 0
 4658 0a82 00D0      		rcall USART_Receive
 4659               	.LVL511:
 4660 0a84 182F      		mov r17,r24
 4661               	.LVL512:
 804:main.c        **** 			usart_read_chars();
 4662               		.loc 3 804 0
 4663 0a86 00D0      		rcall usart_read_chars
 4664               	.LVL513:
 805:main.c        **** 			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
 4665               		.loc 3 805 0
 4666 0a88 40E1      		ldi r20,lo8(16)
 4667 0a8a 50E0      		ldi r21,0
 4668 0a8c 60E0      		ldi r22,0
 4669 0a8e 70E0      		ldi r23,0
 4670 0a90 80E0      		ldi r24,lo8(receivedBuffer)
 4671 0a92 90E0      		ldi r25,hi8(receivedBuffer)
 4672 0a94 00D0      		rcall strtol
 4673               	.LVL514:
 806:main.c        **** 			
 807:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 4674               		.loc 3 807 0
 4675 0a96 939A      		sbi 0x12,3
 808:main.c        **** 			if (portChar == 'A') {
 4676               		.loc 3 808 0
 4677 0a98 1134      		cpi r17,lo8(65)
 4678 0a9a 01F4      		brne .L192
 809:main.c        **** 				PORTA |= (setValue);
 4679               		.loc 3 809 0
 4680 0a9c 8BB3      		in r24,0x1b
 4681 0a9e 682B      		or r22,r24
 4682               	.LVL515:
 4683               	.L251:
 4684 0aa0 6BBB      		out 0x1b,r22
 4685 0aa2 00C0      		rjmp .L199
 4686               	.LVL516:
 4687               	.L192:
 810:main.c        **** 			}
 811:main.c        **** 			else if (portChar == 'B') {
 4688               		.loc 3 811 0
 4689 0aa4 1234      		cpi r17,lo8(66)
 4690 0aa6 01F4      		brne .L194
 812:main.c        **** 				PORTB |= (setValue);
 4691               		.loc 3 812 0
 4692 0aa8 88B3      		in r24,0x18
 4693 0aaa 682B      		or r22,r24
 4694               	.LVL517:
 4695               	.L250:
 4696 0aac 68BB      		out 0x18,r22
 4697 0aae 00C0      		rjmp .L199
 4698               	.LVL518:
 4699               	.L194:
 813:main.c        **** 			}
 814:main.c        **** 			else if (portChar == 'C') {
 4700               		.loc 3 814 0
 4701 0ab0 1334      		cpi r17,lo8(67)
 4702 0ab2 01F4      		brne .L195
 815:main.c        **** 				PORTC |= (setValue);
 4703               		.loc 3 815 0
 4704 0ab4 85B3      		in r24,0x15
 4705 0ab6 682B      		or r22,r24
 4706               	.LVL519:
 4707               	.L249:
 4708 0ab8 65BB      		out 0x15,r22
 4709 0aba 00C0      		rjmp .L199
 4710               	.LVL520:
 4711               	.L195:
 816:main.c        **** 			}
 817:main.c        **** 			else if (portChar == 'D') {
 4712               		.loc 3 817 0
 4713 0abc 1434      		cpi r17,lo8(68)
 4714 0abe 01F4      		brne .L196
 818:main.c        **** 				PORTD |= (setValue);
 4715               		.loc 3 818 0
 4716 0ac0 82B3      		in r24,0x12
 4717 0ac2 682B      		or r22,r24
 4718               	.LVL521:
 4719               	.L248:
 4720 0ac4 62BB      		out 0x12,r22
 4721 0ac6 00C0      		rjmp .L199
 4722               	.LVL522:
 4723               	.L196:
 819:main.c        **** 			}
 820:main.c        **** 			else if (portChar == 'E') {
 4724               		.loc 3 820 0
 4725 0ac8 1534      		cpi r17,lo8(69)
 4726 0aca 01F4      		brne .L199
 821:main.c        **** 				PORTE |= (setValue);
 4727               		.loc 3 821 0
 4728 0acc 87B1      		in r24,0x7
 4729 0ace 682B      		or r22,r24
 4730               	.LVL523:
 4731               	.L245:
 4732 0ad0 67B9      		out 0x7,r22
 4733 0ad2 00C0      		rjmp .L199
 4734               	.LVL524:
 4735               	.L191:
 4736               	.LBE255:
 822:main.c        **** 			}
 823:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 824:main.c        **** 		}
 825:main.c        **** 		
 826:main.c        **** 		// Read all pins of a PORT and return the value
 827:main.c        **** 		else if (receivedChar == READ_INPUT) {
 4737               		.loc 3 827 0
 4738 0ad4 9434      		cpi r25,lo8(68)
 4739 0ad6 01F4      		brne .L197
 4740               	.LBB256:
 828:main.c        **** 			char portChar = USART_Receive();			
 4741               		.loc 3 828 0
 4742 0ad8 00D0      		rcall USART_Receive
 4743               	.LVL525:
 829:main.c        **** 			
 830:main.c        **** 			PORTD |= (1<<ACTIVITY_LED);
 4744               		.loc 3 830 0
 4745 0ada 939A      		sbi 0x12,3
 831:main.c        **** 			if (portChar == 'A') {
 4746               		.loc 3 831 0
 4747 0adc 8134      		cpi r24,lo8(65)
 4748 0ade 01F4      		brne .L198
 832:main.c        **** 				USART_Transmit(PINA);
 4749               		.loc 3 832 0
 4750 0ae0 89B3      		in r24,0x19
 4751               	.LVL526:
 4752 0ae2 00C0      		rjmp .L239
 4753               	.LVL527:
 4754               	.L198:
 833:main.c        **** 			}
 834:main.c        **** 			else if (portChar == 'B') {
 4755               		.loc 3 834 0
 4756 0ae4 8234      		cpi r24,lo8(66)
 4757 0ae6 01F4      		brne .L200
 835:main.c        **** 				USART_Transmit(PINB);
 4758               		.loc 3 835 0
 4759 0ae8 86B3      		in r24,0x16
 4760               	.LVL528:
 4761 0aea 00C0      		rjmp .L239
 4762               	.LVL529:
 4763               	.L200:
 836:main.c        **** 			}
 837:main.c        **** 			else if (portChar == 'C') {
 4764               		.loc 3 837 0
 4765 0aec 8334      		cpi r24,lo8(67)
 4766 0aee 01F4      		brne .L201
 838:main.c        **** 				USART_Transmit(PINC);
 4767               		.loc 3 838 0
 4768 0af0 83B3      		in r24,0x13
 4769               	.LVL530:
 4770 0af2 00C0      		rjmp .L239
 4771               	.LVL531:
 4772               	.L201:
 839:main.c        **** 			}
 840:main.c        **** 			else if (portChar == 'D') {
 4773               		.loc 3 840 0
 4774 0af4 8434      		cpi r24,lo8(68)
 4775 0af6 01F4      		brne .L202
 841:main.c        **** 				USART_Transmit(PIND);
 4776               		.loc 3 841 0
 4777 0af8 80B3      		in r24,0x10
 4778               	.LVL532:
 4779 0afa 00C0      		rjmp .L239
 4780               	.LVL533:
 4781               	.L202:
 842:main.c        **** 			}
 843:main.c        **** 			else if (portChar == 'E') {
 4782               		.loc 3 843 0
 4783 0afc 8534      		cpi r24,lo8(69)
 4784 0afe 01F4      		brne .L199
 844:main.c        **** 				USART_Transmit(PINE);
 4785               		.loc 3 844 0
 4786 0b00 85B1      		in r24,0x5
 4787               	.LVL534:
 4788               	.L239:
 4789 0b02 00D0      		rcall USART_Transmit
 4790               	.LVL535:
 4791               	.L199:
 845:main.c        **** 			}
 846:main.c        **** 			PORTD &= ~(1<<ACTIVITY_LED);
 4792               		.loc 3 846 0
 4793 0b04 9398      		cbi 0x12,3
 4794               	.LBE256:
 4795 0b06 00C0      		rjmp .L93
 4796               	.LVL536:
 4797               	.L197:
 847:main.c        **** 		}
 848:main.c        **** 		
 849:main.c        **** 		// Set the reset common lines variable on or off, useful if you are controlling all the pins dire
 850:main.c        **** 		else if (receivedChar == RESET_COMMON_LINES) {
 4798               		.loc 3 850 0
 4799 0b08 9D34      		cpi r25,lo8(77)
 4800 0b0a 01F4      		brne .L203
 4801               	.LBB257:
 851:main.c        **** 			char commonChar = USART_Receive();
 4802               		.loc 3 851 0
 4803 0b0c 00D0      		rcall USART_Receive
 4804               	.LVL537:
 852:main.c        **** 			if (commonChar == '1') {
 4805               		.loc 3 852 0
 4806 0b0e 8133      		cpi r24,lo8(49)
 4807 0b10 01F4      		brne .L261
 853:main.c        **** 				resetCommonLines = 1;
 4808               		.loc 3 853 0
 4809 0b12 2224      		clr r2
 4810 0b14 2394      		inc r2
 4811 0b16 00C0      		rjmp .L235
 4812               	.L261:
 854:main.c        **** 			}
 855:main.c        **** 			else if (commonChar == '0') {
 4813               		.loc 3 855 0
 4814 0b18 8033      		cpi r24,lo8(48)
 4815 0b1a 01F0      		breq .+2
 4816 0b1c 00C0      		rjmp .L93
 856:main.c        **** 				resetCommonLines = 0;
 4817               		.loc 3 856 0
 4818 0b1e 212C      		mov r2,__zero_reg__
 4819 0b20 00C0      		rjmp .L94
 4820               	.LVL538:
 4821               	.L203:
 4822               	.LBE257:
 857:main.c        **** 			}
 858:main.c        **** 		}
 859:main.c        **** 		
 860:main.c        **** 		// Send back the PCB version number
 861:main.c        **** 		else if (receivedChar == READ_PCB_VERSION) {
 4823               		.loc 3 861 0
 4824 0b22 9836      		cpi r25,lo8(104)
 4825 0b24 01F4      		brne .L204
 862:main.c        **** 			USART_Transmit(PCB_VERSION);
 4826               		.loc 3 862 0
 4827 0b26 82E0      		ldi r24,lo8(2)
 4828               	.LVL539:
 4829 0b28 00C0      		rjmp .L236
 4830               	.LVL540:
 4831               	.L204:
 863:main.c        **** 		}
 864:main.c        **** 		
 865:main.c        **** 		// Send back the firmware version number
 866:main.c        **** 		else if (receivedChar == READ_FIRMWARE_VERSION) {
 4832               		.loc 3 866 0
 4833 0b2a 9635      		cpi r25,lo8(86)
 4834 0b2c 01F4      		brne .L205
 867:main.c        **** 			USART_Transmit(FIRMWARE_VERSION);
 4835               		.loc 3 867 0
 4836 0b2e 8FE0      		ldi r24,lo8(15)
 4837               	.LVL541:
 4838               	.L236:
 4839 0b30 00D0      		rcall USART_Transmit
 4840               	.LVL542:
 4841 0b32 00C0      		rjmp .L93
 4842               	.LVL543:
 4843               	.L205:
 868:main.c        **** 		}
 869:main.c        **** 		
 870:main.c        **** 		// Reset the AVR if it matches the number
 871:main.c        **** 		else if (receivedChar == RESET_AVR) {
 4844               		.loc 3 871 0
 4845 0b34 9A32      		cpi r25,lo8(42)
 4846 0b36 01F0      		breq .+2
 4847 0b38 00C0      		rjmp .L93
 4848               	.LBB258:
 872:main.c        **** 			usart_read_chars();
 4849               		.loc 3 872 0
 4850 0b3a 00D0      		rcall usart_read_chars
 4851               	.LVL544:
 873:main.c        **** 			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
 4852               		.loc 3 873 0
 4853 0b3c 40E1      		ldi r20,lo8(16)
 4854 0b3e 50E0      		ldi r21,0
 4855 0b40 60E0      		ldi r22,0
 4856 0b42 70E0      		ldi r23,0
 4857 0b44 80E0      		ldi r24,lo8(receivedBuffer)
 4858 0b46 90E0      		ldi r25,hi8(receivedBuffer)
 4859 0b48 00D0      		rcall strtol
 4860               	.LVL545:
 874:main.c        **** 			if (resetValue == RESET_VALUE) {
 4861               		.loc 3 874 0
 4862 0b4a 613E      		cpi r22,-31
 4863 0b4c 754E      		sbci r23,-27
 4864 0b4e 8740      		sbci r24,7
 4865 0b50 9105      		cpc r25,__zero_reg__
 4866 0b52 01F0      		breq .+2
 4867 0b54 00C0      		rjmp .L93
 875:main.c        **** 				// Clear watchdog flag
 876:main.c        **** 				MCUCSR &= ~(1<<WDRF);
 4868               		.loc 3 876 0
 4869 0b56 84B7      		in r24,0x34
 4870 0b58 877F      		andi r24,lo8(-9)
 4871 0b5a 84BF      		out 0x34,r24
 877:main.c        **** 				
 878:main.c        **** 				// Start timed sequence
 879:main.c        **** 				WDTCR = (1<<WDCE) | (1<<WDE);
 4872               		.loc 3 879 0
 4873 0b5c 28E1      		ldi r18,lo8(24)
 4874 0b5e 21BD      		out 0x21,r18
 880:main.c        **** 				
 881:main.c        **** 				// Reset in 250 ms
 882:main.c        **** 				WDTCR = (1<<WDP2) | (1<<WDE);
 4875               		.loc 3 882 0
 4876 0b60 8CE0      		ldi r24,lo8(12)
 4877 0b62 81BD      		out 0x21,r24
 4878               	.LVL546:
 4879               	.LBB259:
 4880               	.LBB260:
 4881               		.file 4 "c:\\winavr-20100110\\avr\\include\\util\\delay_basic.h"
   1:c:\winavr-20100110\avr\include\util\delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\winavr-20100110\avr\include\util\delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:c:\winavr-20100110\avr\include\util\delay_basic.h ****    All rights reserved.
   4:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
   5:c:\winavr-20100110\avr\include\util\delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:c:\winavr-20100110\avr\include\util\delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
   8:c:\winavr-20100110\avr\include\util\delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:c:\winavr-20100110\avr\include\util\delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  11:c:\winavr-20100110\avr\include\util\delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:\winavr-20100110\avr\include\util\delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:c:\winavr-20100110\avr\include\util\delay_basic.h ****      the documentation and/or other materials provided with the
  14:c:\winavr-20100110\avr\include\util\delay_basic.h ****      distribution.
  15:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  16:c:\winavr-20100110\avr\include\util\delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:c:\winavr-20100110\avr\include\util\delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:c:\winavr-20100110\avr\include\util\delay_basic.h ****      from this software without specific prior written permission.
  19:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  20:c:\winavr-20100110\avr\include\util\delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:\winavr-20100110\avr\include\util\delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:\winavr-20100110\avr\include\util\delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:\winavr-20100110\avr\include\util\delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:\winavr-20100110\avr\include\util\delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:\winavr-20100110\avr\include\util\delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:\winavr-20100110\avr\include\util\delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:\winavr-20100110\avr\include\util\delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:\winavr-20100110\avr\include\util\delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:\winavr-20100110\avr\include\util\delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:\winavr-20100110\avr\include\util\delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  32:c:\winavr-20100110\avr\include\util\delay_basic.h **** /* $Id$ */
  33:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  34:c:\winavr-20100110\avr\include\util\delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:c:\winavr-20100110\avr\include\util\delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  37:c:\winavr-20100110\avr\include\util\delay_basic.h **** #include <inttypes.h>
  38:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  39:c:\winavr-20100110\avr\include\util\delay_basic.h **** #if !defined(__DOXYGEN__)
  40:c:\winavr-20100110\avr\include\util\delay_basic.h **** static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
  41:c:\winavr-20100110\avr\include\util\delay_basic.h **** static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
  42:c:\winavr-20100110\avr\include\util\delay_basic.h **** #endif
  43:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  44:c:\winavr-20100110\avr\include\util\delay_basic.h **** /** \file */
  45:c:\winavr-20100110\avr\include\util\delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:c:\winavr-20100110\avr\include\util\delay_basic.h ****     \code
  47:c:\winavr-20100110\avr\include\util\delay_basic.h ****     #include <util/delay_basic.h>
  48:c:\winavr-20100110\avr\include\util\delay_basic.h ****     \endcode
  49:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  50:c:\winavr-20100110\avr\include\util\delay_basic.h ****     The functions in this header file implement simple delay loops
  51:c:\winavr-20100110\avr\include\util\delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:c:\winavr-20100110\avr\include\util\delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:c:\winavr-20100110\avr\include\util\delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:c:\winavr-20100110\avr\include\util\delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:c:\winavr-20100110\avr\include\util\delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:c:\winavr-20100110\avr\include\util\delay_basic.h ****     functions described here do not disable interrupts.
  57:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  58:c:\winavr-20100110\avr\include\util\delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:c:\winavr-20100110\avr\include\util\delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:c:\winavr-20100110\avr\include\util\delay_basic.h ****     concurrent processing of other events while the timer is
  61:c:\winavr-20100110\avr\include\util\delay_basic.h ****     running.  However, in particular for very short delays, the
  62:c:\winavr-20100110\avr\include\util\delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:c:\winavr-20100110\avr\include\util\delay_basic.h ****     to the overall delay time.
  64:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  65:c:\winavr-20100110\avr\include\util\delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  67:c:\winavr-20100110\avr\include\util\delay_basic.h **** */
  68:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  69:c:\winavr-20100110\avr\include\util\delay_basic.h **** /** \ingroup util_delay_basic
  70:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  71:c:\winavr-20100110\avr\include\util\delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:c:\winavr-20100110\avr\include\util\delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:c:\winavr-20100110\avr\include\util\delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:c:\winavr-20100110\avr\include\util\delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:c:\winavr-20100110\avr\include\util\delay_basic.h ****     register.
  76:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  77:c:\winavr-20100110\avr\include\util\delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:c:\winavr-20100110\avr\include\util\delay_basic.h ****     can be achieved.
  79:c:\winavr-20100110\avr\include\util\delay_basic.h **** */
  80:c:\winavr-20100110\avr\include\util\delay_basic.h **** void
  81:c:\winavr-20100110\avr\include\util\delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:c:\winavr-20100110\avr\include\util\delay_basic.h **** {
  83:c:\winavr-20100110\avr\include\util\delay_basic.h **** 	__asm__ volatile (
  84:c:\winavr-20100110\avr\include\util\delay_basic.h **** 		"1: dec %0" "\n\t"
  85:c:\winavr-20100110\avr\include\util\delay_basic.h **** 		"brne 1b"
  86:c:\winavr-20100110\avr\include\util\delay_basic.h **** 		: "=r" (__count)
  87:c:\winavr-20100110\avr\include\util\delay_basic.h **** 		: "0" (__count)
  88:c:\winavr-20100110\avr\include\util\delay_basic.h **** 	);
  89:c:\winavr-20100110\avr\include\util\delay_basic.h **** }
  90:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  91:c:\winavr-20100110\avr\include\util\delay_basic.h **** /** \ingroup util_delay_basic
  92:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  93:c:\winavr-20100110\avr\include\util\delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:c:\winavr-20100110\avr\include\util\delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:c:\winavr-20100110\avr\include\util\delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:c:\winavr-20100110\avr\include\util\delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:c:\winavr-20100110\avr\include\util\delay_basic.h ****     counter register pair.
  98:c:\winavr-20100110\avr\include\util\delay_basic.h **** 
  99:c:\winavr-20100110\avr\include\util\delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:c:\winavr-20100110\avr\include\util\delay_basic.h ****     milliseconds can be achieved.
 101:c:\winavr-20100110\avr\include\util\delay_basic.h ****  */
 102:c:\winavr-20100110\avr\include\util\delay_basic.h **** void
 103:c:\winavr-20100110\avr\include\util\delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:c:\winavr-20100110\avr\include\util\delay_basic.h **** {
 105:c:\winavr-20100110\avr\include\util\delay_basic.h **** 	__asm__ volatile (
 4882               		.loc 4 105 0
 4883 0b64 8FEF      		ldi r24,lo8(-1)
 4884 0b66 9FEF      		ldi r25,lo8(-1)
 4885               	/* #APP */
 4886               	 ;  105 "c:\winavr-20100110\avr\include\util\delay_basic.h" 1
 4887 0b68 0197      		1: sbiw r24,1
 4888 0b6a 01F4      		brne 1b
 4889               	 ;  0 "" 2
 4890               	.LVL547:
 4891               	/* #NOAPP */
 4892 0b6c 00C0      		rjmp .L93
 4893               	.LBE260:
 4894               	.LBE259:
 4895               	.LBE258:
 4896               		.cfi_endproc
 4897               	.LFE45:
 4899               	.global	lastBankAccessed
 4900               		.section .bss
 4903               	lastBankAccessed:
 4904 0000 00        		.zero	1
 4905               	.global	flashBank1CommandWrites
 4908               	flashBank1CommandWrites:
 4909 0001 00        		.zero	1
 4910               		.comm	flashWriteCycle,12,1
 4911               		.comm	flashWriteWePin,1,1
 4912               		.comm	flashChipIdBuffer,2,1
 4913               		.comm	eepromBuffer,8,1
 4914               		.comm	receivedChar,1,1
 4915               		.comm	receivedBuffer,256,1
 4916               		.text
 4917               	.Letext0:
 4918               		.file 5 "c:\\winavr-20100110\\avr\\include\\stdint.h"
 4919               		.file 6 "c:\\winavr-20100110\\avr\\include\\stdlib.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:2      *ABS*:0000003e __SP_H__
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:3      *ABS*:0000003d __SP_L__
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:4      *ABS*:0000003f __SREG__
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:12     .text:00000000 USART_Receive
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:34     .text:00000008 USART_Transmit
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:55     .text:00000010 usart_read_bytes
                            *COM*:00000100 receivedBuffer
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:118    .text:0000003a usart_read_chars
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:158    .text:00000050 rd_wr_csmreq_cs2_reset
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:180    .text:0000005a gb_mode
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:207    .text:0000006a set_16bit_address
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:226    .text:00000070 read_8bit_data
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:266    .text:00000082 write_8bit_data
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:331    .text:000000ae gba_mode
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:358    .text:000000be gba_set_24bit_address
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:411    .text:000000ea gba_read_16bit_data
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:459    .text:00000108 gba_read_ram_8bit_data
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:499    .text:0000011a gba_write_ram_8bit_data
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:553    .text:0000013a gba_eeprom_mode
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:581    .text:0000014c gba_eeprom_set_address
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:720    .text:000001b4 gba_eeprom_read
                            *COM*:00000008 eepromBuffer
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:852    .text:0000020e gba_eeprom_write
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:968    .text:00000262 flash_write_bus_cycle
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:1014   .text:0000027c flash_read_chip_id
                            *COM*:00000002 flashChipIdBuffer
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:1119   .text:000002e6 flash_switch_bank
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:1168   .text:0000030c flash_erase_4k_sector
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:1243   .text:00000354 flash_write_byte
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:1314   .text:0000038c flash_write_sector
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:1427   .text:000003f8 gb_flash_read_byte
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:1467   .text:0000040a gb_flash_write_bus_cycle
                            *COM*:00000001 flashWriteWePin
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:1546   .text:0000043c gb_flash_write_byte
                            *COM*:0000000c flashWriteCycle
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:1646   .text:000004a0 gb_flash_write_byte_bank1_commands
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:4903   .bss:00000000 lastBankAccessed
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:1809   .text:00000534 gba_flash_write_bus_cycle
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:1875   .text:00000564 gba_flash_write_cycle_start_swapped
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:1999   .text:000005c4 gba_flash_write_cycle_start
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:2121   .text:00000620 gba_flash_write_byte
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:2229   .text:00000676 setup
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:2344   .text.startup:00000000 main
                            *COM*:00000001 receivedChar
C:\Users\Alex\AppData\Local\Temp\ccDHXh5k.s:4908   .bss:00000001 flashBank1CommandWrites

UNDEFINED SYMBOLS
strtol
atoi
__do_clear_bss
